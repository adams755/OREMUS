
Modulo_Motores_V11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fd4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080030e0  080030e0  000130e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003104  08003104  00013104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003108  08003108  00013108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  0800310c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000124  2000000c  08003118  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000130  08003118  00020130  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000eb47  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c3e  00000000  00000000  0002eb7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a00  00000000  00000000  000307c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000948  00000000  00000000  000311c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000043f5  00000000  00000000  00031b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003343  00000000  00000000  00035efd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00039240  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002960  00000000  00000000  000392bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080030c8 	.word	0x080030c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080030c8 	.word	0x080030c8

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 ff71 	bl	8001044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fdce 	bl	8002d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 ff89 	bl	80010ae <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 ff51 	bl	800105a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000005c 	.word	0x2000005c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000005c 	.word	0x2000005c

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad2      	subs	r2, r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d3f7      	bcc.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d101      	bne.n	8000266 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000262:	2301      	movs	r3, #1
 8000264:	e0ec      	b.n	8000440 <HAL_CAN_Init+0x1ec>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	2b00      	cmp	r3, #0
 8000270:	d102      	bne.n	8000278 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000272:	6878      	ldr	r0, [r7, #4]
 8000274:	f002 fd6a 	bl	8002d4c <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	6812      	ldr	r2, [r2, #0]
 8000280:	6812      	ldr	r2, [r2, #0]
 8000282:	f022 0202 	bic.w	r2, r2, #2
 8000286:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000288:	f7ff ffb8 	bl	80001fc <HAL_GetTick>
 800028c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800028e:	e012      	b.n	80002b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000290:	f7ff ffb4 	bl	80001fc <HAL_GetTick>
 8000294:	4602      	mov	r2, r0
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	1ad3      	subs	r3, r2, r3
 800029a:	2b0a      	cmp	r3, #10
 800029c:	d90b      	bls.n	80002b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2205      	movs	r2, #5
 80002ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002b2:	2301      	movs	r3, #1
 80002b4:	e0c4      	b.n	8000440 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	f003 0302 	and.w	r3, r3, #2
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1e5      	bne.n	8000290 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	6812      	ldr	r2, [r2, #0]
 80002cc:	6812      	ldr	r2, [r2, #0]
 80002ce:	f042 0201 	orr.w	r2, r2, #1
 80002d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80002d4:	f7ff ff92 	bl	80001fc <HAL_GetTick>
 80002d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80002da:	e012      	b.n	8000302 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002dc:	f7ff ff8e 	bl	80001fc <HAL_GetTick>
 80002e0:	4602      	mov	r2, r0
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	2b0a      	cmp	r3, #10
 80002e8:	d90b      	bls.n	8000302 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2205      	movs	r2, #5
 80002fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002fe:	2301      	movs	r3, #1
 8000300:	e09e      	b.n	8000440 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	f003 0301 	and.w	r3, r3, #1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d0e5      	beq.n	80002dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	7e1b      	ldrb	r3, [r3, #24]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d108      	bne.n	800032a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	6812      	ldr	r2, [r2, #0]
 8000320:	6812      	ldr	r2, [r2, #0]
 8000322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	e007      	b.n	800033a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	6812      	ldr	r2, [r2, #0]
 8000332:	6812      	ldr	r2, [r2, #0]
 8000334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000338:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	7e5b      	ldrb	r3, [r3, #25]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d108      	bne.n	8000354 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	6812      	ldr	r2, [r2, #0]
 800034a:	6812      	ldr	r2, [r2, #0]
 800034c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	e007      	b.n	8000364 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	6812      	ldr	r2, [r2, #0]
 800035c:	6812      	ldr	r2, [r2, #0]
 800035e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000362:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	7e9b      	ldrb	r3, [r3, #26]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d108      	bne.n	800037e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	6812      	ldr	r2, [r2, #0]
 8000374:	6812      	ldr	r2, [r2, #0]
 8000376:	f042 0220 	orr.w	r2, r2, #32
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	e007      	b.n	800038e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	6812      	ldr	r2, [r2, #0]
 8000386:	6812      	ldr	r2, [r2, #0]
 8000388:	f022 0220 	bic.w	r2, r2, #32
 800038c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	7edb      	ldrb	r3, [r3, #27]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d108      	bne.n	80003a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	6812      	ldr	r2, [r2, #0]
 800039e:	6812      	ldr	r2, [r2, #0]
 80003a0:	f022 0210 	bic.w	r2, r2, #16
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	e007      	b.n	80003b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	6812      	ldr	r2, [r2, #0]
 80003b0:	6812      	ldr	r2, [r2, #0]
 80003b2:	f042 0210 	orr.w	r2, r2, #16
 80003b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	7f1b      	ldrb	r3, [r3, #28]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d108      	bne.n	80003d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	6812      	ldr	r2, [r2, #0]
 80003c8:	6812      	ldr	r2, [r2, #0]
 80003ca:	f042 0208 	orr.w	r2, r2, #8
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	e007      	b.n	80003e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	6812      	ldr	r2, [r2, #0]
 80003da:	6812      	ldr	r2, [r2, #0]
 80003dc:	f022 0208 	bic.w	r2, r2, #8
 80003e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	7f5b      	ldrb	r3, [r3, #29]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d108      	bne.n	80003fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	6812      	ldr	r2, [r2, #0]
 80003f2:	6812      	ldr	r2, [r2, #0]
 80003f4:	f042 0204 	orr.w	r2, r2, #4
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	e007      	b.n	800040c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	6812      	ldr	r2, [r2, #0]
 8000404:	6812      	ldr	r2, [r2, #0]
 8000406:	f022 0204 	bic.w	r2, r2, #4
 800040a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	6891      	ldr	r1, [r2, #8]
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	68d2      	ldr	r2, [r2, #12]
 8000418:	4311      	orrs	r1, r2
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	6912      	ldr	r2, [r2, #16]
 800041e:	4311      	orrs	r1, r2
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	6952      	ldr	r2, [r2, #20]
 8000424:	4311      	orrs	r1, r2
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	6852      	ldr	r2, [r2, #4]
 800042a:	3a01      	subs	r2, #1
 800042c:	430a      	orrs	r2, r1
 800042e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2200      	movs	r2, #0
 8000434:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800043e:	2300      	movs	r3, #0
}
 8000440:	4618      	mov	r0, r3
 8000442:	3710      	adds	r7, #16
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000448:	b480      	push	{r7}
 800044a:	b087      	sub	sp, #28
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800045e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000460:	7cfb      	ldrb	r3, [r7, #19]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d003      	beq.n	800046e <HAL_CAN_ConfigFilter+0x26>
 8000466:	7cfb      	ldrb	r3, [r7, #19]
 8000468:	2b02      	cmp	r3, #2
 800046a:	f040 80aa 	bne.w	80005c2 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000474:	f043 0201 	orr.w	r2, r3, #1
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f003 031f 	and.w	r3, r3, #31
 8000486:	2201      	movs	r2, #1
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	43db      	mvns	r3, r3
 8000498:	401a      	ands	r2, r3
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	69db      	ldr	r3, [r3, #28]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d123      	bne.n	80004f0 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	43db      	mvns	r3, r3
 80004b2:	401a      	ands	r2, r3
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80004ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	3248      	adds	r2, #72	; 0x48
 80004d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80004d8:	683a      	ldr	r2, [r7, #0]
 80004da:	6892      	ldr	r2, [r2, #8]
 80004dc:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80004de:	683a      	ldr	r2, [r7, #0]
 80004e0:	6812      	ldr	r2, [r2, #0]
 80004e2:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80004e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80004e6:	6979      	ldr	r1, [r7, #20]
 80004e8:	3348      	adds	r3, #72	; 0x48
 80004ea:	00db      	lsls	r3, r3, #3
 80004ec:	440b      	add	r3, r1
 80004ee:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	69db      	ldr	r3, [r3, #28]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d122      	bne.n	800053e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	431a      	orrs	r2, r3
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000518:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	3248      	adds	r2, #72	; 0x48
 800051e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000526:	683a      	ldr	r2, [r7, #0]
 8000528:	6892      	ldr	r2, [r2, #8]
 800052a:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800052c:	683a      	ldr	r2, [r7, #0]
 800052e:	68d2      	ldr	r2, [r2, #12]
 8000530:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000532:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000534:	6979      	ldr	r1, [r7, #20]
 8000536:	3348      	adds	r3, #72	; 0x48
 8000538:	00db      	lsls	r3, r3, #3
 800053a:	440b      	add	r3, r1
 800053c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d109      	bne.n	800055a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	43db      	mvns	r3, r3
 8000550:	401a      	ands	r2, r3
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000558:	e007      	b.n	800056a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	431a      	orrs	r2, r3
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	691b      	ldr	r3, [r3, #16]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d109      	bne.n	8000586 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	43db      	mvns	r3, r3
 800057c:	401a      	ands	r2, r3
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000584:	e007      	b.n	8000596 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	431a      	orrs	r2, r3
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	6a1b      	ldr	r3, [r3, #32]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d107      	bne.n	80005ae <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	431a      	orrs	r2, r3
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005b4:	f023 0201 	bic.w	r2, r3, #1
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80005be:	2300      	movs	r3, #0
 80005c0:	e006      	b.n	80005d0 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
  }
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	371c      	adds	r7, #28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr

080005da <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b084      	sub	sp, #16
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d12e      	bne.n	800064c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2202      	movs	r2, #2
 80005f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	6812      	ldr	r2, [r2, #0]
 80005fe:	6812      	ldr	r2, [r2, #0]
 8000600:	f022 0201 	bic.w	r2, r2, #1
 8000604:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000606:	f7ff fdf9 	bl	80001fc <HAL_GetTick>
 800060a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800060c:	e012      	b.n	8000634 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800060e:	f7ff fdf5 	bl	80001fc <HAL_GetTick>
 8000612:	4602      	mov	r2, r0
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	2b0a      	cmp	r3, #10
 800061a:	d90b      	bls.n	8000634 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000620:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2205      	movs	r2, #5
 800062c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000630:	2301      	movs	r3, #1
 8000632:	e012      	b.n	800065a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1e5      	bne.n	800060e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2200      	movs	r2, #0
 8000646:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000648:	2300      	movs	r3, #0
 800064a:	e006      	b.n	800065a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000650:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000658:	2301      	movs	r3, #1
  }
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000662:	b480      	push	{r7}
 8000664:	b089      	sub	sp, #36	; 0x24
 8000666:	af00      	add	r7, sp, #0
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	607a      	str	r2, [r7, #4]
 800066e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000676:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000680:	7ffb      	ldrb	r3, [r7, #31]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d003      	beq.n	800068e <HAL_CAN_AddTxMessage+0x2c>
 8000686:	7ffb      	ldrb	r3, [r7, #31]
 8000688:	2b02      	cmp	r3, #2
 800068a:	f040 80b4 	bne.w	80007f6 <HAL_CAN_AddTxMessage+0x194>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000694:	2b00      	cmp	r3, #0
 8000696:	d10a      	bne.n	80006ae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d105      	bne.n	80006ae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80006a2:	69bb      	ldr	r3, [r7, #24]
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	f000 809c 	beq.w	80007e6 <HAL_CAN_AddTxMessage+0x184>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	0e1b      	lsrs	r3, r3, #24
 80006b2:	f003 0303 	and.w	r3, r3, #3
 80006b6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d907      	bls.n	80006ce <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
 80006cc:	e09a      	b.n	8000804 <HAL_CAN_AddTxMessage+0x1a2>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80006ce:	2201      	movs	r2, #1
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	409a      	lsls	r2, r3
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d10d      	bne.n	80006fc <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	6819      	ldr	r1, [r3, #0]
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80006ee:	431a      	orrs	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	3318      	adds	r3, #24
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	440b      	add	r3, r1
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	e00f      	b.n	800071c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6819      	ldr	r1, [r3, #0]
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800070a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	68db      	ldr	r3, [r3, #12]
                                                           pHeader->IDE |
 8000710:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	3318      	adds	r3, #24
 8000716:	011b      	lsls	r3, r3, #4
 8000718:	440b      	add	r3, r1
 800071a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	6819      	ldr	r1, [r3, #0]
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	691a      	ldr	r2, [r3, #16]
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	3318      	adds	r3, #24
 8000728:	011b      	lsls	r3, r3, #4
 800072a:	440b      	add	r3, r1
 800072c:	3304      	adds	r3, #4
 800072e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	7d1b      	ldrb	r3, [r3, #20]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d111      	bne.n	800075c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	6819      	ldr	r1, [r3, #0]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	3318      	adds	r3, #24
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	4413      	add	r3, r2
 8000748:	3304      	adds	r3, #4
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	3318      	adds	r3, #24
 8000754:	011b      	lsls	r3, r3, #4
 8000756:	440b      	add	r3, r1
 8000758:	3304      	adds	r3, #4
 800075a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	6819      	ldr	r1, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3307      	adds	r3, #7
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	061a      	lsls	r2, r3, #24
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3306      	adds	r3, #6
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	041b      	lsls	r3, r3, #16
 8000770:	431a      	orrs	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	3305      	adds	r3, #5
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	4313      	orrs	r3, r2
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	3204      	adds	r2, #4
 8000780:	7812      	ldrb	r2, [r2, #0]
 8000782:	431a      	orrs	r2, r3
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	011b      	lsls	r3, r3, #4
 8000788:	440b      	add	r3, r1
 800078a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800078e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	6819      	ldr	r1, [r3, #0]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3303      	adds	r3, #3
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	061a      	lsls	r2, r3, #24
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3302      	adds	r3, #2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	041b      	lsls	r3, r3, #16
 80007a4:	431a      	orrs	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	3301      	adds	r3, #1
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	4313      	orrs	r3, r2
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	7812      	ldrb	r2, [r2, #0]
 80007b4:	431a      	orrs	r2, r3
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	440b      	add	r3, r1
 80007bc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80007c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	6819      	ldr	r1, [r3, #0]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	3318      	adds	r3, #24
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	4413      	add	r3, r2
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f043 0201 	orr.w	r2, r3, #1
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	3318      	adds	r3, #24
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	440b      	add	r3, r1
 80007e0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e00e      	b.n	8000804 <HAL_CAN_AddTxMessage+0x1a2>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e006      	b.n	8000804 <HAL_CAN_AddTxMessage+0x1a2>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
  }
}
 8000804:	4618      	mov	r0, r3
 8000806:	3724      	adds	r7, #36	; 0x24
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr

0800080e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800080e:	b480      	push	{r7}
 8000810:	b087      	sub	sp, #28
 8000812:	af00      	add	r7, sp, #0
 8000814:	60f8      	str	r0, [r7, #12]
 8000816:	60b9      	str	r1, [r7, #8]
 8000818:	607a      	str	r2, [r7, #4]
 800081a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000822:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000824:	7dfb      	ldrb	r3, [r7, #23]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d003      	beq.n	8000832 <HAL_CAN_GetRxMessage+0x24>
 800082a:	7dfb      	ldrb	r3, [r7, #23]
 800082c:	2b02      	cmp	r3, #2
 800082e:	f040 80f4 	bne.w	8000a1a <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d10e      	bne.n	8000856 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	f003 0303 	and.w	r3, r3, #3
 8000842:	2b00      	cmp	r3, #0
 8000844:	d116      	bne.n	8000874 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	e0e8      	b.n	8000a28 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	f003 0303 	and.w	r3, r3, #3
 8000860:	2b00      	cmp	r3, #0
 8000862:	d107      	bne.n	8000874 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000868:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000870:	2301      	movs	r3, #1
 8000872:	e0d9      	b.n	8000a28 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	331b      	adds	r3, #27
 800087c:	011b      	lsls	r3, r3, #4
 800087e:	4413      	add	r3, r2
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f003 0204 	and.w	r2, r3, #4
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d10c      	bne.n	80008ac <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	331b      	adds	r3, #27
 800089a:	011b      	lsls	r3, r3, #4
 800089c:	4413      	add	r3, r2
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	0d5b      	lsrs	r3, r3, #21
 80008a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	e00b      	b.n	80008c4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	331b      	adds	r3, #27
 80008b4:	011b      	lsls	r3, r3, #4
 80008b6:	4413      	add	r3, r2
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	08db      	lsrs	r3, r3, #3
 80008bc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	331b      	adds	r3, #27
 80008cc:	011b      	lsls	r3, r3, #4
 80008ce:	4413      	add	r3, r2
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	085b      	lsrs	r3, r3, #1
 80008d4:	f003 0201 	and.w	r2, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	331b      	adds	r3, #27
 80008e4:	011b      	lsls	r3, r3, #4
 80008e6:	4413      	add	r3, r2
 80008e8:	3304      	adds	r3, #4
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f003 020f 	and.w	r2, r3, #15
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	331b      	adds	r3, #27
 80008fc:	011b      	lsls	r3, r3, #4
 80008fe:	4413      	add	r3, r2
 8000900:	3304      	adds	r3, #4
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	0a1b      	lsrs	r3, r3, #8
 8000906:	b2da      	uxtb	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	331b      	adds	r3, #27
 8000914:	011b      	lsls	r3, r3, #4
 8000916:	4413      	add	r3, r2
 8000918:	3304      	adds	r3, #4
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	0c1b      	lsrs	r3, r3, #16
 800091e:	b29a      	uxth	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	011b      	lsls	r3, r3, #4
 800092c:	4413      	add	r3, r2
 800092e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	b2da      	uxtb	r2, r3
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	3301      	adds	r3, #1
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	6811      	ldr	r1, [r2, #0]
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	0112      	lsls	r2, r2, #4
 8000946:	440a      	add	r2, r1
 8000948:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 800094c:	6812      	ldr	r2, [r2, #0]
 800094e:	0a12      	lsrs	r2, r2, #8
 8000950:	b2d2      	uxtb	r2, r2
 8000952:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	3302      	adds	r3, #2
 8000958:	68fa      	ldr	r2, [r7, #12]
 800095a:	6811      	ldr	r1, [r2, #0]
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	0112      	lsls	r2, r2, #4
 8000960:	440a      	add	r2, r1
 8000962:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8000966:	6812      	ldr	r2, [r2, #0]
 8000968:	0c12      	lsrs	r2, r2, #16
 800096a:	b2d2      	uxtb	r2, r2
 800096c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	3303      	adds	r3, #3
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	6811      	ldr	r1, [r2, #0]
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	0112      	lsls	r2, r2, #4
 800097a:	440a      	add	r2, r1
 800097c:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8000980:	6812      	ldr	r2, [r2, #0]
 8000982:	0e12      	lsrs	r2, r2, #24
 8000984:	b2d2      	uxtb	r2, r2
 8000986:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	3304      	adds	r3, #4
 800098c:	68fa      	ldr	r2, [r7, #12]
 800098e:	6811      	ldr	r1, [r2, #0]
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	0112      	lsls	r2, r2, #4
 8000994:	440a      	add	r2, r1
 8000996:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 800099a:	6812      	ldr	r2, [r2, #0]
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	3305      	adds	r3, #5
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	6811      	ldr	r1, [r2, #0]
 80009a8:	68ba      	ldr	r2, [r7, #8]
 80009aa:	0112      	lsls	r2, r2, #4
 80009ac:	440a      	add	r2, r1
 80009ae:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80009b2:	6812      	ldr	r2, [r2, #0]
 80009b4:	0a12      	lsrs	r2, r2, #8
 80009b6:	b2d2      	uxtb	r2, r2
 80009b8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	3306      	adds	r3, #6
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	6811      	ldr	r1, [r2, #0]
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	0112      	lsls	r2, r2, #4
 80009c6:	440a      	add	r2, r1
 80009c8:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80009cc:	6812      	ldr	r2, [r2, #0]
 80009ce:	0c12      	lsrs	r2, r2, #16
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	3307      	adds	r3, #7
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	6811      	ldr	r1, [r2, #0]
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	0112      	lsls	r2, r2, #4
 80009e0:	440a      	add	r2, r1
 80009e2:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80009e6:	6812      	ldr	r2, [r2, #0]
 80009e8:	0e12      	lsrs	r2, r2, #24
 80009ea:	b2d2      	uxtb	r2, r2
 80009ec:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d108      	bne.n	8000a06 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	6812      	ldr	r2, [r2, #0]
 80009fc:	68d2      	ldr	r2, [r2, #12]
 80009fe:	f042 0220 	orr.w	r2, r2, #32
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	e007      	b.n	8000a16 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	6812      	ldr	r2, [r2, #0]
 8000a0e:	6912      	ldr	r2, [r2, #16]
 8000a10:	f042 0220 	orr.w	r2, r2, #32
 8000a14:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e006      	b.n	8000a28 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
  }
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	371c      	adds	r7, #28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr

08000a32 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b085      	sub	sp, #20
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a42:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d002      	beq.n	8000a50 <HAL_CAN_ActivateNotification+0x1e>
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d109      	bne.n	8000a64 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	6812      	ldr	r2, [r2, #0]
 8000a58:	6951      	ldr	r1, [r2, #20]
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000a60:	2300      	movs	r3, #0
 8000a62:	e006      	b.n	8000a72 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
  }
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ab8:	6a3b      	ldr	r3, [r7, #32]
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d07c      	beq.n	8000bbc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d023      	beq.n	8000b14 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 f97d 	bl	8000dde <HAL_CAN_TxMailbox0CompleteCallback>
 8000ae4:	e016      	b.n	8000b14 <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d004      	beq.n	8000afa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
 8000af8:	e00c      	b.n	8000b14 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	f003 0308 	and.w	r3, r3, #8
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d004      	beq.n	8000b0e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b0c:	e002      	b.n	8000b14 <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f000 f980 	bl	8000e14 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d024      	beq.n	8000b68 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f000 f95c 	bl	8000df0 <HAL_CAN_TxMailbox1CompleteCallback>
 8000b38:	e016      	b.n	8000b68 <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d004      	beq.n	8000b4e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b4c:	e00c      	b.n	8000b68 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d004      	beq.n	8000b62 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b60:	e002      	b.n	8000b68 <HAL_CAN_IRQHandler+0xec>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 f95f 	bl	8000e26 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d024      	beq.n	8000bbc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b7a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d003      	beq.n	8000b8e <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 f93b 	bl	8000e02 <HAL_CAN_TxMailbox2CompleteCallback>
 8000b8c:	e016      	b.n	8000bbc <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d004      	beq.n	8000ba2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8000ba0:	e00c      	b.n	8000bbc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d004      	beq.n	8000bb6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb4:	e002      	b.n	8000bbc <HAL_CAN_IRQHandler+0x140>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f000 f93e 	bl	8000e38 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000bbc:	6a3b      	ldr	r3, [r7, #32]
 8000bbe:	f003 0308 	and.w	r3, r3, #8
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00c      	beq.n	8000be0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	f003 0310 	and.w	r3, r3, #16
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d007      	beq.n	8000be0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2210      	movs	r2, #16
 8000bde:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000be0:	6a3b      	ldr	r3, [r7, #32]
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d00b      	beq.n	8000c02 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	f003 0308 	and.w	r3, r3, #8
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d006      	beq.n	8000c02 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2208      	movs	r2, #8
 8000bfa:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f000 f924 	bl	8000e4a <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000c02:	6a3b      	ldr	r3, [r7, #32]
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d009      	beq.n	8000c20 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	f003 0303 	and.w	r3, r3, #3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f002 f854 	bl	8002cc8 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000c20:	6a3b      	ldr	r3, [r7, #32]
 8000c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d00c      	beq.n	8000c44 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	f003 0310 	and.w	r3, r3, #16
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d007      	beq.n	8000c44 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2210      	movs	r2, #16
 8000c42:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000c44:	6a3b      	ldr	r3, [r7, #32]
 8000c46:	f003 0320 	and.w	r3, r3, #32
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d00b      	beq.n	8000c66 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	f003 0308 	and.w	r3, r3, #8
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d006      	beq.n	8000c66 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2208      	movs	r2, #8
 8000c5e:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f000 f904 	bl	8000e6e <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000c66:	6a3b      	ldr	r3, [r7, #32]
 8000c68:	f003 0310 	and.w	r3, r3, #16
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d009      	beq.n	8000c84 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	f003 0303 	and.w	r3, r3, #3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d002      	beq.n	8000c84 <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f000 f8ec 	bl	8000e5c <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000c84:	6a3b      	ldr	r3, [r7, #32]
 8000c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d00b      	beq.n	8000ca6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	f003 0310 	and.w	r3, r3, #16
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d006      	beq.n	8000ca6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2210      	movs	r2, #16
 8000c9e:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f000 f8ed 	bl	8000e80 <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000ca6:	6a3b      	ldr	r3, [r7, #32]
 8000ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d00b      	beq.n	8000cc8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d006      	beq.n	8000cc8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2208      	movs	r2, #8
 8000cc0:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 f8e5 	bl	8000e92 <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000cc8:	6a3b      	ldr	r3, [r7, #32]
 8000cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d075      	beq.n	8000dbe <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d06c      	beq.n	8000db6 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000cdc:	6a3b      	ldr	r3, [r7, #32]
 8000cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d008      	beq.n	8000cf8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000cf8:	6a3b      	ldr	r3, [r7, #32]
 8000cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d008      	beq.n	8000d14 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d003      	beq.n	8000d14 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	f043 0302 	orr.w	r3, r3, #2
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d14:	6a3b      	ldr	r3, [r7, #32]
 8000d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d008      	beq.n	8000d30 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d003      	beq.n	8000d30 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d30:	6a3b      	ldr	r3, [r7, #32]
 8000d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d03d      	beq.n	8000db6 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d038      	beq.n	8000db6 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000d4a:	2b30      	cmp	r3, #48	; 0x30
 8000d4c:	d017      	beq.n	8000d7e <HAL_CAN_IRQHandler+0x302>
 8000d4e:	2b30      	cmp	r3, #48	; 0x30
 8000d50:	d804      	bhi.n	8000d5c <HAL_CAN_IRQHandler+0x2e0>
 8000d52:	2b10      	cmp	r3, #16
 8000d54:	d009      	beq.n	8000d6a <HAL_CAN_IRQHandler+0x2ee>
 8000d56:	2b20      	cmp	r3, #32
 8000d58:	d00c      	beq.n	8000d74 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000d5a:	e024      	b.n	8000da6 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000d5c:	2b50      	cmp	r3, #80	; 0x50
 8000d5e:	d018      	beq.n	8000d92 <HAL_CAN_IRQHandler+0x316>
 8000d60:	2b60      	cmp	r3, #96	; 0x60
 8000d62:	d01b      	beq.n	8000d9c <HAL_CAN_IRQHandler+0x320>
 8000d64:	2b40      	cmp	r3, #64	; 0x40
 8000d66:	d00f      	beq.n	8000d88 <HAL_CAN_IRQHandler+0x30c>
            break;
 8000d68:	e01d      	b.n	8000da6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d72:	e018      	b.n	8000da6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d76:	f043 0310 	orr.w	r3, r3, #16
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d7c:	e013      	b.n	8000da6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	f043 0320 	orr.w	r3, r3, #32
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d86:	e00e      	b.n	8000da6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d90:	e009      	b.n	8000da6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000d9a:	e004      	b.n	8000da6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000da4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	6812      	ldr	r2, [r2, #0]
 8000dae:	6992      	ldr	r2, [r2, #24]
 8000db0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000db4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2204      	movs	r2, #4
 8000dbc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d008      	beq.n	8000dd6 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f000 f867 	bl	8000ea4 <HAL_CAN_ErrorCallback>
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr

08000e02 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr

08000e26 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr

08000e4a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr

08000e6e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
	...

08000eb8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <NVIC_SetPriorityGrouping+0x44>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eea:	4a04      	ldr	r2, [pc, #16]	; (8000efc <NVIC_SetPriorityGrouping+0x44>)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	60d3      	str	r3, [r2, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <NVIC_GetPriorityGrouping+0x18>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f003 0307 	and.w	r3, r3, #7
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f26:	4908      	ldr	r1, [pc, #32]	; (8000f48 <NVIC_EnableIRQ+0x2c>)
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	095b      	lsrs	r3, r3, #5
 8000f2e:	79fa      	ldrb	r2, [r7, #7]
 8000f30:	f002 021f 	and.w	r2, r2, #31
 8000f34:	2001      	movs	r0, #1
 8000f36:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	da0b      	bge.n	8000f78 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	490d      	ldr	r1, [pc, #52]	; (8000f98 <NVIC_SetPriority+0x4c>)
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 030f 	and.w	r3, r3, #15
 8000f68:	3b04      	subs	r3, #4
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f76:	e009      	b.n	8000f8c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	4908      	ldr	r1, [pc, #32]	; (8000f9c <NVIC_SetPriority+0x50>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	1e5a      	subs	r2, r3, #1
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	401a      	ands	r2, r3
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	1e59      	subs	r1, r3, #1
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001010:	d301      	bcc.n	8001016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001012:	2301      	movs	r3, #1
 8001014:	e00f      	b.n	8001036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <SysTick_Config+0x40>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101e:	210f      	movs	r1, #15
 8001020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001024:	f7ff ff92 	bl	8000f4c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <SysTick_Config+0x40>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <SysTick_Config+0x40>)
 8001030:	2207      	movs	r2, #7
 8001032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	e000e010 	.word	0xe000e010

08001044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ff33 	bl	8000eb8 <NVIC_SetPriorityGrouping>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800106c:	f7ff ff48 	bl	8000f00 <NVIC_GetPriorityGrouping>
 8001070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f7ff ff92 	bl	8000fa0 <NVIC_EncodePriority>
 800107c:	4602      	mov	r2, r0
 800107e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff61 	bl	8000f4c <NVIC_SetPriority>
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff3b 	bl	8000f1c <NVIC_EnableIRQ>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ffa2 	bl	8001000 <SysTick_Config>
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b08b      	sub	sp, #44	; 0x2c
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
 80010ea:	e127      	b.n	800133c <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80010ec:	2201      	movs	r2, #1
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 8116 	bne.w	8001336 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b12      	cmp	r3, #18
 8001110:	d034      	beq.n	800117c <HAL_GPIO_Init+0xb4>
 8001112:	2b12      	cmp	r3, #18
 8001114:	d80d      	bhi.n	8001132 <HAL_GPIO_Init+0x6a>
 8001116:	2b02      	cmp	r3, #2
 8001118:	d02b      	beq.n	8001172 <HAL_GPIO_Init+0xaa>
 800111a:	2b02      	cmp	r3, #2
 800111c:	d804      	bhi.n	8001128 <HAL_GPIO_Init+0x60>
 800111e:	2b00      	cmp	r3, #0
 8001120:	d031      	beq.n	8001186 <HAL_GPIO_Init+0xbe>
 8001122:	2b01      	cmp	r3, #1
 8001124:	d01c      	beq.n	8001160 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001126:	e048      	b.n	80011ba <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001128:	2b03      	cmp	r3, #3
 800112a:	d043      	beq.n	80011b4 <HAL_GPIO_Init+0xec>
 800112c:	2b11      	cmp	r3, #17
 800112e:	d01b      	beq.n	8001168 <HAL_GPIO_Init+0xa0>
          break;
 8001130:	e043      	b.n	80011ba <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001132:	4a87      	ldr	r2, [pc, #540]	; (8001350 <HAL_GPIO_Init+0x288>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d026      	beq.n	8001186 <HAL_GPIO_Init+0xbe>
 8001138:	4a85      	ldr	r2, [pc, #532]	; (8001350 <HAL_GPIO_Init+0x288>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d806      	bhi.n	800114c <HAL_GPIO_Init+0x84>
 800113e:	4a85      	ldr	r2, [pc, #532]	; (8001354 <HAL_GPIO_Init+0x28c>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d020      	beq.n	8001186 <HAL_GPIO_Init+0xbe>
 8001144:	4a84      	ldr	r2, [pc, #528]	; (8001358 <HAL_GPIO_Init+0x290>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d01d      	beq.n	8001186 <HAL_GPIO_Init+0xbe>
          break;
 800114a:	e036      	b.n	80011ba <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800114c:	4a83      	ldr	r2, [pc, #524]	; (800135c <HAL_GPIO_Init+0x294>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d019      	beq.n	8001186 <HAL_GPIO_Init+0xbe>
 8001152:	4a83      	ldr	r2, [pc, #524]	; (8001360 <HAL_GPIO_Init+0x298>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d016      	beq.n	8001186 <HAL_GPIO_Init+0xbe>
 8001158:	4a82      	ldr	r2, [pc, #520]	; (8001364 <HAL_GPIO_Init+0x29c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d013      	beq.n	8001186 <HAL_GPIO_Init+0xbe>
          break;
 800115e:	e02c      	b.n	80011ba <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	623b      	str	r3, [r7, #32]
          break;
 8001166:	e028      	b.n	80011ba <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	3304      	adds	r3, #4
 800116e:	623b      	str	r3, [r7, #32]
          break;
 8001170:	e023      	b.n	80011ba <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	3308      	adds	r3, #8
 8001178:	623b      	str	r3, [r7, #32]
          break;
 800117a:	e01e      	b.n	80011ba <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	330c      	adds	r3, #12
 8001182:	623b      	str	r3, [r7, #32]
          break;
 8001184:	e019      	b.n	80011ba <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d102      	bne.n	8001194 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800118e:	2304      	movs	r3, #4
 8001190:	623b      	str	r3, [r7, #32]
          break;
 8001192:	e012      	b.n	80011ba <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d105      	bne.n	80011a8 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800119c:	2308      	movs	r3, #8
 800119e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69fa      	ldr	r2, [r7, #28]
 80011a4:	611a      	str	r2, [r3, #16]
          break;
 80011a6:	e008      	b.n	80011ba <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011a8:	2308      	movs	r3, #8
 80011aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69fa      	ldr	r2, [r7, #28]
 80011b0:	615a      	str	r2, [r3, #20]
          break;
 80011b2:	e002      	b.n	80011ba <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
          break;
 80011b8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	2bff      	cmp	r3, #255	; 0xff
 80011be:	d801      	bhi.n	80011c4 <HAL_GPIO_Init+0xfc>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	e001      	b.n	80011c8 <HAL_GPIO_Init+0x100>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3304      	adds	r3, #4
 80011c8:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	2bff      	cmp	r3, #255	; 0xff
 80011ce:	d802      	bhi.n	80011d6 <HAL_GPIO_Init+0x10e>
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	e002      	b.n	80011dc <HAL_GPIO_Init+0x114>
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	3b08      	subs	r3, #8
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	210f      	movs	r1, #15
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	401a      	ands	r2, r3
 80011ee:	6a39      	ldr	r1, [r7, #32]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	431a      	orrs	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 8096 	beq.w	8001336 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800120a:	4a57      	ldr	r2, [pc, #348]	; (8001368 <HAL_GPIO_Init+0x2a0>)
 800120c:	4b56      	ldr	r3, [pc, #344]	; (8001368 <HAL_GPIO_Init+0x2a0>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6193      	str	r3, [r2, #24]
 8001216:	4b54      	ldr	r3, [pc, #336]	; (8001368 <HAL_GPIO_Init+0x2a0>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8001222:	4a52      	ldr	r2, [pc, #328]	; (800136c <HAL_GPIO_Init+0x2a4>)
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3302      	adds	r3, #2
 800122a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122e:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	220f      	movs	r2, #15
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	4013      	ands	r3, r2
 8001244:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a49      	ldr	r2, [pc, #292]	; (8001370 <HAL_GPIO_Init+0x2a8>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d013      	beq.n	8001276 <HAL_GPIO_Init+0x1ae>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a48      	ldr	r2, [pc, #288]	; (8001374 <HAL_GPIO_Init+0x2ac>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d00d      	beq.n	8001272 <HAL_GPIO_Init+0x1aa>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a47      	ldr	r2, [pc, #284]	; (8001378 <HAL_GPIO_Init+0x2b0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d007      	beq.n	800126e <HAL_GPIO_Init+0x1a6>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a46      	ldr	r2, [pc, #280]	; (800137c <HAL_GPIO_Init+0x2b4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d101      	bne.n	800126a <HAL_GPIO_Init+0x1a2>
 8001266:	2303      	movs	r3, #3
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x1b0>
 800126a:	2304      	movs	r3, #4
 800126c:	e004      	b.n	8001278 <HAL_GPIO_Init+0x1b0>
 800126e:	2302      	movs	r3, #2
 8001270:	e002      	b.n	8001278 <HAL_GPIO_Init+0x1b0>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x1b0>
 8001276:	2300      	movs	r3, #0
 8001278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800127a:	f002 0203 	and.w	r2, r2, #3
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	4093      	lsls	r3, r2
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4313      	orrs	r3, r2
 8001286:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001288:	4938      	ldr	r1, [pc, #224]	; (800136c <HAL_GPIO_Init+0x2a4>)
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3302      	adds	r3, #2
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d006      	beq.n	80012b0 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012a2:	4937      	ldr	r1, [pc, #220]	; (8001380 <HAL_GPIO_Init+0x2b8>)
 80012a4:	4b36      	ldr	r3, [pc, #216]	; (8001380 <HAL_GPIO_Init+0x2b8>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]
 80012ae:	e006      	b.n	80012be <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012b0:	4933      	ldr	r1, [pc, #204]	; (8001380 <HAL_GPIO_Init+0x2b8>)
 80012b2:	4b33      	ldr	r3, [pc, #204]	; (8001380 <HAL_GPIO_Init+0x2b8>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	4013      	ands	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d006      	beq.n	80012d8 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012ca:	492d      	ldr	r1, [pc, #180]	; (8001380 <HAL_GPIO_Init+0x2b8>)
 80012cc:	4b2c      	ldr	r3, [pc, #176]	; (8001380 <HAL_GPIO_Init+0x2b8>)
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	604b      	str	r3, [r1, #4]
 80012d6:	e006      	b.n	80012e6 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012d8:	4929      	ldr	r1, [pc, #164]	; (8001380 <HAL_GPIO_Init+0x2b8>)
 80012da:	4b29      	ldr	r3, [pc, #164]	; (8001380 <HAL_GPIO_Init+0x2b8>)
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	4013      	ands	r3, r2
 80012e4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d006      	beq.n	8001300 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012f2:	4923      	ldr	r1, [pc, #140]	; (8001380 <HAL_GPIO_Init+0x2b8>)
 80012f4:	4b22      	ldr	r3, [pc, #136]	; (8001380 <HAL_GPIO_Init+0x2b8>)
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	608b      	str	r3, [r1, #8]
 80012fe:	e006      	b.n	800130e <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001300:	491f      	ldr	r1, [pc, #124]	; (8001380 <HAL_GPIO_Init+0x2b8>)
 8001302:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <HAL_GPIO_Init+0x2b8>)
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	43db      	mvns	r3, r3
 800130a:	4013      	ands	r3, r2
 800130c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d006      	beq.n	8001328 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800131a:	4919      	ldr	r1, [pc, #100]	; (8001380 <HAL_GPIO_Init+0x2b8>)
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <HAL_GPIO_Init+0x2b8>)
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	60cb      	str	r3, [r1, #12]
 8001326:	e006      	b.n	8001336 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001328:	4915      	ldr	r1, [pc, #84]	; (8001380 <HAL_GPIO_Init+0x2b8>)
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_GPIO_Init+0x2b8>)
 800132c:	68da      	ldr	r2, [r3, #12]
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	43db      	mvns	r3, r3
 8001332:	4013      	ands	r3, r2
 8001334:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	3301      	adds	r3, #1
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	2b0f      	cmp	r3, #15
 8001340:	f67f aed4 	bls.w	80010ec <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001344:	bf00      	nop
 8001346:	372c      	adds	r7, #44	; 0x2c
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	10210000 	.word	0x10210000
 8001354:	10110000 	.word	0x10110000
 8001358:	10120000 	.word	0x10120000
 800135c:	10310000 	.word	0x10310000
 8001360:	10320000 	.word	0x10320000
 8001364:	10220000 	.word	0x10220000
 8001368:	40021000 	.word	0x40021000
 800136c:	40010000 	.word	0x40010000
 8001370:	40010800 	.word	0x40010800
 8001374:	40010c00 	.word	0x40010c00
 8001378:	40011000 	.word	0x40011000
 800137c:	40011400 	.word	0x40011400
 8001380:	40010400 	.word	0x40010400

08001384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
 8001390:	4613      	mov	r3, r2
 8001392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001394:	787b      	ldrb	r3, [r7, #1]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a0:	e003      	b.n	80013aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	041a      	lsls	r2, r3, #16
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	611a      	str	r2, [r3, #16]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013c0:	695a      	ldr	r2, [r3, #20]
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d006      	beq.n	80013d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ca:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013d0:	88fb      	ldrh	r3, [r7, #6]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f001 fc54 	bl	8002c80 <HAL_GPIO_EXTI_Callback>
  }
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40010400 	.word	0x40010400

080013e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 8087 	beq.w	800150c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013fe:	4b92      	ldr	r3, [pc, #584]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b04      	cmp	r3, #4
 8001408:	d00c      	beq.n	8001424 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800140a:	4b8f      	ldr	r3, [pc, #572]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b08      	cmp	r3, #8
 8001414:	d112      	bne.n	800143c <HAL_RCC_OscConfig+0x58>
 8001416:	4b8c      	ldr	r3, [pc, #560]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001422:	d10b      	bne.n	800143c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	4b88      	ldr	r3, [pc, #544]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d06c      	beq.n	800150a <HAL_RCC_OscConfig+0x126>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d168      	bne.n	800150a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e22d      	b.n	8001898 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001444:	d106      	bne.n	8001454 <HAL_RCC_OscConfig+0x70>
 8001446:	4a80      	ldr	r2, [pc, #512]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 8001448:	4b7f      	ldr	r3, [pc, #508]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e02e      	b.n	80014b2 <HAL_RCC_OscConfig+0xce>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10c      	bne.n	8001476 <HAL_RCC_OscConfig+0x92>
 800145c:	4a7a      	ldr	r2, [pc, #488]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 800145e:	4b7a      	ldr	r3, [pc, #488]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	4a77      	ldr	r2, [pc, #476]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 800146a:	4b77      	ldr	r3, [pc, #476]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e01d      	b.n	80014b2 <HAL_RCC_OscConfig+0xce>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800147e:	d10c      	bne.n	800149a <HAL_RCC_OscConfig+0xb6>
 8001480:	4a71      	ldr	r2, [pc, #452]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 8001482:	4b71      	ldr	r3, [pc, #452]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4a6e      	ldr	r2, [pc, #440]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 800148e:	4b6e      	ldr	r3, [pc, #440]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	e00b      	b.n	80014b2 <HAL_RCC_OscConfig+0xce>
 800149a:	4a6b      	ldr	r2, [pc, #428]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 800149c:	4b6a      	ldr	r3, [pc, #424]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4a68      	ldr	r2, [pc, #416]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 80014a8:	4b67      	ldr	r3, [pc, #412]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b0:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d013      	beq.n	80014e2 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7fe fe9f 	bl	80001fc <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c2:	f7fe fe9b 	bl	80001fc <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b64      	cmp	r3, #100	; 0x64
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e1e1      	b.n	8001898 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d4:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0xde>
 80014e0:	e014      	b.n	800150c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e2:	f7fe fe8b 	bl	80001fc <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ea:	f7fe fe87 	bl	80001fc <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b64      	cmp	r3, #100	; 0x64
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e1cd      	b.n	8001898 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fc:	4b52      	ldr	r3, [pc, #328]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f0      	bne.n	80014ea <HAL_RCC_OscConfig+0x106>
 8001508:	e000      	b.n	800150c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d063      	beq.n	80015e0 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001518:	4b4b      	ldr	r3, [pc, #300]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 030c 	and.w	r3, r3, #12
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00b      	beq.n	800153c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001524:	4b48      	ldr	r3, [pc, #288]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 030c 	and.w	r3, r3, #12
 800152c:	2b08      	cmp	r3, #8
 800152e:	d11c      	bne.n	800156a <HAL_RCC_OscConfig+0x186>
 8001530:	4b45      	ldr	r3, [pc, #276]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d116      	bne.n	800156a <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153c:	4b42      	ldr	r3, [pc, #264]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_RCC_OscConfig+0x170>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d001      	beq.n	8001554 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e1a1      	b.n	8001898 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001554:	493c      	ldr	r1, [pc, #240]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 8001556:	4b3c      	ldr	r3, [pc, #240]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4313      	orrs	r3, r2
 8001566:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001568:	e03a      	b.n	80015e0 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d020      	beq.n	80015b4 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001572:	4b36      	ldr	r3, [pc, #216]	; (800164c <HAL_RCC_OscConfig+0x268>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7fe fe40 	bl	80001fc <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001580:	f7fe fe3c 	bl	80001fc <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e182      	b.n	8001898 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001592:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159e:	492a      	ldr	r1, [pc, #168]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 80015a0:	4b29      	ldr	r3, [pc, #164]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
 80015b2:	e015      	b.n	80015e0 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b4:	4b25      	ldr	r3, [pc, #148]	; (800164c <HAL_RCC_OscConfig+0x268>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7fe fe1f 	bl	80001fc <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c2:	f7fe fe1b 	bl	80001fc <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e161      	b.n	8001898 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d4:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f0      	bne.n	80015c2 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d039      	beq.n	8001660 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d019      	beq.n	8001628 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fa:	f7fe fdff 	bl	80001fc <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001602:	f7fe fdfb 	bl	80001fc <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e141      	b.n	8001898 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_RCC_OscConfig+0x264>)
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001620:	2001      	movs	r0, #1
 8001622:	f000 fab1 	bl	8001b88 <RCC_Delay>
 8001626:	e01b      	b.n	8001660 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_RCC_OscConfig+0x26c>)
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162e:	f7fe fde5 	bl	80001fc <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001634:	e00e      	b.n	8001654 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001636:	f7fe fde1 	bl	80001fc <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d907      	bls.n	8001654 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e127      	b.n	8001898 <HAL_RCC_OscConfig+0x4b4>
 8001648:	40021000 	.word	0x40021000
 800164c:	42420000 	.word	0x42420000
 8001650:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001654:	4b92      	ldr	r3, [pc, #584]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1ea      	bne.n	8001636 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80a6 	beq.w	80017ba <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001672:	4b8b      	ldr	r3, [pc, #556]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10d      	bne.n	800169a <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4a88      	ldr	r2, [pc, #544]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 8001680:	4b87      	ldr	r3, [pc, #540]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b85      	ldr	r3, [pc, #532]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001696:	2301      	movs	r3, #1
 8001698:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169a:	4b82      	ldr	r3, [pc, #520]	; (80018a4 <HAL_RCC_OscConfig+0x4c0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d118      	bne.n	80016d8 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a6:	4a7f      	ldr	r2, [pc, #508]	; (80018a4 <HAL_RCC_OscConfig+0x4c0>)
 80016a8:	4b7e      	ldr	r3, [pc, #504]	; (80018a4 <HAL_RCC_OscConfig+0x4c0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b2:	f7fe fda3 	bl	80001fc <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ba:	f7fe fd9f 	bl	80001fc <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b64      	cmp	r3, #100	; 0x64
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e0e5      	b.n	8001898 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016cc:	4b75      	ldr	r3, [pc, #468]	; (80018a4 <HAL_RCC_OscConfig+0x4c0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d106      	bne.n	80016ee <HAL_RCC_OscConfig+0x30a>
 80016e0:	4a6f      	ldr	r2, [pc, #444]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 80016e2:	4b6f      	ldr	r3, [pc, #444]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6213      	str	r3, [r2, #32]
 80016ec:	e02d      	b.n	800174a <HAL_RCC_OscConfig+0x366>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0x32c>
 80016f6:	4a6a      	ldr	r2, [pc, #424]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 80016f8:	4b69      	ldr	r3, [pc, #420]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	f023 0301 	bic.w	r3, r3, #1
 8001700:	6213      	str	r3, [r2, #32]
 8001702:	4a67      	ldr	r2, [pc, #412]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 8001704:	4b66      	ldr	r3, [pc, #408]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	f023 0304 	bic.w	r3, r3, #4
 800170c:	6213      	str	r3, [r2, #32]
 800170e:	e01c      	b.n	800174a <HAL_RCC_OscConfig+0x366>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2b05      	cmp	r3, #5
 8001716:	d10c      	bne.n	8001732 <HAL_RCC_OscConfig+0x34e>
 8001718:	4a61      	ldr	r2, [pc, #388]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 800171a:	4b61      	ldr	r3, [pc, #388]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6213      	str	r3, [r2, #32]
 8001724:	4a5e      	ldr	r2, [pc, #376]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 8001726:	4b5e      	ldr	r3, [pc, #376]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6213      	str	r3, [r2, #32]
 8001730:	e00b      	b.n	800174a <HAL_RCC_OscConfig+0x366>
 8001732:	4a5b      	ldr	r2, [pc, #364]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 8001734:	4b5a      	ldr	r3, [pc, #360]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	f023 0301 	bic.w	r3, r3, #1
 800173c:	6213      	str	r3, [r2, #32]
 800173e:	4a58      	ldr	r2, [pc, #352]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 8001740:	4b57      	ldr	r3, [pc, #348]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	f023 0304 	bic.w	r3, r3, #4
 8001748:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d015      	beq.n	800177e <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001752:	f7fe fd53 	bl	80001fc <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001758:	e00a      	b.n	8001770 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7fe fd4f 	bl	80001fc <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e093      	b.n	8001898 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001770:	4b4b      	ldr	r3, [pc, #300]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0ee      	beq.n	800175a <HAL_RCC_OscConfig+0x376>
 800177c:	e014      	b.n	80017a8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177e:	f7fe fd3d 	bl	80001fc <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001784:	e00a      	b.n	800179c <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001786:	f7fe fd39 	bl	80001fc <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	f241 3288 	movw	r2, #5000	; 0x1388
 8001794:	4293      	cmp	r3, r2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e07d      	b.n	8001898 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179c:	4b40      	ldr	r3, [pc, #256]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1ee      	bne.n	8001786 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017a8:	7dfb      	ldrb	r3, [r7, #23]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d105      	bne.n	80017ba <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ae:	4a3c      	ldr	r2, [pc, #240]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 80017b0:	4b3b      	ldr	r3, [pc, #236]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d069      	beq.n	8001896 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c2:	4b37      	ldr	r3, [pc, #220]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d061      	beq.n	8001892 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d146      	bne.n	8001864 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d6:	4b34      	ldr	r3, [pc, #208]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7fe fd0e 	bl	80001fc <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e4:	f7fe fd0a 	bl	80001fc <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e050      	b.n	8001898 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f6:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800180a:	d108      	bne.n	800181e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800180c:	4924      	ldr	r1, [pc, #144]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 800180e:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	4313      	orrs	r3, r2
 800181c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800181e:	4820      	ldr	r0, [pc, #128]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a19      	ldr	r1, [r3, #32]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	430b      	orrs	r3, r1
 8001832:	4313      	orrs	r3, r2
 8001834:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001836:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	2201      	movs	r2, #1
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7fe fcde 	bl	80001fc <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001844:	f7fe fcda 	bl	80001fc <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e020      	b.n	8001898 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x460>
 8001862:	e018      	b.n	8001896 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_RCC_OscConfig+0x4c4>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7fe fcc7 	bl	80001fc <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001872:	f7fe fcc3 	bl	80001fc <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e009      	b.n	8001898 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x48e>
 8001890:	e001      	b.n	8001896 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40007000 	.word	0x40007000
 80018a8:	42420060 	.word	0x42420060

080018ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80018ba:	4b7e      	ldr	r3, [pc, #504]	; (8001ab4 <HAL_RCC_ClockConfig+0x208>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0207 	and.w	r2, r3, #7
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d210      	bcs.n	80018ea <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c8:	497a      	ldr	r1, [pc, #488]	; (8001ab4 <HAL_RCC_ClockConfig+0x208>)
 80018ca:	4b7a      	ldr	r3, [pc, #488]	; (8001ab4 <HAL_RCC_ClockConfig+0x208>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f023 0207 	bic.w	r2, r3, #7
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018d8:	4b76      	ldr	r3, [pc, #472]	; (8001ab4 <HAL_RCC_ClockConfig+0x208>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0207 	and.w	r2, r3, #7
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e0e0      	b.n	8001aac <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d020      	beq.n	8001938 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d005      	beq.n	800190e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001902:	4a6d      	ldr	r2, [pc, #436]	; (8001ab8 <HAL_RCC_ClockConfig+0x20c>)
 8001904:	4b6c      	ldr	r3, [pc, #432]	; (8001ab8 <HAL_RCC_ClockConfig+0x20c>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800190c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800191a:	4a67      	ldr	r2, [pc, #412]	; (8001ab8 <HAL_RCC_ClockConfig+0x20c>)
 800191c:	4b66      	ldr	r3, [pc, #408]	; (8001ab8 <HAL_RCC_ClockConfig+0x20c>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001924:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001926:	4964      	ldr	r1, [pc, #400]	; (8001ab8 <HAL_RCC_ClockConfig+0x20c>)
 8001928:	4b63      	ldr	r3, [pc, #396]	; (8001ab8 <HAL_RCC_ClockConfig+0x20c>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d06a      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d107      	bne.n	800195c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194c:	4b5a      	ldr	r3, [pc, #360]	; (8001ab8 <HAL_RCC_ClockConfig+0x20c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d115      	bne.n	8001984 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0a7      	b.n	8001aac <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d107      	bne.n	8001974 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001964:	4b54      	ldr	r3, [pc, #336]	; (8001ab8 <HAL_RCC_ClockConfig+0x20c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d109      	bne.n	8001984 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e09b      	b.n	8001aac <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001974:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <HAL_RCC_ClockConfig+0x20c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e093      	b.n	8001aac <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001984:	494c      	ldr	r1, [pc, #304]	; (8001ab8 <HAL_RCC_ClockConfig+0x20c>)
 8001986:	4b4c      	ldr	r3, [pc, #304]	; (8001ab8 <HAL_RCC_ClockConfig+0x20c>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f023 0203 	bic.w	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4313      	orrs	r3, r2
 8001994:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001996:	f7fe fc31 	bl	80001fc <HAL_GetTick>
 800199a:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d112      	bne.n	80019ca <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a4:	e00a      	b.n	80019bc <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a6:	f7fe fc29 	bl	80001fc <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e077      	b.n	8001aac <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019bc:	4b3e      	ldr	r3, [pc, #248]	; (8001ab8 <HAL_RCC_ClockConfig+0x20c>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d1ee      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xfa>
 80019c8:	e027      	b.n	8001a1a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d11d      	bne.n	8001a0e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019d2:	e00a      	b.n	80019ea <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d4:	f7fe fc12 	bl	80001fc <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e060      	b.n	8001aac <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ea:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <HAL_RCC_ClockConfig+0x20c>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d1ee      	bne.n	80019d4 <HAL_RCC_ClockConfig+0x128>
 80019f6:	e010      	b.n	8001a1a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f8:	f7fe fc00 	bl	80001fc <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e04e      	b.n	8001aac <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <HAL_RCC_ClockConfig+0x20c>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1ee      	bne.n	80019f8 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a1a:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <HAL_RCC_ClockConfig+0x208>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0207 	and.w	r2, r3, #7
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d910      	bls.n	8001a4a <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a28:	4922      	ldr	r1, [pc, #136]	; (8001ab4 <HAL_RCC_ClockConfig+0x208>)
 8001a2a:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <HAL_RCC_ClockConfig+0x208>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 0207 	bic.w	r2, r3, #7
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a38:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <HAL_RCC_ClockConfig+0x208>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0207 	and.w	r2, r3, #7
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d001      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e030      	b.n	8001aac <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d008      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a56:	4918      	ldr	r1, [pc, #96]	; (8001ab8 <HAL_RCC_ClockConfig+0x20c>)
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <HAL_RCC_ClockConfig+0x20c>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d009      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a74:	4910      	ldr	r1, [pc, #64]	; (8001ab8 <HAL_RCC_ClockConfig+0x20c>)
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <HAL_RCC_ClockConfig+0x20c>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a88:	f000 f81c 	bl	8001ac4 <HAL_RCC_GetSysClockFreq>
 8001a8c:	4601      	mov	r1, r0
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <HAL_RCC_ClockConfig+0x20c>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	091b      	lsrs	r3, r3, #4
 8001a94:	f003 030f 	and.w	r3, r3, #15
 8001a98:	4a08      	ldr	r2, [pc, #32]	; (8001abc <HAL_RCC_ClockConfig+0x210>)
 8001a9a:	5cd3      	ldrb	r3, [r2, r3]
 8001a9c:	fa21 f303 	lsr.w	r3, r1, r3
 8001aa0:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <HAL_RCC_ClockConfig+0x214>)
 8001aa2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f7fe fb67 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40022000 	.word	0x40022000
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	080030f4 	.word	0x080030f4
 8001ac0:	20000008 	.word	0x20000008

08001ac4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac4:	b490      	push	{r4, r7}
 8001ac6:	b08a      	sub	sp, #40	; 0x28
 8001ac8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001acc:	1d3c      	adds	r4, r7, #4
 8001ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ad4:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aee:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d002      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0x40>
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d003      	beq.n	8001b0a <HAL_RCC_GetSysClockFreq+0x46>
 8001b02:	e02d      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b04:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b06:	623b      	str	r3, [r7, #32]
      break;
 8001b08:	e02d      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	0c9b      	lsrs	r3, r3, #18
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b16:	4413      	add	r3, r2
 8001b18:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b1c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d013      	beq.n	8001b50 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	0c5b      	lsrs	r3, r3, #17
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b36:	4413      	add	r3, r2
 8001b38:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b3c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b42:	fb02 f203 	mul.w	r2, r2, r3
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4e:	e004      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	4a0c      	ldr	r2, [pc, #48]	; (8001b84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b54:	fb02 f303 	mul.w	r3, r2, r3
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	623b      	str	r3, [r7, #32]
      break;
 8001b5e:	e002      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b62:	623b      	str	r3, [r7, #32]
      break;
 8001b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b66:	6a3b      	ldr	r3, [r7, #32]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3728      	adds	r7, #40	; 0x28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc90      	pop	{r4, r7}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	080030e0 	.word	0x080030e0
 8001b78:	080030f0 	.word	0x080030f0
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	007a1200 	.word	0x007a1200
 8001b84:	003d0900 	.word	0x003d0900

08001b88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <RCC_Delay+0x34>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <RCC_Delay+0x38>)
 8001b96:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9a:	0a5b      	lsrs	r3, r3, #9
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ba2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001ba4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1e5a      	subs	r2, r3, #1
 8001baa:	60fa      	str	r2, [r7, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f9      	bne.n	8001ba4 <RCC_Delay+0x1c>
}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000008 	.word	0x20000008
 8001bc0:	10624dd3 	.word	0x10624dd3

08001bc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	f042 0201 	orr.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e01d      	b.n	8001c46 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d106      	bne.n	8001c24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f001 f8fc 	bl	8002e1c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3304      	adds	r3, #4
 8001c34:	4619      	mov	r1, r3
 8001c36:	4610      	mov	r0, r2
 8001c38:	f000 fa2e 	bl	8002098 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	6839      	ldr	r1, [r7, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 fc1e 	bl	80024a4 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <HAL_TIM_PWM_Start+0x4c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d107      	bne.n	8001c82 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	f042 0201 	orr.w	r2, r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40012c00 	.word	0x40012c00

08001ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d122      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d11b      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0202 	mvn.w	r2, #2
 8001ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f9bc 	bl	8002060 <HAL_TIM_IC_CaptureCallback>
 8001ce8:	e005      	b.n	8001cf6 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f9af 	bl	800204e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f9be 	bl	8002072 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d122      	bne.n	8001d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d11b      	bne.n	8001d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0204 	mvn.w	r2, #4
 8001d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2202      	movs	r2, #2
 8001d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f992 	bl	8002060 <HAL_TIM_IC_CaptureCallback>
 8001d3c:	e005      	b.n	8001d4a <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f985 	bl	800204e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f994 	bl	8002072 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d122      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d11b      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0208 	mvn.w	r2, #8
 8001d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2204      	movs	r2, #4
 8001d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f968 	bl	8002060 <HAL_TIM_IC_CaptureCallback>
 8001d90:	e005      	b.n	8001d9e <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f95b 	bl	800204e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f96a 	bl	8002072 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d122      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b10      	cmp	r3, #16
 8001dbe:	d11b      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0210 	mvn.w	r2, #16
 8001dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2208      	movs	r2, #8
 8001dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f93e 	bl	8002060 <HAL_TIM_IC_CaptureCallback>
 8001de4:	e005      	b.n	8001df2 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f931 	bl	800204e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f940 	bl	8002072 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d10e      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d107      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0201 	mvn.w	r2, #1
 8001e1c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f90c 	bl	800203c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2e:	2b80      	cmp	r3, #128	; 0x80
 8001e30:	d10e      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3c:	2b80      	cmp	r3, #128	; 0x80
 8001e3e:	d107      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e48:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fbf1 	bl	8002632 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5a:	2b40      	cmp	r3, #64	; 0x40
 8001e5c:	d10e      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e68:	2b40      	cmp	r3, #64	; 0x40
 8001e6a:	d107      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e74:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f904 	bl	8002084 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	d10e      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d107      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0220 	mvn.w	r2, #32
 8001ea0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fbbc 	bl	8002620 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e0b4      	b.n	8002034 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b0c      	cmp	r3, #12
 8001ede:	f200 809f 	bhi.w	8002020 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001ee2:	a201      	add	r2, pc, #4	; (adr r2, 8001ee8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee8:	08001f1d 	.word	0x08001f1d
 8001eec:	08002021 	.word	0x08002021
 8001ef0:	08002021 	.word	0x08002021
 8001ef4:	08002021 	.word	0x08002021
 8001ef8:	08001f5d 	.word	0x08001f5d
 8001efc:	08002021 	.word	0x08002021
 8001f00:	08002021 	.word	0x08002021
 8001f04:	08002021 	.word	0x08002021
 8001f08:	08001f9f 	.word	0x08001f9f
 8001f0c:	08002021 	.word	0x08002021
 8001f10:	08002021 	.word	0x08002021
 8001f14:	08002021 	.word	0x08002021
 8001f18:	08001fdf 	.word	0x08001fdf
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f91e 	bl	8002164 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	6992      	ldr	r2, [r2, #24]
 8001f32:	f042 0208 	orr.w	r2, r2, #8
 8001f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	6992      	ldr	r2, [r2, #24]
 8001f42:	f022 0204 	bic.w	r2, r2, #4
 8001f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	6991      	ldr	r1, [r2, #24]
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	6912      	ldr	r2, [r2, #16]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	619a      	str	r2, [r3, #24]
    }
    break;
 8001f5a:	e062      	b.n	8002022 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 f96a 	bl	800223c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	6992      	ldr	r2, [r2, #24]
 8001f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	6992      	ldr	r2, [r2, #24]
 8001f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	6991      	ldr	r1, [r2, #24]
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	6912      	ldr	r2, [r2, #16]
 8001f96:	0212      	lsls	r2, r2, #8
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	619a      	str	r2, [r3, #24]
    }
    break;
 8001f9c:	e041      	b.n	8002022 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 f9b9 	bl	800231c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	69d2      	ldr	r2, [r2, #28]
 8001fb4:	f042 0208 	orr.w	r2, r2, #8
 8001fb8:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	69d2      	ldr	r2, [r2, #28]
 8001fc4:	f022 0204 	bic.w	r2, r2, #4
 8001fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	69d1      	ldr	r1, [r2, #28]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	6912      	ldr	r2, [r2, #16]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	61da      	str	r2, [r3, #28]
    }
    break;
 8001fdc:	e021      	b.n	8002022 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fa09 	bl	80023fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	69d2      	ldr	r2, [r2, #28]
 8001ff4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ff8:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	69d2      	ldr	r2, [r2, #28]
 8002004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	69d1      	ldr	r1, [r2, #28]
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	6912      	ldr	r2, [r2, #16]
 8002018:	0212      	lsls	r2, r2, #8
 800201a:	430a      	orrs	r2, r1
 800201c:	61da      	str	r2, [r3, #28]
    }
    break;
 800201e:	e000      	b.n	8002022 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8002020:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr

0800204e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr
	...

08002098 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a2a      	ldr	r2, [pc, #168]	; (8002158 <TIM_Base_SetConfig+0xc0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d00b      	beq.n	80020cc <TIM_Base_SetConfig+0x34>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ba:	d007      	beq.n	80020cc <TIM_Base_SetConfig+0x34>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a27      	ldr	r2, [pc, #156]	; (800215c <TIM_Base_SetConfig+0xc4>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d003      	beq.n	80020cc <TIM_Base_SetConfig+0x34>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a26      	ldr	r2, [pc, #152]	; (8002160 <TIM_Base_SetConfig+0xc8>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d108      	bne.n	80020de <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a1d      	ldr	r2, [pc, #116]	; (8002158 <TIM_Base_SetConfig+0xc0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d00b      	beq.n	80020fe <TIM_Base_SetConfig+0x66>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ec:	d007      	beq.n	80020fe <TIM_Base_SetConfig+0x66>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a1a      	ldr	r2, [pc, #104]	; (800215c <TIM_Base_SetConfig+0xc4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d003      	beq.n	80020fe <TIM_Base_SetConfig+0x66>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a19      	ldr	r2, [pc, #100]	; (8002160 <TIM_Base_SetConfig+0xc8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d108      	bne.n	8002110 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002116:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	4313      	orrs	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a07      	ldr	r2, [pc, #28]	; (8002158 <TIM_Base_SetConfig+0xc0>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d103      	bne.n	8002148 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	615a      	str	r2, [r3, #20]
}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	40012c00 	.word	0x40012c00
 800215c:	40000400 	.word	0x40000400
 8002160:	40000800 	.word	0x40000800

08002164 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002164:	b480      	push	{r7}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	f023 0201 	bic.w	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f023 0303 	bic.w	r3, r3, #3
 80021a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f023 0302 	bic.w	r3, r3, #2
 80021b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a1c      	ldr	r2, [pc, #112]	; (8002238 <TIM_OC1_SetConfig+0xd4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d10c      	bne.n	80021e6 <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f023 0308 	bic.w	r3, r3, #8
 80021d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	4313      	orrs	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f023 0304 	bic.w	r3, r3, #4
 80021e4:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a13      	ldr	r2, [pc, #76]	; (8002238 <TIM_OC1_SetConfig+0xd4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d111      	bne.n	8002212 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	621a      	str	r2, [r3, #32]
}
 800222c:	bf00      	nop
 800222e:	371c      	adds	r7, #28
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40012c00 	.word	0x40012c00

0800223c <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	f023 0210 	bic.w	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800227e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f023 0320 	bic.w	r3, r3, #32
 8002292:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4313      	orrs	r3, r2
 800229e:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <TIM_OC2_SetConfig+0xdc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d10d      	bne.n	80022c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022c2:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a14      	ldr	r2, [pc, #80]	; (8002318 <TIM_OC2_SetConfig+0xdc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d113      	bne.n	80022f4 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	621a      	str	r2, [r3, #32]
}
 800230e:	bf00      	nop
 8002310:	371c      	adds	r7, #28
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	40012c00 	.word	0x40012c00

0800231c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0303 	bic.w	r3, r3, #3
 800235e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	4313      	orrs	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <TIM_OC3_SetConfig+0xdc>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d10d      	bne.n	80023a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800238c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	4313      	orrs	r3, r2
 8002398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023a0:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a14      	ldr	r2, [pc, #80]	; (80023f8 <TIM_OC3_SetConfig+0xdc>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d113      	bne.n	80023d2 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	621a      	str	r2, [r3, #32]
}
 80023ec:	bf00      	nop
 80023ee:	371c      	adds	r7, #28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40012c00 	.word	0x40012c00

080023fc <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002436:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800243e:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	021b      	lsls	r3, r3, #8
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002452:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	031b      	lsls	r3, r3, #12
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a0f      	ldr	r2, [pc, #60]	; (80024a0 <TIM_OC4_SetConfig+0xa4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d109      	bne.n	800247c <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800246e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	019b      	lsls	r3, r3, #6
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4313      	orrs	r3, r2
 800247a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	621a      	str	r2, [r3, #32]
}
 8002496:	bf00      	nop
 8002498:	371c      	adds	r7, #28
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	40012c00 	.word	0x40012c00

080024a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80024b4:	2201      	movs	r2, #1
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a1a      	ldr	r2, [r3, #32]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	401a      	ands	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a1a      	ldr	r2, [r3, #32]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	fa01 f303 	lsl.w	r3, r1, r3
 80024d8:	431a      	orrs	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	621a      	str	r2, [r3, #32]
}
 80024de:	bf00      	nop
 80024e0:	371c      	adds	r7, #28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002500:	2302      	movs	r3, #2
 8002502:	e044      	b.n	800258e <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4313      	orrs	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	4313      	orrs	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4313      	orrs	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	4313      	orrs	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e032      	b.n	8002616 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	6852      	ldr	r2, [r2, #4]
 80025ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025ce:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	6851      	ldr	r1, [r2, #4]
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	6892      	ldr	r2, [r2, #8]
 80025ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f0:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	6891      	ldr	r1, [r2, #8]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	6852      	ldr	r2, [r2, #4]
 8002600:	430a      	orrs	r2, r1
 8002602:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  


  u.var32 = 0;
 8002648:	4b46      	ldr	r3, [pc, #280]	; (8002764 <main+0x120>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800264e:	f7fd fd7d 	bl	800014c <HAL_Init>
  SystemClock_Config();
 8002652:	f000 f89b 	bl	800278c <SystemClock_Config>
  MX_GPIO_Init();
 8002656:	f000 fa75 	bl	8002b44 <MX_GPIO_Init>
  MX_TIM2_Init();
 800265a:	f000 f9f9 	bl	8002a50 <MX_TIM2_Init>
  MX_CAN_Init();
 800265e:	f000 f8db 	bl	8002818 <MX_CAN_Init>
  MX_TIM1_Init();
 8002662:	f000 f957 	bl	8002914 <MX_TIM1_Init>


  HAL_TIM_Base_Start(&htim1);
 8002666:	4840      	ldr	r0, [pc, #256]	; (8002768 <main+0x124>)
 8002668:	f7ff faac 	bl	8001bc4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1); // PWM_L
 800266c:	2100      	movs	r1, #0
 800266e:	483e      	ldr	r0, [pc, #248]	; (8002768 <main+0x124>)
 8002670:	f7ff faee 	bl	8001c50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2); // PWM_R
 8002674:	2104      	movs	r1, #4
 8002676:	483c      	ldr	r0, [pc, #240]	; (8002768 <main+0x124>)
 8002678:	f7ff faea 	bl	8001c50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3); // LED VERDE
 800267c:	2108      	movs	r1, #8
 800267e:	483a      	ldr	r0, [pc, #232]	; (8002768 <main+0x124>)
 8002680:	f7ff fae6 	bl	8001c50 <HAL_TIM_PWM_Start>


  HAL_TIM_Base_Start(&htim2);
 8002684:	4839      	ldr	r0, [pc, #228]	; (800276c <main+0x128>)
 8002686:	f7ff fa9d 	bl	8001bc4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1); //A1
 800268a:	2100      	movs	r1, #0
 800268c:	4837      	ldr	r0, [pc, #220]	; (800276c <main+0x128>)
 800268e:	f7ff fadf 	bl	8001c50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2); //A2
 8002692:	2104      	movs	r1, #4
 8002694:	4835      	ldr	r0, [pc, #212]	; (800276c <main+0x128>)
 8002696:	f7ff fadb 	bl	8001c50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3); //A3
 800269a:	2108      	movs	r1, #8
 800269c:	4833      	ldr	r0, [pc, #204]	; (800276c <main+0x128>)
 800269e:	f7ff fad7 	bl	8001c50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4); //A4
 80026a2:	210c      	movs	r1, #12
 80026a4:	4831      	ldr	r0, [pc, #196]	; (800276c <main+0x128>)
 80026a6:	f7ff fad3 	bl	8001c50 <HAL_TIM_PWM_Start>


  while (1)
  {

		if ((HAL_GetTick() - last_time) > 1000){ // testa se o motor está parado (abaixo de 20 RPM)
 80026aa:	f7fd fda7 	bl	80001fc <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	4b2f      	ldr	r3, [pc, #188]	; (8002770 <main+0x12c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026ba:	d902      	bls.n	80026c2 <main+0x7e>
			u.var32 = 0;
 80026bc:	4b29      	ldr	r3, [pc, #164]	; (8002764 <main+0x120>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]

		}

	  if (RxHeader.StdId == 0x003){ // green
 80026c2:	4b2c      	ldr	r3, [pc, #176]	; (8002774 <main+0x130>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d123      	bne.n	8002712 <main+0xce>

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, RxData[0]); //update pwm value
 80026ca:	4b28      	ldr	r3, [pc, #160]	; (800276c <main+0x128>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a2a      	ldr	r2, [pc, #168]	; (8002778 <main+0x134>)
 80026d0:	7812      	ldrb	r2, [r2, #0]
 80026d2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, RxData[1]); //update pwm value
 80026d4:	4b25      	ldr	r3, [pc, #148]	; (800276c <main+0x128>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	3334      	adds	r3, #52	; 0x34
 80026da:	3304      	adds	r3, #4
 80026dc:	4a26      	ldr	r2, [pc, #152]	; (8002778 <main+0x134>)
 80026de:	7852      	ldrb	r2, [r2, #1]
 80026e0:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, RxData[2]); //update pwm value
 80026e2:	4b22      	ldr	r3, [pc, #136]	; (800276c <main+0x128>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3334      	adds	r3, #52	; 0x34
 80026e8:	3308      	adds	r3, #8
 80026ea:	4a23      	ldr	r2, [pc, #140]	; (8002778 <main+0x134>)
 80026ec:	7892      	ldrb	r2, [r2, #2]
 80026ee:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, RxData[3]); //update pwm value
 80026f0:	4b1e      	ldr	r3, [pc, #120]	; (800276c <main+0x128>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	3334      	adds	r3, #52	; 0x34
 80026f6:	330c      	adds	r3, #12
 80026f8:	4a1f      	ldr	r2, [pc, #124]	; (8002778 <main+0x134>)
 80026fa:	78d2      	ldrb	r2, [r2, #3]
 80026fc:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, RxData[4]); //update pwm value
 80026fe:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <main+0x124>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	3334      	adds	r3, #52	; 0x34
 8002704:	3304      	adds	r3, #4
 8002706:	4a1c      	ldr	r2, [pc, #112]	; (8002778 <main+0x134>)
 8002708:	7912      	ldrb	r2, [r2, #4]
 800270a:	601a      	str	r2, [r3, #0]
			HAL_Delay(5);  //hold for 400m
 800270c:	2005      	movs	r0, #5
 800270e:	f7fd fd7f 	bl	8000210 <HAL_Delay>
		  }

	 // u.var32 = HAL_GetTick();

	  TxHeader.StdId = 0x00A; //red on
 8002712:	4b1a      	ldr	r3, [pc, #104]	; (800277c <main+0x138>)
 8002714:	220a      	movs	r2, #10
 8002716:	601a      	str	r2, [r3, #0]
	  TxData[0] = u.var8[0];
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <main+0x120>)
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	4b18      	ldr	r3, [pc, #96]	; (8002780 <main+0x13c>)
 800271e:	701a      	strb	r2, [r3, #0]
	  TxData[1] = u.var8[1];
 8002720:	4b10      	ldr	r3, [pc, #64]	; (8002764 <main+0x120>)
 8002722:	785a      	ldrb	r2, [r3, #1]
 8002724:	4b16      	ldr	r3, [pc, #88]	; (8002780 <main+0x13c>)
 8002726:	705a      	strb	r2, [r3, #1]
	  TxData[2] = u.var8[2];
 8002728:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <main+0x120>)
 800272a:	789a      	ldrb	r2, [r3, #2]
 800272c:	4b14      	ldr	r3, [pc, #80]	; (8002780 <main+0x13c>)
 800272e:	709a      	strb	r2, [r3, #2]
	  TxData[3] = u.var8[3];
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <main+0x120>)
 8002732:	78da      	ldrb	r2, [r3, #3]
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <main+0x13c>)
 8002736:	70da      	strb	r2, [r3, #3]
	  //con.var32=10;

	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 70);
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <main+0x124>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3334      	adds	r3, #52	; 0x34
 800273e:	3304      	adds	r3, #4
 8002740:	2246      	movs	r2, #70	; 0x46
 8002742:	601a      	str	r2, [r3, #0]




      if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <main+0x140>)
 8002746:	4a0e      	ldr	r2, [pc, #56]	; (8002780 <main+0x13c>)
 8002748:	490c      	ldr	r1, [pc, #48]	; (800277c <main+0x138>)
 800274a:	480f      	ldr	r0, [pc, #60]	; (8002788 <main+0x144>)
 800274c:	f7fd ff89 	bl	8000662 <HAL_CAN_AddTxMessage>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <main+0x116>
      {
        Error_Handler();
 8002756:	f000 facf 	bl	8002cf8 <Error_Handler>
      }

      HAL_Delay(100);
 800275a:	2064      	movs	r0, #100	; 0x64
 800275c:	f7fd fd58 	bl	8000210 <HAL_Delay>
		if ((HAL_GetTick() - last_time) > 1000){ // testa se o motor está parado (abaixo de 20 RPM)
 8002760:	e7a3      	b.n	80026aa <main+0x66>
 8002762:	bf00      	nop
 8002764:	2000012c 	.word	0x2000012c
 8002768:	2000009c 	.word	0x2000009c
 800276c:	200000ec 	.word	0x200000ec
 8002770:	200000dc 	.word	0x200000dc
 8002774:	20000040 	.word	0x20000040
 8002778:	200000e4 	.word	0x200000e4
 800277c:	20000028 	.word	0x20000028
 8002780:	20000094 	.word	0x20000094
 8002784:	200000e0 	.word	0x200000e0
 8002788:	20000060 	.word	0x20000060

0800278c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b090      	sub	sp, #64	; 0x40
 8002790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002792:	f107 0318 	add.w	r3, r7, #24
 8002796:	2228      	movs	r2, #40	; 0x28
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fc8c 	bl	80030b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	609a      	str	r2, [r3, #8]
 80027aa:	60da      	str	r2, [r3, #12]
 80027ac:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027ae:	2301      	movs	r3, #1
 80027b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80027b8:	2300      	movs	r3, #0
 80027ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027bc:	2301      	movs	r3, #1
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027c0:	2302      	movs	r3, #2
 80027c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80027ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80027ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027d0:	f107 0318 	add.w	r3, r7, #24
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe fe05 	bl	80013e4 <HAL_RCC_OscConfig>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80027e0:	f000 fa8a 	bl	8002cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027e4:	230f      	movs	r3, #15
 80027e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027e8:	2302      	movs	r3, #2
 80027ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	2102      	movs	r1, #2
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff f854 	bl	80018ac <HAL_RCC_ClockConfig>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800280a:	f000 fa75 	bl	8002cf8 <Error_Handler>
  }
}
 800280e:	bf00      	nop
 8002810:	3740      	adds	r7, #64	; 0x40
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	; 0x28
 800281c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800281e:	4b3a      	ldr	r3, [pc, #232]	; (8002908 <MX_CAN_Init+0xf0>)
 8002820:	4a3a      	ldr	r2, [pc, #232]	; (800290c <MX_CAN_Init+0xf4>)
 8002822:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8002824:	4b38      	ldr	r3, [pc, #224]	; (8002908 <MX_CAN_Init+0xf0>)
 8002826:	2209      	movs	r2, #9
 8002828:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800282a:	4b37      	ldr	r3, [pc, #220]	; (8002908 <MX_CAN_Init+0xf0>)
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002830:	4b35      	ldr	r3, [pc, #212]	; (8002908 <MX_CAN_Init+0xf0>)
 8002832:	2200      	movs	r2, #0
 8002834:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002836:	4b34      	ldr	r3, [pc, #208]	; (8002908 <MX_CAN_Init+0xf0>)
 8002838:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800283c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800283e:	4b32      	ldr	r3, [pc, #200]	; (8002908 <MX_CAN_Init+0xf0>)
 8002840:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002844:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002846:	4b30      	ldr	r3, [pc, #192]	; (8002908 <MX_CAN_Init+0xf0>)
 8002848:	2200      	movs	r2, #0
 800284a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800284c:	4b2e      	ldr	r3, [pc, #184]	; (8002908 <MX_CAN_Init+0xf0>)
 800284e:	2200      	movs	r2, #0
 8002850:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002852:	4b2d      	ldr	r3, [pc, #180]	; (8002908 <MX_CAN_Init+0xf0>)
 8002854:	2200      	movs	r2, #0
 8002856:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002858:	4b2b      	ldr	r3, [pc, #172]	; (8002908 <MX_CAN_Init+0xf0>)
 800285a:	2200      	movs	r2, #0
 800285c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800285e:	4b2a      	ldr	r3, [pc, #168]	; (8002908 <MX_CAN_Init+0xf0>)
 8002860:	2200      	movs	r2, #0
 8002862:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002864:	4b28      	ldr	r3, [pc, #160]	; (8002908 <MX_CAN_Init+0xf0>)
 8002866:	2200      	movs	r2, #0
 8002868:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800286a:	4827      	ldr	r0, [pc, #156]	; (8002908 <MX_CAN_Init+0xf0>)
 800286c:	f7fd fcf2 	bl	8000254 <HAL_CAN_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8002876:	f000 fa3f 	bl	8002cf8 <Error_Handler>
  }


  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800287a:	2102      	movs	r1, #2
 800287c:	4822      	ldr	r0, [pc, #136]	; (8002908 <MX_CAN_Init+0xf0>)
 800287e:	f7fe f8d8 	bl	8000a32 <HAL_CAN_ActivateNotification>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_CAN_Init+0x74>
  {
	Error_Handler();
 8002888:	f000 fa36 	bl	8002cf8 <Error_Handler>
  }

  /* Configure the CAN Filter */
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002890:	2300      	movs	r3, #0
 8002892:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002894:	2301      	movs	r3, #1
 8002896:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh     = 0x000<<5; //0x000
 8002898:	2300      	movs	r3, #0
 800289a:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow      = 0x0000;
 800289c:	2300      	movs	r3, #0
 800289e:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x700<<5; // mascara que filtra
 80028a0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80028a4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow  = 0x0000;
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80028ae:	2301      	movs	r3, #1
 80028b0:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80028b2:	230e      	movs	r3, #14
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80028b6:	463b      	mov	r3, r7
 80028b8:	4619      	mov	r1, r3
 80028ba:	4813      	ldr	r0, [pc, #76]	; (8002908 <MX_CAN_Init+0xf0>)
 80028bc:	f7fd fdc4 	bl	8000448 <HAL_CAN_ConfigFilter>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <MX_CAN_Init+0xb2>
  {
    /* Filter configuration Error */
    Error_Handler();
 80028c6:	f000 fa17 	bl	8002cf8 <Error_Handler>
  }

  /* Configure Transmission process */
  TxHeader.StdId = 0x001;
 80028ca:	4b11      	ldr	r3, [pc, #68]	; (8002910 <MX_CAN_Init+0xf8>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x001;
 80028d0:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <MX_CAN_Init+0xf8>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 80028d6:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <MX_CAN_Init+0xf8>)
 80028d8:	2200      	movs	r2, #0
 80028da:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <MX_CAN_Init+0xf8>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 80028e2:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <MX_CAN_Init+0xf8>)
 80028e4:	2208      	movs	r2, #8
 80028e6:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <MX_CAN_Init+0xf8>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	751a      	strb	r2, [r3, #20]


  /* Start the CAN peripheral */
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80028ee:	4806      	ldr	r0, [pc, #24]	; (8002908 <MX_CAN_Init+0xf0>)
 80028f0:	f7fd fe73 	bl	80005da <HAL_CAN_Start>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_CAN_Init+0xe6>
  {
    /* Start Error */
    Error_Handler();
 80028fa:	f000 f9fd 	bl	8002cf8 <Error_Handler>
  }




}
 80028fe:	bf00      	nop
 8002900:	3728      	adds	r7, #40	; 0x28
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000060 	.word	0x20000060
 800290c:	40006400 	.word	0x40006400
 8002910:	20000028 	.word	0x20000028

08002914 <MX_TIM1_Init>:


static void MX_TIM1_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b090      	sub	sp, #64	; 0x40
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800291a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002924:	f107 031c 	add.w	r3, r7, #28
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
 8002934:	615a      	str	r2, [r3, #20]
 8002936:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002938:	463b      	mov	r3, r7
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	60da      	str	r2, [r3, #12]
 8002944:	611a      	str	r2, [r3, #16]
 8002946:	615a      	str	r2, [r3, #20]
 8002948:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800294a:	4b3f      	ldr	r3, [pc, #252]	; (8002a48 <MX_TIM1_Init+0x134>)
 800294c:	4a3f      	ldr	r2, [pc, #252]	; (8002a4c <MX_TIM1_Init+0x138>)
 800294e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 8002950:	4b3d      	ldr	r3, [pc, #244]	; (8002a48 <MX_TIM1_Init+0x134>)
 8002952:	220b      	movs	r2, #11
 8002954:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002956:	4b3c      	ldr	r3, [pc, #240]	; (8002a48 <MX_TIM1_Init+0x134>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 300;
 800295c:	4b3a      	ldr	r3, [pc, #232]	; (8002a48 <MX_TIM1_Init+0x134>)
 800295e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002962:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002964:	4b38      	ldr	r3, [pc, #224]	; (8002a48 <MX_TIM1_Init+0x134>)
 8002966:	2200      	movs	r2, #0
 8002968:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800296a:	4b37      	ldr	r3, [pc, #220]	; (8002a48 <MX_TIM1_Init+0x134>)
 800296c:	2200      	movs	r2, #0
 800296e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002970:	4b35      	ldr	r3, [pc, #212]	; (8002a48 <MX_TIM1_Init+0x134>)
 8002972:	2200      	movs	r2, #0
 8002974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002976:	4834      	ldr	r0, [pc, #208]	; (8002a48 <MX_TIM1_Init+0x134>)
 8002978:	f7ff f93e 	bl	8001bf8 <HAL_TIM_PWM_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8002982:	f000 f9b9 	bl	8002cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002986:	2300      	movs	r3, #0
 8002988:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800298a:	2300      	movs	r3, #0
 800298c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800298e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002992:	4619      	mov	r1, r3
 8002994:	482c      	ldr	r0, [pc, #176]	; (8002a48 <MX_TIM1_Init+0x134>)
 8002996:	f7ff fdff 	bl	8002598 <HAL_TIMEx_MasterConfigSynchronization>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80029a0:	f000 f9aa 	bl	8002cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029a4:	2360      	movs	r3, #96	; 0x60
 80029a6:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029ac:	2300      	movs	r3, #0
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029b8:	2300      	movs	r3, #0
 80029ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029bc:	2300      	movs	r3, #0
 80029be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029c0:	f107 031c 	add.w	r3, r7, #28
 80029c4:	2200      	movs	r2, #0
 80029c6:	4619      	mov	r1, r3
 80029c8:	481f      	ldr	r0, [pc, #124]	; (8002a48 <MX_TIM1_Init+0x134>)
 80029ca:	f7ff fa71 	bl	8001eb0 <HAL_TIM_PWM_ConfigChannel>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80029d4:	f000 f990 	bl	8002cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029d8:	f107 031c 	add.w	r3, r7, #28
 80029dc:	2204      	movs	r2, #4
 80029de:	4619      	mov	r1, r3
 80029e0:	4819      	ldr	r0, [pc, #100]	; (8002a48 <MX_TIM1_Init+0x134>)
 80029e2:	f7ff fa65 	bl	8001eb0 <HAL_TIM_PWM_ConfigChannel>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80029ec:	f000 f984 	bl	8002cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029f0:	f107 031c 	add.w	r3, r7, #28
 80029f4:	2208      	movs	r2, #8
 80029f6:	4619      	mov	r1, r3
 80029f8:	4813      	ldr	r0, [pc, #76]	; (8002a48 <MX_TIM1_Init+0x134>)
 80029fa:	f7ff fa59 	bl	8001eb0 <HAL_TIM_PWM_ConfigChannel>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002a04:	f000 f978 	bl	8002cf8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a26:	463b      	mov	r3, r7
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4807      	ldr	r0, [pc, #28]	; (8002a48 <MX_TIM1_Init+0x134>)
 8002a2c:	f7ff fd5c 	bl	80024e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8002a36:	f000 f95f 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a3a:	4803      	ldr	r0, [pc, #12]	; (8002a48 <MX_TIM1_Init+0x134>)
 8002a3c:	f000 fa26 	bl	8002e8c <HAL_TIM_MspPostInit>

}
 8002a40:	bf00      	nop
 8002a42:	3740      	adds	r7, #64	; 0x40
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	2000009c 	.word	0x2000009c
 8002a4c:	40012c00 	.word	0x40012c00

08002a50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	; 0x28
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a56:	f107 0320 	add.w	r3, r7, #32
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	609a      	str	r2, [r3, #8]
 8002a6a:	60da      	str	r2, [r3, #12]
 8002a6c:	611a      	str	r2, [r3, #16]
 8002a6e:	615a      	str	r2, [r3, #20]
 8002a70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a72:	4b33      	ldr	r3, [pc, #204]	; (8002b40 <MX_TIM2_Init+0xf0>)
 8002a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8002a7a:	4b31      	ldr	r3, [pc, #196]	; (8002b40 <MX_TIM2_Init+0xf0>)
 8002a7c:	f240 321f 	movw	r2, #799	; 0x31f
 8002a80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a82:	4b2f      	ldr	r3, [pc, #188]	; (8002b40 <MX_TIM2_Init+0xf0>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1800;
 8002a88:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <MX_TIM2_Init+0xf0>)
 8002a8a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002a8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a90:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <MX_TIM2_Init+0xf0>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a96:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <MX_TIM2_Init+0xf0>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a9c:	4828      	ldr	r0, [pc, #160]	; (8002b40 <MX_TIM2_Init+0xf0>)
 8002a9e:	f7ff f8ab 	bl	8001bf8 <HAL_TIM_PWM_Init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002aa8:	f000 f926 	bl	8002cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aac:	2300      	movs	r3, #0
 8002aae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ab4:	f107 0320 	add.w	r3, r7, #32
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4821      	ldr	r0, [pc, #132]	; (8002b40 <MX_TIM2_Init+0xf0>)
 8002abc:	f7ff fd6c 	bl	8002598 <HAL_TIMEx_MasterConfigSynchronization>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002ac6:	f000 f917 	bl	8002cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aca:	2360      	movs	r3, #96	; 0x60
 8002acc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ada:	1d3b      	adds	r3, r7, #4
 8002adc:	2200      	movs	r2, #0
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4817      	ldr	r0, [pc, #92]	; (8002b40 <MX_TIM2_Init+0xf0>)
 8002ae2:	f7ff f9e5 	bl	8001eb0 <HAL_TIM_PWM_ConfigChannel>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002aec:	f000 f904 	bl	8002cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	2204      	movs	r2, #4
 8002af4:	4619      	mov	r1, r3
 8002af6:	4812      	ldr	r0, [pc, #72]	; (8002b40 <MX_TIM2_Init+0xf0>)
 8002af8:	f7ff f9da 	bl	8001eb0 <HAL_TIM_PWM_ConfigChannel>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8002b02:	f000 f8f9 	bl	8002cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	2208      	movs	r2, #8
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	480c      	ldr	r0, [pc, #48]	; (8002b40 <MX_TIM2_Init+0xf0>)
 8002b0e:	f7ff f9cf 	bl	8001eb0 <HAL_TIM_PWM_ConfigChannel>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8002b18:	f000 f8ee 	bl	8002cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b1c:	1d3b      	adds	r3, r7, #4
 8002b1e:	220c      	movs	r2, #12
 8002b20:	4619      	mov	r1, r3
 8002b22:	4807      	ldr	r0, [pc, #28]	; (8002b40 <MX_TIM2_Init+0xf0>)
 8002b24:	f7ff f9c4 	bl	8001eb0 <HAL_TIM_PWM_ConfigChannel>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8002b2e:	f000 f8e3 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b32:	4803      	ldr	r0, [pc, #12]	; (8002b40 <MX_TIM2_Init+0xf0>)
 8002b34:	f000 f9aa 	bl	8002e8c <HAL_TIM_MspPostInit>

}
 8002b38:	bf00      	nop
 8002b3a:	3728      	adds	r7, #40	; 0x28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	200000ec 	.word	0x200000ec

08002b44 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4a:	f107 0310 	add.w	r3, r7, #16
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	609a      	str	r2, [r3, #8]
 8002b56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b58:	4a45      	ldr	r2, [pc, #276]	; (8002c70 <MX_GPIO_Init+0x12c>)
 8002b5a:	4b45      	ldr	r3, [pc, #276]	; (8002c70 <MX_GPIO_Init+0x12c>)
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	f043 0310 	orr.w	r3, r3, #16
 8002b62:	6193      	str	r3, [r2, #24]
 8002b64:	4b42      	ldr	r3, [pc, #264]	; (8002c70 <MX_GPIO_Init+0x12c>)
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b70:	4a3f      	ldr	r2, [pc, #252]	; (8002c70 <MX_GPIO_Init+0x12c>)
 8002b72:	4b3f      	ldr	r3, [pc, #252]	; (8002c70 <MX_GPIO_Init+0x12c>)
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f043 0320 	orr.w	r3, r3, #32
 8002b7a:	6193      	str	r3, [r2, #24]
 8002b7c:	4b3c      	ldr	r3, [pc, #240]	; (8002c70 <MX_GPIO_Init+0x12c>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b88:	4a39      	ldr	r2, [pc, #228]	; (8002c70 <MX_GPIO_Init+0x12c>)
 8002b8a:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <MX_GPIO_Init+0x12c>)
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f043 0304 	orr.w	r3, r3, #4
 8002b92:	6193      	str	r3, [r2, #24]
 8002b94:	4b36      	ldr	r3, [pc, #216]	; (8002c70 <MX_GPIO_Init+0x12c>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba0:	4a33      	ldr	r2, [pc, #204]	; (8002c70 <MX_GPIO_Init+0x12c>)
 8002ba2:	4b33      	ldr	r3, [pc, #204]	; (8002c70 <MX_GPIO_Init+0x12c>)
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f043 0308 	orr.w	r3, r3, #8
 8002baa:	6193      	str	r3, [r2, #24]
 8002bac:	4b30      	ldr	r3, [pc, #192]	; (8002c70 <MX_GPIO_Init+0x12c>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bbe:	482d      	ldr	r0, [pc, #180]	; (8002c74 <MX_GPIO_Init+0x130>)
 8002bc0:	f7fe fbe0 	bl	8001384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd6:	f107 0310 	add.w	r3, r7, #16
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4825      	ldr	r0, [pc, #148]	; (8002c74 <MX_GPIO_Init+0x130>)
 8002bde:	f7fe fa73 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be8:	2301      	movs	r3, #1
 8002bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf4:	f107 0310 	add.w	r3, r7, #16
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	481f      	ldr	r0, [pc, #124]	; (8002c78 <MX_GPIO_Init+0x134>)
 8002bfc:	f7fe fa64 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c06:	2301      	movs	r3, #1
 8002c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c12:	f107 0310 	add.w	r3, r7, #16
 8002c16:	4619      	mov	r1, r3
 8002c18:	4817      	ldr	r0, [pc, #92]	; (8002c78 <MX_GPIO_Init+0x134>)
 8002c1a:	f7fe fa55 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c24:	2301      	movs	r3, #1
 8002c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c30:	f107 0310 	add.w	r3, r7, #16
 8002c34:	4619      	mov	r1, r3
 8002c36:	4810      	ldr	r0, [pc, #64]	; (8002c78 <MX_GPIO_Init+0x134>)
 8002c38:	f7fe fa46 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c42:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <MX_GPIO_Init+0x138>)
 8002c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4a:	f107 0310 	add.w	r3, r7, #16
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4809      	ldr	r0, [pc, #36]	; (8002c78 <MX_GPIO_Init+0x134>)
 8002c52:	f7fe fa39 	bl	80010c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002c56:	2200      	movs	r2, #0
 8002c58:	2100      	movs	r1, #0
 8002c5a:	2028      	movs	r0, #40	; 0x28
 8002c5c:	f7fe f9fd 	bl	800105a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c60:	2028      	movs	r0, #40	; 0x28
 8002c62:	f7fe fa16 	bl	8001092 <HAL_NVIC_EnableIRQ>

}
 8002c66:	bf00      	nop
 8002c68:	3720      	adds	r7, #32
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40011000 	.word	0x40011000
 8002c78:	40010c00 	.word	0x40010c00
 8002c7c:	10110000 	.word	0x10110000

08002c80 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == GPIO_PIN_10){
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c90:	d111      	bne.n	8002cb6 <HAL_GPIO_EXTI_Callback+0x36>
			u.var32 = 60000/(HAL_GetTick() - last_time);
 8002c92:	f7fd fab3 	bl	80001fc <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_GPIO_EXTI_Callback+0x40>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca6:	4a07      	ldr	r2, [pc, #28]	; (8002cc4 <HAL_GPIO_EXTI_Callback+0x44>)
 8002ca8:	6013      	str	r3, [r2, #0]
			last_time = HAL_GetTick();
 8002caa:	f7fd faa7 	bl	80001fc <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <HAL_GPIO_EXTI_Callback+0x40>)
 8002cb2:	601a      	str	r2, [r3, #0]
	}
	else
		__NOP ();
}
 8002cb4:	e000      	b.n	8002cb8 <HAL_GPIO_EXTI_Callback+0x38>
 8002cb6:	bf00      	nop
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	200000dc 	.word	0x200000dc
 8002cc4:	2000012c 	.word	0x2000012c

08002cc8 <HAL_CAN_RxFifo0MsgPendingCallback>:




void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8002cd0:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8002cd2:	4a08      	ldr	r2, [pc, #32]	; (8002cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fd fd99 	bl	800080e <HAL_CAN_GetRxMessage>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {

    Error_Handler();
 8002ce2:	f000 f809 	bl	8002cf8 <Error_Handler>
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	200000e4 	.word	0x200000e4
 8002cf4:	20000040 	.word	0x20000040

08002cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_Delay(100);
 8002cfc:	2064      	movs	r0, #100	; 0x64
 8002cfe:	f7fd fa87 	bl	8000210 <HAL_Delay>
  /* USER CODE END Error_Handler_Debug */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d0e:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <HAL_MspInit+0x40>)
 8002d10:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_MspInit+0x40>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6193      	str	r3, [r2, #24]
 8002d1a:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <HAL_MspInit+0x40>)
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	4a08      	ldr	r2, [pc, #32]	; (8002d48 <HAL_MspInit+0x40>)
 8002d28:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <HAL_MspInit+0x40>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d30:	61d3      	str	r3, [r2, #28]
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_MspInit+0x40>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	40021000 	.word	0x40021000

08002d4c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	; 0x28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a29      	ldr	r2, [pc, #164]	; (8002e0c <HAL_CAN_MspInit+0xc0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d14b      	bne.n	8002e04 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002d6c:	4a28      	ldr	r2, [pc, #160]	; (8002e10 <HAL_CAN_MspInit+0xc4>)
 8002d6e:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <HAL_CAN_MspInit+0xc4>)
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d76:	61d3      	str	r3, [r2, #28]
 8002d78:	4b25      	ldr	r3, [pc, #148]	; (8002e10 <HAL_CAN_MspInit+0xc4>)
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d84:	4a22      	ldr	r2, [pc, #136]	; (8002e10 <HAL_CAN_MspInit+0xc4>)
 8002d86:	4b22      	ldr	r3, [pc, #136]	; (8002e10 <HAL_CAN_MspInit+0xc4>)
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f043 0308 	orr.w	r3, r3, #8
 8002d8e:	6193      	str	r3, [r2, #24]
 8002d90:	4b1f      	ldr	r3, [pc, #124]	; (8002e10 <HAL_CAN_MspInit+0xc4>)
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002daa:	f107 0314 	add.w	r3, r7, #20
 8002dae:	4619      	mov	r1, r3
 8002db0:	4818      	ldr	r0, [pc, #96]	; (8002e14 <HAL_CAN_MspInit+0xc8>)
 8002db2:	f7fe f989 	bl	80010c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002db6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4812      	ldr	r0, [pc, #72]	; (8002e14 <HAL_CAN_MspInit+0xc8>)
 8002dcc:	f7fe f97c 	bl	80010c8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <HAL_CAN_MspInit+0xcc>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
 8002dee:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <HAL_CAN_MspInit+0xcc>)
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002df4:	2200      	movs	r2, #0
 8002df6:	2100      	movs	r1, #0
 8002df8:	2014      	movs	r0, #20
 8002dfa:	f7fe f92e 	bl	800105a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002dfe:	2014      	movs	r0, #20
 8002e00:	f7fe f947 	bl	8001092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002e04:	bf00      	nop
 8002e06:	3728      	adds	r7, #40	; 0x28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40006400 	.word	0x40006400
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40010c00 	.word	0x40010c00
 8002e18:	40010000 	.word	0x40010000

08002e1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a16      	ldr	r2, [pc, #88]	; (8002e84 <HAL_TIM_PWM_MspInit+0x68>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d10c      	bne.n	8002e48 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e2e:	4a16      	ldr	r2, [pc, #88]	; (8002e88 <HAL_TIM_PWM_MspInit+0x6c>)
 8002e30:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <HAL_TIM_PWM_MspInit+0x6c>)
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e38:	6193      	str	r3, [r2, #24]
 8002e3a:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <HAL_TIM_PWM_MspInit+0x6c>)
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e46:	e018      	b.n	8002e7a <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e50:	d113      	bne.n	8002e7a <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e52:	4a0d      	ldr	r2, [pc, #52]	; (8002e88 <HAL_TIM_PWM_MspInit+0x6c>)
 8002e54:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <HAL_TIM_PWM_MspInit+0x6c>)
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	61d3      	str	r3, [r2, #28]
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <HAL_TIM_PWM_MspInit+0x6c>)
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	201c      	movs	r0, #28
 8002e70:	f7fe f8f3 	bl	800105a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e74:	201c      	movs	r0, #28
 8002e76:	f7fe f90c 	bl	8001092 <HAL_NVIC_EnableIRQ>
}
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40012c00 	.word	0x40012c00
 8002e88:	40021000 	.word	0x40021000

08002e8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e94:	f107 0310 	add.w	r3, r7, #16
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a1f      	ldr	r2, [pc, #124]	; (8002f24 <HAL_TIM_MspPostInit+0x98>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d119      	bne.n	8002ee0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eac:	4a1e      	ldr	r2, [pc, #120]	; (8002f28 <HAL_TIM_MspPostInit+0x9c>)
 8002eae:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <HAL_TIM_MspPostInit+0x9c>)
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	f043 0304 	orr.w	r3, r3, #4
 8002eb6:	6193      	str	r3, [r2, #24]
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <HAL_TIM_MspPostInit+0x9c>)
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002ec4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002ec8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed2:	f107 0310 	add.w	r3, r7, #16
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4814      	ldr	r0, [pc, #80]	; (8002f2c <HAL_TIM_MspPostInit+0xa0>)
 8002eda:	f7fe f8f5 	bl	80010c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002ede:	e01c      	b.n	8002f1a <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee8:	d117      	bne.n	8002f1a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eea:	4a0f      	ldr	r2, [pc, #60]	; (8002f28 <HAL_TIM_MspPostInit+0x9c>)
 8002eec:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <HAL_TIM_MspPostInit+0x9c>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f043 0304 	orr.w	r3, r3, #4
 8002ef4:	6193      	str	r3, [r2, #24]
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <HAL_TIM_MspPostInit+0x9c>)
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002f02:	230f      	movs	r3, #15
 8002f04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0e:	f107 0310 	add.w	r3, r7, #16
 8002f12:	4619      	mov	r1, r3
 8002f14:	4805      	ldr	r0, [pc, #20]	; (8002f2c <HAL_TIM_MspPostInit+0xa0>)
 8002f16:	f7fe f8d7 	bl	80010c8 <HAL_GPIO_Init>
}
 8002f1a:	bf00      	nop
 8002f1c:	3720      	adds	r7, #32
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40012c00 	.word	0x40012c00
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40010800 	.word	0x40010800

08002f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f40:	e7fe      	b.n	8002f40 <HardFault_Handler+0x4>

08002f42 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f42:	b480      	push	{r7}
 8002f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f46:	e7fe      	b.n	8002f46 <MemManage_Handler+0x4>

08002f48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f4c:	e7fe      	b.n	8002f4c <BusFault_Handler+0x4>

08002f4e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f52:	e7fe      	b.n	8002f52 <UsageFault_Handler+0x4>

08002f54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr

08002f6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f7c:	f7fd f92c 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f80:	bf00      	nop
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002f88:	4802      	ldr	r0, [pc, #8]	; (8002f94 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002f8a:	f7fd fd77 	bl	8000a7c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000060 	.word	0x20000060

08002f98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f9c:	4802      	ldr	r0, [pc, #8]	; (8002fa8 <TIM2_IRQHandler+0x10>)
 8002f9e:	f7fe fe7f 	bl	8001ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200000ec 	.word	0x200000ec

08002fac <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002fb0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002fb4:	f7fe f9fe 	bl	80013b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002fb8:	bf00      	nop
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002fc0:	4a15      	ldr	r2, [pc, #84]	; (8003018 <SystemInit+0x5c>)
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <SystemInit+0x5c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002fcc:	4912      	ldr	r1, [pc, #72]	; (8003018 <SystemInit+0x5c>)
 8002fce:	4b12      	ldr	r3, [pc, #72]	; (8003018 <SystemInit+0x5c>)
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	4b12      	ldr	r3, [pc, #72]	; (800301c <SystemInit+0x60>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002fd8:	4a0f      	ldr	r2, [pc, #60]	; (8003018 <SystemInit+0x5c>)
 8002fda:	4b0f      	ldr	r3, [pc, #60]	; (8003018 <SystemInit+0x5c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002fe8:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <SystemInit+0x5c>)
 8002fea:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <SystemInit+0x5c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002ff4:	4a08      	ldr	r2, [pc, #32]	; (8003018 <SystemInit+0x5c>)
 8002ff6:	4b08      	ldr	r3, [pc, #32]	; (8003018 <SystemInit+0x5c>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002ffe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <SystemInit+0x5c>)
 8003002:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003006:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <SystemInit+0x64>)
 800300a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800300e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	40021000 	.word	0x40021000
 800301c:	f8ff0000 	.word	0xf8ff0000
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003024:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003026:	e003      	b.n	8003030 <LoopCopyDataInit>

08003028 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800302a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800302c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800302e:	3104      	adds	r1, #4

08003030 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003030:	480a      	ldr	r0, [pc, #40]	; (800305c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003032:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003034:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003036:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003038:	d3f6      	bcc.n	8003028 <CopyDataInit>
  ldr r2, =_sbss
 800303a:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800303c:	e002      	b.n	8003044 <LoopFillZerobss>

0800303e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800303e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003040:	f842 3b04 	str.w	r3, [r2], #4

08003044 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003044:	4b08      	ldr	r3, [pc, #32]	; (8003068 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003046:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003048:	d3f9      	bcc.n	800303e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800304a:	f7ff ffb7 	bl	8002fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800304e:	f000 f80f 	bl	8003070 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003052:	f7ff faf7 	bl	8002644 <main>
  bx lr
 8003056:	4770      	bx	lr
  ldr r3, =_sidata
 8003058:	0800310c 	.word	0x0800310c
  ldr r0, =_sdata
 800305c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003060:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8003064:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8003068:	20000130 	.word	0x20000130

0800306c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800306c:	e7fe      	b.n	800306c <ADC1_2_IRQHandler>
	...

08003070 <__libc_init_array>:
 8003070:	b570      	push	{r4, r5, r6, lr}
 8003072:	2500      	movs	r5, #0
 8003074:	4e0c      	ldr	r6, [pc, #48]	; (80030a8 <__libc_init_array+0x38>)
 8003076:	4c0d      	ldr	r4, [pc, #52]	; (80030ac <__libc_init_array+0x3c>)
 8003078:	1ba4      	subs	r4, r4, r6
 800307a:	10a4      	asrs	r4, r4, #2
 800307c:	42a5      	cmp	r5, r4
 800307e:	d109      	bne.n	8003094 <__libc_init_array+0x24>
 8003080:	f000 f822 	bl	80030c8 <_init>
 8003084:	2500      	movs	r5, #0
 8003086:	4e0a      	ldr	r6, [pc, #40]	; (80030b0 <__libc_init_array+0x40>)
 8003088:	4c0a      	ldr	r4, [pc, #40]	; (80030b4 <__libc_init_array+0x44>)
 800308a:	1ba4      	subs	r4, r4, r6
 800308c:	10a4      	asrs	r4, r4, #2
 800308e:	42a5      	cmp	r5, r4
 8003090:	d105      	bne.n	800309e <__libc_init_array+0x2e>
 8003092:	bd70      	pop	{r4, r5, r6, pc}
 8003094:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003098:	4798      	blx	r3
 800309a:	3501      	adds	r5, #1
 800309c:	e7ee      	b.n	800307c <__libc_init_array+0xc>
 800309e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030a2:	4798      	blx	r3
 80030a4:	3501      	adds	r5, #1
 80030a6:	e7f2      	b.n	800308e <__libc_init_array+0x1e>
 80030a8:	08003104 	.word	0x08003104
 80030ac:	08003104 	.word	0x08003104
 80030b0:	08003104 	.word	0x08003104
 80030b4:	08003108 	.word	0x08003108

080030b8 <memset>:
 80030b8:	4603      	mov	r3, r0
 80030ba:	4402      	add	r2, r0
 80030bc:	4293      	cmp	r3, r2
 80030be:	d100      	bne.n	80030c2 <memset+0xa>
 80030c0:	4770      	bx	lr
 80030c2:	f803 1b01 	strb.w	r1, [r3], #1
 80030c6:	e7f9      	b.n	80030bc <memset+0x4>

080030c8 <_init>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	bf00      	nop
 80030cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ce:	bc08      	pop	{r3}
 80030d0:	469e      	mov	lr, r3
 80030d2:	4770      	bx	lr

080030d4 <_fini>:
 80030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d6:	bf00      	nop
 80030d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030da:	bc08      	pop	{r3}
 80030dc:	469e      	mov	lr, r3
 80030de:	4770      	bx	lr
