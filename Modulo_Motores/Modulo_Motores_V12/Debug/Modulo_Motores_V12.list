
Modulo_Motores_V12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d54  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e60  08002e60  00012e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002e84  08002e84  00012e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002e88  08002e88  00012e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000012c  2000000c  08002e98  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000138  08002e98  00020138  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000eb4a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c24  00000000  00000000  0002eb7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a00  00000000  00000000  000307a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000948  00000000  00000000  000311a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000043e3  00000000  00000000  00031af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003343  00000000  00000000  00035ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00039216  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002960  00000000  00000000  00039294  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e48 	.word	0x08002e48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002e48 	.word	0x08002e48

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fe9b 	bl	8000e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fc8e 	bl	8002a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 feb3 	bl	8000f02 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 fe7b 	bl	8000eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000005c 	.word	0x2000005c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000005c 	.word	0x2000005c

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad2      	subs	r2, r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d3f7      	bcc.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d101      	bne.n	8000266 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000262:	2301      	movs	r3, #1
 8000264:	e0ec      	b.n	8000440 <HAL_CAN_Init+0x1ec>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	2b00      	cmp	r3, #0
 8000270:	d102      	bne.n	8000278 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000272:	6878      	ldr	r0, [r7, #4]
 8000274:	f002 fc2a 	bl	8002acc <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	6812      	ldr	r2, [r2, #0]
 8000280:	6812      	ldr	r2, [r2, #0]
 8000282:	f022 0202 	bic.w	r2, r2, #2
 8000286:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000288:	f7ff ffb8 	bl	80001fc <HAL_GetTick>
 800028c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800028e:	e012      	b.n	80002b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000290:	f7ff ffb4 	bl	80001fc <HAL_GetTick>
 8000294:	4602      	mov	r2, r0
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	1ad3      	subs	r3, r2, r3
 800029a:	2b0a      	cmp	r3, #10
 800029c:	d90b      	bls.n	80002b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2205      	movs	r2, #5
 80002ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002b2:	2301      	movs	r3, #1
 80002b4:	e0c4      	b.n	8000440 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	f003 0302 	and.w	r3, r3, #2
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1e5      	bne.n	8000290 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	6812      	ldr	r2, [r2, #0]
 80002cc:	6812      	ldr	r2, [r2, #0]
 80002ce:	f042 0201 	orr.w	r2, r2, #1
 80002d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80002d4:	f7ff ff92 	bl	80001fc <HAL_GetTick>
 80002d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80002da:	e012      	b.n	8000302 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002dc:	f7ff ff8e 	bl	80001fc <HAL_GetTick>
 80002e0:	4602      	mov	r2, r0
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	2b0a      	cmp	r3, #10
 80002e8:	d90b      	bls.n	8000302 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2205      	movs	r2, #5
 80002fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002fe:	2301      	movs	r3, #1
 8000300:	e09e      	b.n	8000440 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	f003 0301 	and.w	r3, r3, #1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d0e5      	beq.n	80002dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	7e1b      	ldrb	r3, [r3, #24]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d108      	bne.n	800032a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	6812      	ldr	r2, [r2, #0]
 8000320:	6812      	ldr	r2, [r2, #0]
 8000322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	e007      	b.n	800033a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	6812      	ldr	r2, [r2, #0]
 8000332:	6812      	ldr	r2, [r2, #0]
 8000334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000338:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	7e5b      	ldrb	r3, [r3, #25]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d108      	bne.n	8000354 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	6812      	ldr	r2, [r2, #0]
 800034a:	6812      	ldr	r2, [r2, #0]
 800034c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	e007      	b.n	8000364 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	6812      	ldr	r2, [r2, #0]
 800035c:	6812      	ldr	r2, [r2, #0]
 800035e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000362:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	7e9b      	ldrb	r3, [r3, #26]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d108      	bne.n	800037e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	6812      	ldr	r2, [r2, #0]
 8000374:	6812      	ldr	r2, [r2, #0]
 8000376:	f042 0220 	orr.w	r2, r2, #32
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	e007      	b.n	800038e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	6812      	ldr	r2, [r2, #0]
 8000386:	6812      	ldr	r2, [r2, #0]
 8000388:	f022 0220 	bic.w	r2, r2, #32
 800038c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	7edb      	ldrb	r3, [r3, #27]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d108      	bne.n	80003a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	6812      	ldr	r2, [r2, #0]
 800039e:	6812      	ldr	r2, [r2, #0]
 80003a0:	f022 0210 	bic.w	r2, r2, #16
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	e007      	b.n	80003b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	6812      	ldr	r2, [r2, #0]
 80003b0:	6812      	ldr	r2, [r2, #0]
 80003b2:	f042 0210 	orr.w	r2, r2, #16
 80003b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	7f1b      	ldrb	r3, [r3, #28]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d108      	bne.n	80003d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	6812      	ldr	r2, [r2, #0]
 80003c8:	6812      	ldr	r2, [r2, #0]
 80003ca:	f042 0208 	orr.w	r2, r2, #8
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	e007      	b.n	80003e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	6812      	ldr	r2, [r2, #0]
 80003da:	6812      	ldr	r2, [r2, #0]
 80003dc:	f022 0208 	bic.w	r2, r2, #8
 80003e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	7f5b      	ldrb	r3, [r3, #29]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d108      	bne.n	80003fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	6812      	ldr	r2, [r2, #0]
 80003f2:	6812      	ldr	r2, [r2, #0]
 80003f4:	f042 0204 	orr.w	r2, r2, #4
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	e007      	b.n	800040c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	6812      	ldr	r2, [r2, #0]
 8000404:	6812      	ldr	r2, [r2, #0]
 8000406:	f022 0204 	bic.w	r2, r2, #4
 800040a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	6891      	ldr	r1, [r2, #8]
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	68d2      	ldr	r2, [r2, #12]
 8000418:	4311      	orrs	r1, r2
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	6912      	ldr	r2, [r2, #16]
 800041e:	4311      	orrs	r1, r2
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	6952      	ldr	r2, [r2, #20]
 8000424:	4311      	orrs	r1, r2
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	6852      	ldr	r2, [r2, #4]
 800042a:	3a01      	subs	r2, #1
 800042c:	430a      	orrs	r2, r1
 800042e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2200      	movs	r2, #0
 8000434:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800043e:	2300      	movs	r3, #0
}
 8000440:	4618      	mov	r0, r3
 8000442:	3710      	adds	r7, #16
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000448:	b480      	push	{r7}
 800044a:	b087      	sub	sp, #28
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800045e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000460:	7cfb      	ldrb	r3, [r7, #19]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d003      	beq.n	800046e <HAL_CAN_ConfigFilter+0x26>
 8000466:	7cfb      	ldrb	r3, [r7, #19]
 8000468:	2b02      	cmp	r3, #2
 800046a:	f040 80aa 	bne.w	80005c2 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000474:	f043 0201 	orr.w	r2, r3, #1
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f003 031f 	and.w	r3, r3, #31
 8000486:	2201      	movs	r2, #1
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	43db      	mvns	r3, r3
 8000498:	401a      	ands	r2, r3
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	69db      	ldr	r3, [r3, #28]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d123      	bne.n	80004f0 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	43db      	mvns	r3, r3
 80004b2:	401a      	ands	r2, r3
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80004ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	3248      	adds	r2, #72	; 0x48
 80004d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80004d8:	683a      	ldr	r2, [r7, #0]
 80004da:	6892      	ldr	r2, [r2, #8]
 80004dc:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80004de:	683a      	ldr	r2, [r7, #0]
 80004e0:	6812      	ldr	r2, [r2, #0]
 80004e2:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80004e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80004e6:	6979      	ldr	r1, [r7, #20]
 80004e8:	3348      	adds	r3, #72	; 0x48
 80004ea:	00db      	lsls	r3, r3, #3
 80004ec:	440b      	add	r3, r1
 80004ee:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	69db      	ldr	r3, [r3, #28]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d122      	bne.n	800053e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	431a      	orrs	r2, r3
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000518:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	3248      	adds	r2, #72	; 0x48
 800051e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000526:	683a      	ldr	r2, [r7, #0]
 8000528:	6892      	ldr	r2, [r2, #8]
 800052a:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800052c:	683a      	ldr	r2, [r7, #0]
 800052e:	68d2      	ldr	r2, [r2, #12]
 8000530:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000532:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000534:	6979      	ldr	r1, [r7, #20]
 8000536:	3348      	adds	r3, #72	; 0x48
 8000538:	00db      	lsls	r3, r3, #3
 800053a:	440b      	add	r3, r1
 800053c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d109      	bne.n	800055a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	43db      	mvns	r3, r3
 8000550:	401a      	ands	r2, r3
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000558:	e007      	b.n	800056a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	431a      	orrs	r2, r3
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	691b      	ldr	r3, [r3, #16]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d109      	bne.n	8000586 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	43db      	mvns	r3, r3
 800057c:	401a      	ands	r2, r3
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000584:	e007      	b.n	8000596 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	431a      	orrs	r2, r3
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	6a1b      	ldr	r3, [r3, #32]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d107      	bne.n	80005ae <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	431a      	orrs	r2, r3
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005b4:	f023 0201 	bic.w	r2, r3, #1
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80005be:	2300      	movs	r3, #0
 80005c0:	e006      	b.n	80005d0 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
  }
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	371c      	adds	r7, #28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr

080005da <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b084      	sub	sp, #16
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d12e      	bne.n	800064c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2202      	movs	r2, #2
 80005f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	6812      	ldr	r2, [r2, #0]
 80005fe:	6812      	ldr	r2, [r2, #0]
 8000600:	f022 0201 	bic.w	r2, r2, #1
 8000604:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000606:	f7ff fdf9 	bl	80001fc <HAL_GetTick>
 800060a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800060c:	e012      	b.n	8000634 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800060e:	f7ff fdf5 	bl	80001fc <HAL_GetTick>
 8000612:	4602      	mov	r2, r0
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	2b0a      	cmp	r3, #10
 800061a:	d90b      	bls.n	8000634 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000620:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2205      	movs	r2, #5
 800062c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000630:	2301      	movs	r3, #1
 8000632:	e012      	b.n	800065a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1e5      	bne.n	800060e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2200      	movs	r2, #0
 8000646:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000648:	2300      	movs	r3, #0
 800064a:	e006      	b.n	800065a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000650:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000658:	2301      	movs	r3, #1
  }
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000662:	b480      	push	{r7}
 8000664:	b087      	sub	sp, #28
 8000666:	af00      	add	r7, sp, #0
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	607a      	str	r2, [r7, #4]
 800066e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000676:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000678:	7dfb      	ldrb	r3, [r7, #23]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d003      	beq.n	8000686 <HAL_CAN_GetRxMessage+0x24>
 800067e:	7dfb      	ldrb	r3, [r7, #23]
 8000680:	2b02      	cmp	r3, #2
 8000682:	f040 80f4 	bne.w	800086e <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d10e      	bne.n	80006aa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	f003 0303 	and.w	r3, r3, #3
 8000696:	2b00      	cmp	r3, #0
 8000698:	d116      	bne.n	80006c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	e0e8      	b.n	800087c <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	691b      	ldr	r3, [r3, #16]
 80006b0:	f003 0303 	and.w	r3, r3, #3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d107      	bne.n	80006c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80006c4:	2301      	movs	r3, #1
 80006c6:	e0d9      	b.n	800087c <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	331b      	adds	r3, #27
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	4413      	add	r3, r2
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f003 0204 	and.w	r2, r3, #4
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d10c      	bne.n	8000700 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	331b      	adds	r3, #27
 80006ee:	011b      	lsls	r3, r3, #4
 80006f0:	4413      	add	r3, r2
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	0d5b      	lsrs	r3, r3, #21
 80006f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	e00b      	b.n	8000718 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	331b      	adds	r3, #27
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	4413      	add	r3, r2
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	08db      	lsrs	r3, r3, #3
 8000710:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	331b      	adds	r3, #27
 8000720:	011b      	lsls	r3, r3, #4
 8000722:	4413      	add	r3, r2
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	085b      	lsrs	r3, r3, #1
 8000728:	f003 0201 	and.w	r2, r3, #1
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	331b      	adds	r3, #27
 8000738:	011b      	lsls	r3, r3, #4
 800073a:	4413      	add	r3, r2
 800073c:	3304      	adds	r3, #4
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f003 020f 	and.w	r2, r3, #15
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	331b      	adds	r3, #27
 8000750:	011b      	lsls	r3, r3, #4
 8000752:	4413      	add	r3, r2
 8000754:	3304      	adds	r3, #4
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	b2da      	uxtb	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	331b      	adds	r3, #27
 8000768:	011b      	lsls	r3, r3, #4
 800076a:	4413      	add	r3, r2
 800076c:	3304      	adds	r3, #4
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	0c1b      	lsrs	r3, r3, #16
 8000772:	b29a      	uxth	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	011b      	lsls	r3, r3, #4
 8000780:	4413      	add	r3, r2
 8000782:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	b2da      	uxtb	r2, r3
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	6811      	ldr	r1, [r2, #0]
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	0112      	lsls	r2, r2, #4
 800079a:	440a      	add	r2, r1
 800079c:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 80007a0:	6812      	ldr	r2, [r2, #0]
 80007a2:	0a12      	lsrs	r2, r2, #8
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	3302      	adds	r3, #2
 80007ac:	68fa      	ldr	r2, [r7, #12]
 80007ae:	6811      	ldr	r1, [r2, #0]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	0112      	lsls	r2, r2, #4
 80007b4:	440a      	add	r2, r1
 80007b6:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 80007ba:	6812      	ldr	r2, [r2, #0]
 80007bc:	0c12      	lsrs	r2, r2, #16
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	3303      	adds	r3, #3
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	6811      	ldr	r1, [r2, #0]
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	0112      	lsls	r2, r2, #4
 80007ce:	440a      	add	r2, r1
 80007d0:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 80007d4:	6812      	ldr	r2, [r2, #0]
 80007d6:	0e12      	lsrs	r2, r2, #24
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	3304      	adds	r3, #4
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	6811      	ldr	r1, [r2, #0]
 80007e4:	68ba      	ldr	r2, [r7, #8]
 80007e6:	0112      	lsls	r2, r2, #4
 80007e8:	440a      	add	r2, r1
 80007ea:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80007ee:	6812      	ldr	r2, [r2, #0]
 80007f0:	b2d2      	uxtb	r2, r2
 80007f2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	3305      	adds	r3, #5
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	6811      	ldr	r1, [r2, #0]
 80007fc:	68ba      	ldr	r2, [r7, #8]
 80007fe:	0112      	lsls	r2, r2, #4
 8000800:	440a      	add	r2, r1
 8000802:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000806:	6812      	ldr	r2, [r2, #0]
 8000808:	0a12      	lsrs	r2, r2, #8
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	3306      	adds	r3, #6
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	6811      	ldr	r1, [r2, #0]
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	0112      	lsls	r2, r2, #4
 800081a:	440a      	add	r2, r1
 800081c:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000820:	6812      	ldr	r2, [r2, #0]
 8000822:	0c12      	lsrs	r2, r2, #16
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	3307      	adds	r3, #7
 800082c:	68fa      	ldr	r2, [r7, #12]
 800082e:	6811      	ldr	r1, [r2, #0]
 8000830:	68ba      	ldr	r2, [r7, #8]
 8000832:	0112      	lsls	r2, r2, #4
 8000834:	440a      	add	r2, r1
 8000836:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 800083a:	6812      	ldr	r2, [r2, #0]
 800083c:	0e12      	lsrs	r2, r2, #24
 800083e:	b2d2      	uxtb	r2, r2
 8000840:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d108      	bne.n	800085a <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	68fa      	ldr	r2, [r7, #12]
 800084e:	6812      	ldr	r2, [r2, #0]
 8000850:	68d2      	ldr	r2, [r2, #12]
 8000852:	f042 0220 	orr.w	r2, r2, #32
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	e007      	b.n	800086a <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	6812      	ldr	r2, [r2, #0]
 8000862:	6912      	ldr	r2, [r2, #16]
 8000864:	f042 0220 	orr.w	r2, r2, #32
 8000868:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800086a:	2300      	movs	r3, #0
 800086c:	e006      	b.n	800087c <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000872:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
  }
}
 800087c:	4618      	mov	r0, r3
 800087e:	371c      	adds	r7, #28
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr

08000886 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000886:	b480      	push	{r7}
 8000888:	b085      	sub	sp, #20
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
 800088e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000896:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d002      	beq.n	80008a4 <HAL_CAN_ActivateNotification+0x1e>
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d109      	bne.n	80008b8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	6812      	ldr	r2, [r2, #0]
 80008ac:	6951      	ldr	r1, [r2, #20]
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	430a      	orrs	r2, r1
 80008b2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80008b4:	2300      	movs	r3, #0
 80008b6:	e006      	b.n	80008c6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80008c4:	2301      	movs	r3, #1
  }
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	691b      	ldr	r3, [r3, #16]
 8000902:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800090c:	6a3b      	ldr	r3, [r7, #32]
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	2b00      	cmp	r3, #0
 8000914:	d07c      	beq.n	8000a10 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	2b00      	cmp	r3, #0
 800091e:	d023      	beq.n	8000968 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2201      	movs	r2, #1
 8000926:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	2b00      	cmp	r3, #0
 8000930:	d003      	beq.n	800093a <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f000 f97d 	bl	8000c32 <HAL_CAN_TxMailbox0CompleteCallback>
 8000938:	e016      	b.n	8000968 <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800093a:	69bb      	ldr	r3, [r7, #24]
 800093c:	f003 0304 	and.w	r3, r3, #4
 8000940:	2b00      	cmp	r3, #0
 8000942:	d004      	beq.n	800094e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000946:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
 800094c:	e00c      	b.n	8000968 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	f003 0308 	and.w	r3, r3, #8
 8000954:	2b00      	cmp	r3, #0
 8000956:	d004      	beq.n	8000962 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
 8000960:	e002      	b.n	8000968 <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f980 	bl	8000c68 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800096e:	2b00      	cmp	r3, #0
 8000970:	d024      	beq.n	80009bc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f44f 7280 	mov.w	r2, #256	; 0x100
 800097a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000982:	2b00      	cmp	r3, #0
 8000984:	d003      	beq.n	800098e <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f000 f95c 	bl	8000c44 <HAL_CAN_TxMailbox1CompleteCallback>
 800098c:	e016      	b.n	80009bc <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000994:	2b00      	cmp	r3, #0
 8000996:	d004      	beq.n	80009a2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
 80009a0:	e00c      	b.n	80009bc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d004      	beq.n	80009b6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80009ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
 80009b4:	e002      	b.n	80009bc <HAL_CAN_IRQHandler+0xec>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f000 f95f 	bl	8000c7a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d024      	beq.n	8000a10 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f000 f93b 	bl	8000c56 <HAL_CAN_TxMailbox2CompleteCallback>
 80009e0:	e016      	b.n	8000a10 <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d004      	beq.n	80009f6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
 80009f4:	e00c      	b.n	8000a10 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d004      	beq.n	8000a0a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
 8000a08:	e002      	b.n	8000a10 <HAL_CAN_IRQHandler+0x140>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f93e 	bl	8000c8c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000a10:	6a3b      	ldr	r3, [r7, #32]
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d00c      	beq.n	8000a34 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	f003 0310 	and.w	r3, r3, #16
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d007      	beq.n	8000a34 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2210      	movs	r2, #16
 8000a32:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000a34:	6a3b      	ldr	r3, [r7, #32]
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d00b      	beq.n	8000a56 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	f003 0308 	and.w	r3, r3, #8
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d006      	beq.n	8000a56 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f924 	bl	8000c9e <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000a56:	6a3b      	ldr	r3, [r7, #32]
 8000a58:	f003 0302 	and.w	r3, r3, #2
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d009      	beq.n	8000a74 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	f003 0303 	and.w	r3, r3, #3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d002      	beq.n	8000a74 <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f001 ffea 	bl	8002a48 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000a74:	6a3b      	ldr	r3, [r7, #32]
 8000a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00c      	beq.n	8000a98 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	f003 0310 	and.w	r3, r3, #16
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d007      	beq.n	8000a98 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2210      	movs	r2, #16
 8000a96:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000a98:	6a3b      	ldr	r3, [r7, #32]
 8000a9a:	f003 0320 	and.w	r3, r3, #32
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d00b      	beq.n	8000aba <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	f003 0308 	and.w	r3, r3, #8
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d006      	beq.n	8000aba <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2208      	movs	r2, #8
 8000ab2:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f000 f904 	bl	8000cc2 <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	f003 0310 	and.w	r3, r3, #16
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d009      	beq.n	8000ad8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	f003 0303 	and.w	r3, r3, #3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d002      	beq.n	8000ad8 <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 f8ec 	bl	8000cb0 <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
 8000ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d00b      	beq.n	8000afa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	f003 0310 	and.w	r3, r3, #16
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d006      	beq.n	8000afa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2210      	movs	r2, #16
 8000af2:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f000 f8ed 	bl	8000cd4 <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d00b      	beq.n	8000b1c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d006      	beq.n	8000b1c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2208      	movs	r2, #8
 8000b14:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f000 f8e5 	bl	8000ce6 <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000b1c:	6a3b      	ldr	r3, [r7, #32]
 8000b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d075      	beq.n	8000c12 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d06c      	beq.n	8000c0a <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000b30:	6a3b      	ldr	r3, [r7, #32]
 8000b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d008      	beq.n	8000b4c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d003      	beq.n	8000b4c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000b4c:	6a3b      	ldr	r3, [r7, #32]
 8000b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d008      	beq.n	8000b68 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	f043 0302 	orr.w	r3, r3, #2
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000b68:	6a3b      	ldr	r3, [r7, #32]
 8000b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d008      	beq.n	8000b84 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000b84:	6a3b      	ldr	r3, [r7, #32]
 8000b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d03d      	beq.n	8000c0a <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d038      	beq.n	8000c0a <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000b9e:	2b30      	cmp	r3, #48	; 0x30
 8000ba0:	d017      	beq.n	8000bd2 <HAL_CAN_IRQHandler+0x302>
 8000ba2:	2b30      	cmp	r3, #48	; 0x30
 8000ba4:	d804      	bhi.n	8000bb0 <HAL_CAN_IRQHandler+0x2e0>
 8000ba6:	2b10      	cmp	r3, #16
 8000ba8:	d009      	beq.n	8000bbe <HAL_CAN_IRQHandler+0x2ee>
 8000baa:	2b20      	cmp	r3, #32
 8000bac:	d00c      	beq.n	8000bc8 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000bae:	e024      	b.n	8000bfa <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000bb0:	2b50      	cmp	r3, #80	; 0x50
 8000bb2:	d018      	beq.n	8000be6 <HAL_CAN_IRQHandler+0x316>
 8000bb4:	2b60      	cmp	r3, #96	; 0x60
 8000bb6:	d01b      	beq.n	8000bf0 <HAL_CAN_IRQHandler+0x320>
 8000bb8:	2b40      	cmp	r3, #64	; 0x40
 8000bba:	d00f      	beq.n	8000bdc <HAL_CAN_IRQHandler+0x30c>
            break;
 8000bbc:	e01d      	b.n	8000bfa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	f043 0308 	orr.w	r3, r3, #8
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000bc6:	e018      	b.n	8000bfa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000bd0:	e013      	b.n	8000bfa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	f043 0320 	orr.w	r3, r3, #32
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000bda:	e00e      	b.n	8000bfa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000be4:	e009      	b.n	8000bfa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000bee:	e004      	b.n	8000bfa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000bf8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	6812      	ldr	r2, [r2, #0]
 8000c02:	6992      	ldr	r2, [r2, #24]
 8000c04:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000c08:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2204      	movs	r2, #4
 8000c10:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d008      	beq.n	8000c2a <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f000 f867 	bl	8000cf8 <HAL_CAN_ErrorCallback>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	; 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr

08000c56 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr

08000c7a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr

08000c9e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr

08000cc2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr

08000ce6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
	...

08000d0c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <NVIC_EnableIRQ+0x2c>)
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	095b      	lsrs	r3, r3, #5
 8000d82:	79fa      	ldrb	r2, [r7, #7]
 8000d84:	f002 021f 	and.w	r2, r2, #31
 8000d88:	2001      	movs	r0, #1
 8000d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	da0b      	bge.n	8000dcc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db4:	490d      	ldr	r1, [pc, #52]	; (8000dec <NVIC_SetPriority+0x4c>)
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f003 030f 	and.w	r3, r3, #15
 8000dbc:	3b04      	subs	r3, #4
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dca:	e009      	b.n	8000de0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	4908      	ldr	r1, [pc, #32]	; (8000df0 <NVIC_SetPriority+0x50>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	683a      	ldr	r2, [r7, #0]
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f1c3 0307 	rsb	r3, r3, #7
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	bf28      	it	cs
 8000e12:	2304      	movcs	r3, #4
 8000e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	2b06      	cmp	r3, #6
 8000e1c:	d902      	bls.n	8000e24 <NVIC_EncodePriority+0x30>
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3b03      	subs	r3, #3
 8000e22:	e000      	b.n	8000e26 <NVIC_EncodePriority+0x32>
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	2201      	movs	r2, #1
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	1e5a      	subs	r2, r3, #1
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	401a      	ands	r2, r3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	1e59      	subs	r1, r3, #1
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e64:	d301      	bcc.n	8000e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00f      	b.n	8000e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <SysTick_Config+0x40>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e72:	210f      	movs	r1, #15
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e78:	f7ff ff92 	bl	8000da0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <SysTick_Config+0x40>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <SysTick_Config+0x40>)
 8000e84:	2207      	movs	r2, #7
 8000e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ff33 	bl	8000d0c <NVIC_SetPriorityGrouping>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec0:	f7ff ff48 	bl	8000d54 <NVIC_GetPriorityGrouping>
 8000ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	6978      	ldr	r0, [r7, #20]
 8000ecc:	f7ff ff92 	bl	8000df4 <NVIC_EncodePriority>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff61 	bl	8000da0 <NVIC_SetPriority>
}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff3b 	bl	8000d70 <NVIC_EnableIRQ>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffa2 	bl	8000e54 <SysTick_Config>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b08b      	sub	sp, #44	; 0x2c
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f3e:	e127      	b.n	8001190 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000f40:	2201      	movs	r2, #1
 8000f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	f040 8116 	bne.w	800118a <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b12      	cmp	r3, #18
 8000f64:	d034      	beq.n	8000fd0 <HAL_GPIO_Init+0xb4>
 8000f66:	2b12      	cmp	r3, #18
 8000f68:	d80d      	bhi.n	8000f86 <HAL_GPIO_Init+0x6a>
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d02b      	beq.n	8000fc6 <HAL_GPIO_Init+0xaa>
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d804      	bhi.n	8000f7c <HAL_GPIO_Init+0x60>
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d031      	beq.n	8000fda <HAL_GPIO_Init+0xbe>
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d01c      	beq.n	8000fb4 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f7a:	e048      	b.n	800100e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d043      	beq.n	8001008 <HAL_GPIO_Init+0xec>
 8000f80:	2b11      	cmp	r3, #17
 8000f82:	d01b      	beq.n	8000fbc <HAL_GPIO_Init+0xa0>
          break;
 8000f84:	e043      	b.n	800100e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000f86:	4a87      	ldr	r2, [pc, #540]	; (80011a4 <HAL_GPIO_Init+0x288>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d026      	beq.n	8000fda <HAL_GPIO_Init+0xbe>
 8000f8c:	4a85      	ldr	r2, [pc, #532]	; (80011a4 <HAL_GPIO_Init+0x288>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d806      	bhi.n	8000fa0 <HAL_GPIO_Init+0x84>
 8000f92:	4a85      	ldr	r2, [pc, #532]	; (80011a8 <HAL_GPIO_Init+0x28c>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d020      	beq.n	8000fda <HAL_GPIO_Init+0xbe>
 8000f98:	4a84      	ldr	r2, [pc, #528]	; (80011ac <HAL_GPIO_Init+0x290>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d01d      	beq.n	8000fda <HAL_GPIO_Init+0xbe>
          break;
 8000f9e:	e036      	b.n	800100e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000fa0:	4a83      	ldr	r2, [pc, #524]	; (80011b0 <HAL_GPIO_Init+0x294>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d019      	beq.n	8000fda <HAL_GPIO_Init+0xbe>
 8000fa6:	4a83      	ldr	r2, [pc, #524]	; (80011b4 <HAL_GPIO_Init+0x298>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d016      	beq.n	8000fda <HAL_GPIO_Init+0xbe>
 8000fac:	4a82      	ldr	r2, [pc, #520]	; (80011b8 <HAL_GPIO_Init+0x29c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d013      	beq.n	8000fda <HAL_GPIO_Init+0xbe>
          break;
 8000fb2:	e02c      	b.n	800100e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	623b      	str	r3, [r7, #32]
          break;
 8000fba:	e028      	b.n	800100e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	623b      	str	r3, [r7, #32]
          break;
 8000fc4:	e023      	b.n	800100e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	3308      	adds	r3, #8
 8000fcc:	623b      	str	r3, [r7, #32]
          break;
 8000fce:	e01e      	b.n	800100e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	330c      	adds	r3, #12
 8000fd6:	623b      	str	r3, [r7, #32]
          break;
 8000fd8:	e019      	b.n	800100e <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d102      	bne.n	8000fe8 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	623b      	str	r3, [r7, #32]
          break;
 8000fe6:	e012      	b.n	800100e <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d105      	bne.n	8000ffc <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69fa      	ldr	r2, [r7, #28]
 8000ff8:	611a      	str	r2, [r3, #16]
          break;
 8000ffa:	e008      	b.n	800100e <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	615a      	str	r2, [r3, #20]
          break;
 8001006:	e002      	b.n	800100e <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
          break;
 800100c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	2bff      	cmp	r3, #255	; 0xff
 8001012:	d801      	bhi.n	8001018 <HAL_GPIO_Init+0xfc>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	e001      	b.n	800101c <HAL_GPIO_Init+0x100>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3304      	adds	r3, #4
 800101c:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	2bff      	cmp	r3, #255	; 0xff
 8001022:	d802      	bhi.n	800102a <HAL_GPIO_Init+0x10e>
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	e002      	b.n	8001030 <HAL_GPIO_Init+0x114>
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	3b08      	subs	r3, #8
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	210f      	movs	r1, #15
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	401a      	ands	r2, r3
 8001042:	6a39      	ldr	r1, [r7, #32]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	431a      	orrs	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 8096 	beq.w	800118a <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800105e:	4a57      	ldr	r2, [pc, #348]	; (80011bc <HAL_GPIO_Init+0x2a0>)
 8001060:	4b56      	ldr	r3, [pc, #344]	; (80011bc <HAL_GPIO_Init+0x2a0>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6193      	str	r3, [r2, #24]
 800106a:	4b54      	ldr	r3, [pc, #336]	; (80011bc <HAL_GPIO_Init+0x2a0>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8001076:	4a52      	ldr	r2, [pc, #328]	; (80011c0 <HAL_GPIO_Init+0x2a4>)
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	3302      	adds	r3, #2
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	220f      	movs	r2, #15
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	4013      	ands	r3, r2
 8001098:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a49      	ldr	r2, [pc, #292]	; (80011c4 <HAL_GPIO_Init+0x2a8>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d013      	beq.n	80010ca <HAL_GPIO_Init+0x1ae>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a48      	ldr	r2, [pc, #288]	; (80011c8 <HAL_GPIO_Init+0x2ac>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d00d      	beq.n	80010c6 <HAL_GPIO_Init+0x1aa>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a47      	ldr	r2, [pc, #284]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d007      	beq.n	80010c2 <HAL_GPIO_Init+0x1a6>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a46      	ldr	r2, [pc, #280]	; (80011d0 <HAL_GPIO_Init+0x2b4>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d101      	bne.n	80010be <HAL_GPIO_Init+0x1a2>
 80010ba:	2303      	movs	r3, #3
 80010bc:	e006      	b.n	80010cc <HAL_GPIO_Init+0x1b0>
 80010be:	2304      	movs	r3, #4
 80010c0:	e004      	b.n	80010cc <HAL_GPIO_Init+0x1b0>
 80010c2:	2302      	movs	r3, #2
 80010c4:	e002      	b.n	80010cc <HAL_GPIO_Init+0x1b0>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <HAL_GPIO_Init+0x1b0>
 80010ca:	2300      	movs	r3, #0
 80010cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ce:	f002 0203 	and.w	r2, r2, #3
 80010d2:	0092      	lsls	r2, r2, #2
 80010d4:	4093      	lsls	r3, r2
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	4313      	orrs	r3, r2
 80010da:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80010dc:	4938      	ldr	r1, [pc, #224]	; (80011c0 <HAL_GPIO_Init+0x2a4>)
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	3302      	adds	r3, #2
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d006      	beq.n	8001104 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010f6:	4937      	ldr	r1, [pc, #220]	; (80011d4 <HAL_GPIO_Init+0x2b8>)
 80010f8:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <HAL_GPIO_Init+0x2b8>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	600b      	str	r3, [r1, #0]
 8001102:	e006      	b.n	8001112 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001104:	4933      	ldr	r1, [pc, #204]	; (80011d4 <HAL_GPIO_Init+0x2b8>)
 8001106:	4b33      	ldr	r3, [pc, #204]	; (80011d4 <HAL_GPIO_Init+0x2b8>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	43db      	mvns	r3, r3
 800110e:	4013      	ands	r3, r2
 8001110:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d006      	beq.n	800112c <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800111e:	492d      	ldr	r1, [pc, #180]	; (80011d4 <HAL_GPIO_Init+0x2b8>)
 8001120:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <HAL_GPIO_Init+0x2b8>)
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	604b      	str	r3, [r1, #4]
 800112a:	e006      	b.n	800113a <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800112c:	4929      	ldr	r1, [pc, #164]	; (80011d4 <HAL_GPIO_Init+0x2b8>)
 800112e:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <HAL_GPIO_Init+0x2b8>)
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	43db      	mvns	r3, r3
 8001136:	4013      	ands	r3, r2
 8001138:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d006      	beq.n	8001154 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001146:	4923      	ldr	r1, [pc, #140]	; (80011d4 <HAL_GPIO_Init+0x2b8>)
 8001148:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <HAL_GPIO_Init+0x2b8>)
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	608b      	str	r3, [r1, #8]
 8001152:	e006      	b.n	8001162 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001154:	491f      	ldr	r1, [pc, #124]	; (80011d4 <HAL_GPIO_Init+0x2b8>)
 8001156:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_GPIO_Init+0x2b8>)
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	43db      	mvns	r3, r3
 800115e:	4013      	ands	r3, r2
 8001160:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d006      	beq.n	800117c <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800116e:	4919      	ldr	r1, [pc, #100]	; (80011d4 <HAL_GPIO_Init+0x2b8>)
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_GPIO_Init+0x2b8>)
 8001172:	68da      	ldr	r2, [r3, #12]
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	60cb      	str	r3, [r1, #12]
 800117a:	e006      	b.n	800118a <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800117c:	4915      	ldr	r1, [pc, #84]	; (80011d4 <HAL_GPIO_Init+0x2b8>)
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_GPIO_Init+0x2b8>)
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	43db      	mvns	r3, r3
 8001186:	4013      	ands	r3, r2
 8001188:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	3301      	adds	r3, #1
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	2b0f      	cmp	r3, #15
 8001194:	f67f aed4 	bls.w	8000f40 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001198:	bf00      	nop
 800119a:	372c      	adds	r7, #44	; 0x2c
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	10210000 	.word	0x10210000
 80011a8:	10110000 	.word	0x10110000
 80011ac:	10120000 	.word	0x10120000
 80011b0:	10310000 	.word	0x10310000
 80011b4:	10320000 	.word	0x10320000
 80011b8:	10220000 	.word	0x10220000
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010000 	.word	0x40010000
 80011c4:	40010800 	.word	0x40010800
 80011c8:	40010c00 	.word	0x40010c00
 80011cc:	40011000 	.word	0x40011000
 80011d0:	40011400 	.word	0x40011400
 80011d4:	40010400 	.word	0x40010400

080011d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
 80011e4:	4613      	mov	r3, r2
 80011e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011e8:	787b      	ldrb	r3, [r7, #1]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f4:	e003      	b.n	80011fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	041a      	lsls	r2, r3, #16
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	611a      	str	r2, [r3, #16]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001214:	695a      	ldr	r2, [r3, #20]
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	4013      	ands	r3, r2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	4618      	mov	r0, r3
 8001228:	f001 fbea 	bl	8002a00 <HAL_GPIO_EXTI_Callback>
  }
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40010400 	.word	0x40010400

08001238 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 8087 	beq.w	8001360 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001252:	4b92      	ldr	r3, [pc, #584]	; (800149c <HAL_RCC_OscConfig+0x264>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b04      	cmp	r3, #4
 800125c:	d00c      	beq.n	8001278 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800125e:	4b8f      	ldr	r3, [pc, #572]	; (800149c <HAL_RCC_OscConfig+0x264>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b08      	cmp	r3, #8
 8001268:	d112      	bne.n	8001290 <HAL_RCC_OscConfig+0x58>
 800126a:	4b8c      	ldr	r3, [pc, #560]	; (800149c <HAL_RCC_OscConfig+0x264>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001276:	d10b      	bne.n	8001290 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	4b88      	ldr	r3, [pc, #544]	; (800149c <HAL_RCC_OscConfig+0x264>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d06c      	beq.n	800135e <HAL_RCC_OscConfig+0x126>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d168      	bne.n	800135e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e22d      	b.n	80016ec <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001298:	d106      	bne.n	80012a8 <HAL_RCC_OscConfig+0x70>
 800129a:	4a80      	ldr	r2, [pc, #512]	; (800149c <HAL_RCC_OscConfig+0x264>)
 800129c:	4b7f      	ldr	r3, [pc, #508]	; (800149c <HAL_RCC_OscConfig+0x264>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e02e      	b.n	8001306 <HAL_RCC_OscConfig+0xce>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10c      	bne.n	80012ca <HAL_RCC_OscConfig+0x92>
 80012b0:	4a7a      	ldr	r2, [pc, #488]	; (800149c <HAL_RCC_OscConfig+0x264>)
 80012b2:	4b7a      	ldr	r3, [pc, #488]	; (800149c <HAL_RCC_OscConfig+0x264>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	4a77      	ldr	r2, [pc, #476]	; (800149c <HAL_RCC_OscConfig+0x264>)
 80012be:	4b77      	ldr	r3, [pc, #476]	; (800149c <HAL_RCC_OscConfig+0x264>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	e01d      	b.n	8001306 <HAL_RCC_OscConfig+0xce>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d2:	d10c      	bne.n	80012ee <HAL_RCC_OscConfig+0xb6>
 80012d4:	4a71      	ldr	r2, [pc, #452]	; (800149c <HAL_RCC_OscConfig+0x264>)
 80012d6:	4b71      	ldr	r3, [pc, #452]	; (800149c <HAL_RCC_OscConfig+0x264>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4a6e      	ldr	r2, [pc, #440]	; (800149c <HAL_RCC_OscConfig+0x264>)
 80012e2:	4b6e      	ldr	r3, [pc, #440]	; (800149c <HAL_RCC_OscConfig+0x264>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	e00b      	b.n	8001306 <HAL_RCC_OscConfig+0xce>
 80012ee:	4a6b      	ldr	r2, [pc, #428]	; (800149c <HAL_RCC_OscConfig+0x264>)
 80012f0:	4b6a      	ldr	r3, [pc, #424]	; (800149c <HAL_RCC_OscConfig+0x264>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4a68      	ldr	r2, [pc, #416]	; (800149c <HAL_RCC_OscConfig+0x264>)
 80012fc:	4b67      	ldr	r3, [pc, #412]	; (800149c <HAL_RCC_OscConfig+0x264>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001304:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d013      	beq.n	8001336 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130e:	f7fe ff75 	bl	80001fc <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001316:	f7fe ff71 	bl	80001fc <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b64      	cmp	r3, #100	; 0x64
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e1e1      	b.n	80016ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001328:	4b5c      	ldr	r3, [pc, #368]	; (800149c <HAL_RCC_OscConfig+0x264>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0xde>
 8001334:	e014      	b.n	8001360 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001336:	f7fe ff61 	bl	80001fc <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800133e:	f7fe ff5d 	bl	80001fc <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b64      	cmp	r3, #100	; 0x64
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e1cd      	b.n	80016ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001350:	4b52      	ldr	r3, [pc, #328]	; (800149c <HAL_RCC_OscConfig+0x264>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f0      	bne.n	800133e <HAL_RCC_OscConfig+0x106>
 800135c:	e000      	b.n	8001360 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d063      	beq.n	8001434 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800136c:	4b4b      	ldr	r3, [pc, #300]	; (800149c <HAL_RCC_OscConfig+0x264>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 030c 	and.w	r3, r3, #12
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00b      	beq.n	8001390 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001378:	4b48      	ldr	r3, [pc, #288]	; (800149c <HAL_RCC_OscConfig+0x264>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	2b08      	cmp	r3, #8
 8001382:	d11c      	bne.n	80013be <HAL_RCC_OscConfig+0x186>
 8001384:	4b45      	ldr	r3, [pc, #276]	; (800149c <HAL_RCC_OscConfig+0x264>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d116      	bne.n	80013be <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001390:	4b42      	ldr	r3, [pc, #264]	; (800149c <HAL_RCC_OscConfig+0x264>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_OscConfig+0x170>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d001      	beq.n	80013a8 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e1a1      	b.n	80016ec <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a8:	493c      	ldr	r1, [pc, #240]	; (800149c <HAL_RCC_OscConfig+0x264>)
 80013aa:	4b3c      	ldr	r3, [pc, #240]	; (800149c <HAL_RCC_OscConfig+0x264>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	4313      	orrs	r3, r2
 80013ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013bc:	e03a      	b.n	8001434 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d020      	beq.n	8001408 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c6:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <HAL_RCC_OscConfig+0x268>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7fe ff16 	bl	80001fc <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d4:	f7fe ff12 	bl	80001fc <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e182      	b.n	80016ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e6:	4b2d      	ldr	r3, [pc, #180]	; (800149c <HAL_RCC_OscConfig+0x264>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f2:	492a      	ldr	r1, [pc, #168]	; (800149c <HAL_RCC_OscConfig+0x264>)
 80013f4:	4b29      	ldr	r3, [pc, #164]	; (800149c <HAL_RCC_OscConfig+0x264>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
 8001406:	e015      	b.n	8001434 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001408:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <HAL_RCC_OscConfig+0x268>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7fe fef5 	bl	80001fc <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001416:	f7fe fef1 	bl	80001fc <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e161      	b.n	80016ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001428:	4b1c      	ldr	r3, [pc, #112]	; (800149c <HAL_RCC_OscConfig+0x264>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f0      	bne.n	8001416 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b00      	cmp	r3, #0
 800143e:	d039      	beq.n	80014b4 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d019      	beq.n	800147c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_RCC_OscConfig+0x26c>)
 800144a:	2201      	movs	r2, #1
 800144c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144e:	f7fe fed5 	bl	80001fc <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001456:	f7fe fed1 	bl	80001fc <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e141      	b.n	80016ec <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <HAL_RCC_OscConfig+0x264>)
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001474:	2001      	movs	r0, #1
 8001476:	f000 fab1 	bl	80019dc <RCC_Delay>
 800147a:	e01b      	b.n	80014b4 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_RCC_OscConfig+0x26c>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001482:	f7fe febb 	bl	80001fc <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001488:	e00e      	b.n	80014a8 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148a:	f7fe feb7 	bl	80001fc <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d907      	bls.n	80014a8 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e127      	b.n	80016ec <HAL_RCC_OscConfig+0x4b4>
 800149c:	40021000 	.word	0x40021000
 80014a0:	42420000 	.word	0x42420000
 80014a4:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a8:	4b92      	ldr	r3, [pc, #584]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1ea      	bne.n	800148a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 80a6 	beq.w	800160e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c2:	2300      	movs	r3, #0
 80014c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014c6:	4b8b      	ldr	r3, [pc, #556]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10d      	bne.n	80014ee <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d2:	4a88      	ldr	r2, [pc, #544]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 80014d4:	4b87      	ldr	r3, [pc, #540]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014dc:	61d3      	str	r3, [r2, #28]
 80014de:	4b85      	ldr	r3, [pc, #532]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014ea:	2301      	movs	r3, #1
 80014ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ee:	4b82      	ldr	r3, [pc, #520]	; (80016f8 <HAL_RCC_OscConfig+0x4c0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d118      	bne.n	800152c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014fa:	4a7f      	ldr	r2, [pc, #508]	; (80016f8 <HAL_RCC_OscConfig+0x4c0>)
 80014fc:	4b7e      	ldr	r3, [pc, #504]	; (80016f8 <HAL_RCC_OscConfig+0x4c0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001506:	f7fe fe79 	bl	80001fc <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800150e:	f7fe fe75 	bl	80001fc <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b64      	cmp	r3, #100	; 0x64
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e0e5      	b.n	80016ec <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001520:	4b75      	ldr	r3, [pc, #468]	; (80016f8 <HAL_RCC_OscConfig+0x4c0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0f0      	beq.n	800150e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d106      	bne.n	8001542 <HAL_RCC_OscConfig+0x30a>
 8001534:	4a6f      	ldr	r2, [pc, #444]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 8001536:	4b6f      	ldr	r3, [pc, #444]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6213      	str	r3, [r2, #32]
 8001540:	e02d      	b.n	800159e <HAL_RCC_OscConfig+0x366>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10c      	bne.n	8001564 <HAL_RCC_OscConfig+0x32c>
 800154a:	4a6a      	ldr	r2, [pc, #424]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 800154c:	4b69      	ldr	r3, [pc, #420]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	6213      	str	r3, [r2, #32]
 8001556:	4a67      	ldr	r2, [pc, #412]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 8001558:	4b66      	ldr	r3, [pc, #408]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	f023 0304 	bic.w	r3, r3, #4
 8001560:	6213      	str	r3, [r2, #32]
 8001562:	e01c      	b.n	800159e <HAL_RCC_OscConfig+0x366>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	2b05      	cmp	r3, #5
 800156a:	d10c      	bne.n	8001586 <HAL_RCC_OscConfig+0x34e>
 800156c:	4a61      	ldr	r2, [pc, #388]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 800156e:	4b61      	ldr	r3, [pc, #388]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	6213      	str	r3, [r2, #32]
 8001578:	4a5e      	ldr	r2, [pc, #376]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 800157a:	4b5e      	ldr	r3, [pc, #376]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6213      	str	r3, [r2, #32]
 8001584:	e00b      	b.n	800159e <HAL_RCC_OscConfig+0x366>
 8001586:	4a5b      	ldr	r2, [pc, #364]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 8001588:	4b5a      	ldr	r3, [pc, #360]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	f023 0301 	bic.w	r3, r3, #1
 8001590:	6213      	str	r3, [r2, #32]
 8001592:	4a58      	ldr	r2, [pc, #352]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 8001594:	4b57      	ldr	r3, [pc, #348]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	f023 0304 	bic.w	r3, r3, #4
 800159c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d015      	beq.n	80015d2 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a6:	f7fe fe29 	bl	80001fc <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ac:	e00a      	b.n	80015c4 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ae:	f7fe fe25 	bl	80001fc <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015bc:	4293      	cmp	r3, r2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e093      	b.n	80016ec <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c4:	4b4b      	ldr	r3, [pc, #300]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0ee      	beq.n	80015ae <HAL_RCC_OscConfig+0x376>
 80015d0:	e014      	b.n	80015fc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d2:	f7fe fe13 	bl	80001fc <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d8:	e00a      	b.n	80015f0 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015da:	f7fe fe0f 	bl	80001fc <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e07d      	b.n	80016ec <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f0:	4b40      	ldr	r3, [pc, #256]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1ee      	bne.n	80015da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d105      	bne.n	800160e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001602:	4a3c      	ldr	r2, [pc, #240]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 8001604:	4b3b      	ldr	r3, [pc, #236]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800160c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d069      	beq.n	80016ea <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001616:	4b37      	ldr	r3, [pc, #220]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b08      	cmp	r3, #8
 8001620:	d061      	beq.n	80016e6 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d146      	bne.n	80016b8 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162a:	4b34      	ldr	r3, [pc, #208]	; (80016fc <HAL_RCC_OscConfig+0x4c4>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7fe fde4 	bl	80001fc <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001638:	f7fe fde0 	bl	80001fc <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e050      	b.n	80016ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800164a:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165e:	d108      	bne.n	8001672 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001660:	4924      	ldr	r1, [pc, #144]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 8001662:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	4313      	orrs	r3, r2
 8001670:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001672:	4820      	ldr	r0, [pc, #128]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a19      	ldr	r1, [r3, #32]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	430b      	orrs	r3, r1
 8001686:	4313      	orrs	r3, r2
 8001688:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <HAL_RCC_OscConfig+0x4c4>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7fe fdb4 	bl	80001fc <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001698:	f7fe fdb0 	bl	80001fc <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e020      	b.n	80016ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0x460>
 80016b6:	e018      	b.n	80016ea <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016be:	f7fe fd9d 	bl	80001fc <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c6:	f7fe fd99 	bl	80001fc <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e009      	b.n	80016ec <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f0      	bne.n	80016c6 <HAL_RCC_OscConfig+0x48e>
 80016e4:	e001      	b.n	80016ea <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40007000 	.word	0x40007000
 80016fc:	42420060 	.word	0x42420060

08001700 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800170e:	4b7e      	ldr	r3, [pc, #504]	; (8001908 <HAL_RCC_ClockConfig+0x208>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0207 	and.w	r2, r3, #7
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d210      	bcs.n	800173e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171c:	497a      	ldr	r1, [pc, #488]	; (8001908 <HAL_RCC_ClockConfig+0x208>)
 800171e:	4b7a      	ldr	r3, [pc, #488]	; (8001908 <HAL_RCC_ClockConfig+0x208>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 0207 	bic.w	r2, r3, #7
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	4313      	orrs	r3, r2
 800172a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800172c:	4b76      	ldr	r3, [pc, #472]	; (8001908 <HAL_RCC_ClockConfig+0x208>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0207 	and.w	r2, r3, #7
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d001      	beq.n	800173e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e0e0      	b.n	8001900 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d020      	beq.n	800178c <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	2b00      	cmp	r3, #0
 8001754:	d005      	beq.n	8001762 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001756:	4a6d      	ldr	r2, [pc, #436]	; (800190c <HAL_RCC_ClockConfig+0x20c>)
 8001758:	4b6c      	ldr	r3, [pc, #432]	; (800190c <HAL_RCC_ClockConfig+0x20c>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001760:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d005      	beq.n	800177a <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800176e:	4a67      	ldr	r2, [pc, #412]	; (800190c <HAL_RCC_ClockConfig+0x20c>)
 8001770:	4b66      	ldr	r3, [pc, #408]	; (800190c <HAL_RCC_ClockConfig+0x20c>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001778:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800177a:	4964      	ldr	r1, [pc, #400]	; (800190c <HAL_RCC_ClockConfig+0x20c>)
 800177c:	4b63      	ldr	r3, [pc, #396]	; (800190c <HAL_RCC_ClockConfig+0x20c>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4313      	orrs	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	d06a      	beq.n	800186e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d107      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a0:	4b5a      	ldr	r3, [pc, #360]	; (800190c <HAL_RCC_ClockConfig+0x20c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d115      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0a7      	b.n	8001900 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d107      	bne.n	80017c8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b8:	4b54      	ldr	r3, [pc, #336]	; (800190c <HAL_RCC_ClockConfig+0x20c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d109      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e09b      	b.n	8001900 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c8:	4b50      	ldr	r3, [pc, #320]	; (800190c <HAL_RCC_ClockConfig+0x20c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e093      	b.n	8001900 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d8:	494c      	ldr	r1, [pc, #304]	; (800190c <HAL_RCC_ClockConfig+0x20c>)
 80017da:	4b4c      	ldr	r3, [pc, #304]	; (800190c <HAL_RCC_ClockConfig+0x20c>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f023 0203 	bic.w	r2, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017ea:	f7fe fd07 	bl	80001fc <HAL_GetTick>
 80017ee:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d112      	bne.n	800181e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017f8:	e00a      	b.n	8001810 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017fa:	f7fe fcff 	bl	80001fc <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	f241 3288 	movw	r2, #5000	; 0x1388
 8001808:	4293      	cmp	r3, r2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e077      	b.n	8001900 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001810:	4b3e      	ldr	r3, [pc, #248]	; (800190c <HAL_RCC_ClockConfig+0x20c>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b04      	cmp	r3, #4
 800181a:	d1ee      	bne.n	80017fa <HAL_RCC_ClockConfig+0xfa>
 800181c:	e027      	b.n	800186e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d11d      	bne.n	8001862 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001826:	e00a      	b.n	800183e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001828:	f7fe fce8 	bl	80001fc <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e060      	b.n	8001900 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800183e:	4b33      	ldr	r3, [pc, #204]	; (800190c <HAL_RCC_ClockConfig+0x20c>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b08      	cmp	r3, #8
 8001848:	d1ee      	bne.n	8001828 <HAL_RCC_ClockConfig+0x128>
 800184a:	e010      	b.n	800186e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184c:	f7fe fcd6 	bl	80001fc <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	; 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e04e      	b.n	8001900 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001862:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_RCC_ClockConfig+0x20c>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1ee      	bne.n	800184c <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800186e:	4b26      	ldr	r3, [pc, #152]	; (8001908 <HAL_RCC_ClockConfig+0x208>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0207 	and.w	r2, r3, #7
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d910      	bls.n	800189e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187c:	4922      	ldr	r1, [pc, #136]	; (8001908 <HAL_RCC_ClockConfig+0x208>)
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <HAL_RCC_ClockConfig+0x208>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 0207 	bic.w	r2, r3, #7
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	4313      	orrs	r3, r2
 800188a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <HAL_RCC_ClockConfig+0x208>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0207 	and.w	r2, r3, #7
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d001      	beq.n	800189e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e030      	b.n	8001900 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d008      	beq.n	80018bc <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018aa:	4918      	ldr	r1, [pc, #96]	; (800190c <HAL_RCC_ClockConfig+0x20c>)
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <HAL_RCC_ClockConfig+0x20c>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d009      	beq.n	80018dc <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018c8:	4910      	ldr	r1, [pc, #64]	; (800190c <HAL_RCC_ClockConfig+0x20c>)
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_RCC_ClockConfig+0x20c>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018dc:	f000 f81c 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 80018e0:	4601      	mov	r1, r0
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_RCC_ClockConfig+0x20c>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	091b      	lsrs	r3, r3, #4
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	4a08      	ldr	r2, [pc, #32]	; (8001910 <HAL_RCC_ClockConfig+0x210>)
 80018ee:	5cd3      	ldrb	r3, [r2, r3]
 80018f0:	fa21 f303 	lsr.w	r3, r1, r3
 80018f4:	4a07      	ldr	r2, [pc, #28]	; (8001914 <HAL_RCC_ClockConfig+0x214>)
 80018f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018f8:	2000      	movs	r0, #0
 80018fa:	f7fe fc3d 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40022000 	.word	0x40022000
 800190c:	40021000 	.word	0x40021000
 8001910:	08002e74 	.word	0x08002e74
 8001914:	20000008 	.word	0x20000008

08001918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001918:	b490      	push	{r4, r7}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800191e:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001920:	1d3c      	adds	r4, r7, #4
 8001922:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001924:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001928:	4b28      	ldr	r3, [pc, #160]	; (80019cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001942:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b04      	cmp	r3, #4
 8001950:	d002      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0x40>
 8001952:	2b08      	cmp	r3, #8
 8001954:	d003      	beq.n	800195e <HAL_RCC_GetSysClockFreq+0x46>
 8001956:	e02d      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001958:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800195a:	623b      	str	r3, [r7, #32]
      break;
 800195c:	e02d      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	0c9b      	lsrs	r3, r3, #18
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800196a:	4413      	add	r3, r2
 800196c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001970:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d013      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	0c5b      	lsrs	r3, r3, #17
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800198a:	4413      	add	r3, r2
 800198c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001990:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001996:	fb02 f203 	mul.w	r2, r2, r3
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
 80019a2:	e004      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	4a0c      	ldr	r2, [pc, #48]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019a8:	fb02 f303 	mul.w	r3, r2, r3
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	623b      	str	r3, [r7, #32]
      break;
 80019b2:	e002      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019b6:	623b      	str	r3, [r7, #32]
      break;
 80019b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ba:	6a3b      	ldr	r3, [r7, #32]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3728      	adds	r7, #40	; 0x28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc90      	pop	{r4, r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	08002e60 	.word	0x08002e60
 80019cc:	08002e70 	.word	0x08002e70
 80019d0:	40021000 	.word	0x40021000
 80019d4:	007a1200 	.word	0x007a1200
 80019d8:	003d0900 	.word	0x003d0900

080019dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <RCC_Delay+0x34>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <RCC_Delay+0x38>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	0a5b      	lsrs	r3, r3, #9
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	fb02 f303 	mul.w	r3, r2, r3
 80019f6:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80019f8:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1e5a      	subs	r2, r3, #1
 80019fe:	60fa      	str	r2, [r7, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f9      	bne.n	80019f8 <RCC_Delay+0x1c>
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000008 	.word	0x20000008
 8001a14:	10624dd3 	.word	0x10624dd3

08001a18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2202      	movs	r2, #2
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e01d      	b.n	8001a9a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d106      	bne.n	8001a78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f001 f892 	bl	8002b9c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3304      	adds	r3, #4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	f000 fa2e 	bl	8001eec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	6839      	ldr	r1, [r7, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 fc1e 	bl	80022f8 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <HAL_TIM_PWM_Start+0x4c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d107      	bne.n	8001ad6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ad0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ad4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	f042 0201 	orr.w	r2, r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40012c00 	.word	0x40012c00

08001af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d122      	bne.n	8001b50 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d11b      	bne.n	8001b50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f06f 0202 	mvn.w	r2, #2
 8001b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f9bc 	bl	8001eb4 <HAL_TIM_IC_CaptureCallback>
 8001b3c:	e005      	b.n	8001b4a <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f9af 	bl	8001ea2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f9be 	bl	8001ec6 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d122      	bne.n	8001ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d11b      	bne.n	8001ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f06f 0204 	mvn.w	r2, #4
 8001b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f992 	bl	8001eb4 <HAL_TIM_IC_CaptureCallback>
 8001b90:	e005      	b.n	8001b9e <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f985 	bl	8001ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f994 	bl	8001ec6 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d122      	bne.n	8001bf8 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d11b      	bne.n	8001bf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f06f 0208 	mvn.w	r2, #8
 8001bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2204      	movs	r2, #4
 8001bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f968 	bl	8001eb4 <HAL_TIM_IC_CaptureCallback>
 8001be4:	e005      	b.n	8001bf2 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f95b 	bl	8001ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f96a 	bl	8001ec6 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	2b10      	cmp	r3, #16
 8001c04:	d122      	bne.n	8001c4c <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 0310 	and.w	r3, r3, #16
 8001c10:	2b10      	cmp	r3, #16
 8001c12:	d11b      	bne.n	8001c4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0210 	mvn.w	r2, #16
 8001c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2208      	movs	r2, #8
 8001c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f93e 	bl	8001eb4 <HAL_TIM_IC_CaptureCallback>
 8001c38:	e005      	b.n	8001c46 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f931 	bl	8001ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f940 	bl	8001ec6 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d10e      	bne.n	8001c78 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d107      	bne.n	8001c78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0201 	mvn.w	r2, #1
 8001c70:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f90c 	bl	8001e90 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c82:	2b80      	cmp	r3, #128	; 0x80
 8001c84:	d10e      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c90:	2b80      	cmp	r3, #128	; 0x80
 8001c92:	d107      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c9c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 fbf1 	bl	8002486 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cae:	2b40      	cmp	r3, #64	; 0x40
 8001cb0:	d10e      	bne.n	8001cd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cbc:	2b40      	cmp	r3, #64	; 0x40
 8001cbe:	d107      	bne.n	8001cd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cc8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f904 	bl	8001ed8 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b20      	cmp	r3, #32
 8001cdc:	d10e      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0320 	and.w	r3, r3, #32
 8001ce8:	2b20      	cmp	r3, #32
 8001cea:	d107      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 0220 	mvn.w	r2, #32
 8001cf4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 fbbc 	bl	8002474 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e0b4      	b.n	8001e88 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b0c      	cmp	r3, #12
 8001d32:	f200 809f 	bhi.w	8001e74 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001d36:	a201      	add	r2, pc, #4	; (adr r2, 8001d3c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3c:	08001d71 	.word	0x08001d71
 8001d40:	08001e75 	.word	0x08001e75
 8001d44:	08001e75 	.word	0x08001e75
 8001d48:	08001e75 	.word	0x08001e75
 8001d4c:	08001db1 	.word	0x08001db1
 8001d50:	08001e75 	.word	0x08001e75
 8001d54:	08001e75 	.word	0x08001e75
 8001d58:	08001e75 	.word	0x08001e75
 8001d5c:	08001df3 	.word	0x08001df3
 8001d60:	08001e75 	.word	0x08001e75
 8001d64:	08001e75 	.word	0x08001e75
 8001d68:	08001e75 	.word	0x08001e75
 8001d6c:	08001e33 	.word	0x08001e33
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f91e 	bl	8001fb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	6992      	ldr	r2, [r2, #24]
 8001d86:	f042 0208 	orr.w	r2, r2, #8
 8001d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	6992      	ldr	r2, [r2, #24]
 8001d96:	f022 0204 	bic.w	r2, r2, #4
 8001d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	6991      	ldr	r1, [r2, #24]
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	6912      	ldr	r2, [r2, #16]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	619a      	str	r2, [r3, #24]
    }
    break;
 8001dae:	e062      	b.n	8001e76 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 f96a 	bl	8002090 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	6992      	ldr	r2, [r2, #24]
 8001dc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	6992      	ldr	r2, [r2, #24]
 8001dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	6991      	ldr	r1, [r2, #24]
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	6912      	ldr	r2, [r2, #16]
 8001dea:	0212      	lsls	r2, r2, #8
 8001dec:	430a      	orrs	r2, r1
 8001dee:	619a      	str	r2, [r3, #24]
    }
    break;
 8001df0:	e041      	b.n	8001e76 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68b9      	ldr	r1, [r7, #8]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 f9b9 	bl	8002170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	69d2      	ldr	r2, [r2, #28]
 8001e08:	f042 0208 	orr.w	r2, r2, #8
 8001e0c:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	69d2      	ldr	r2, [r2, #28]
 8001e18:	f022 0204 	bic.w	r2, r2, #4
 8001e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	6812      	ldr	r2, [r2, #0]
 8001e26:	69d1      	ldr	r1, [r2, #28]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	6912      	ldr	r2, [r2, #16]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	61da      	str	r2, [r3, #28]
    }
    break;
 8001e30:	e021      	b.n	8001e76 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68b9      	ldr	r1, [r7, #8]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 fa09 	bl	8002250 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	69d2      	ldr	r2, [r2, #28]
 8001e48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e4c:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	69d2      	ldr	r2, [r2, #28]
 8001e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	69d1      	ldr	r1, [r2, #28]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	6912      	ldr	r2, [r2, #16]
 8001e6c:	0212      	lsls	r2, r2, #8
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	61da      	str	r2, [r3, #28]
    }
    break;
 8001e72:	e000      	b.n	8001e76 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8001e74:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr
	...

08001eec <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a2a      	ldr	r2, [pc, #168]	; (8001fac <TIM_Base_SetConfig+0xc0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d00b      	beq.n	8001f20 <TIM_Base_SetConfig+0x34>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0e:	d007      	beq.n	8001f20 <TIM_Base_SetConfig+0x34>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a27      	ldr	r2, [pc, #156]	; (8001fb0 <TIM_Base_SetConfig+0xc4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d003      	beq.n	8001f20 <TIM_Base_SetConfig+0x34>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a26      	ldr	r2, [pc, #152]	; (8001fb4 <TIM_Base_SetConfig+0xc8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d108      	bne.n	8001f32 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <TIM_Base_SetConfig+0xc0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00b      	beq.n	8001f52 <TIM_Base_SetConfig+0x66>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f40:	d007      	beq.n	8001f52 <TIM_Base_SetConfig+0x66>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a1a      	ldr	r2, [pc, #104]	; (8001fb0 <TIM_Base_SetConfig+0xc4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d003      	beq.n	8001f52 <TIM_Base_SetConfig+0x66>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a19      	ldr	r2, [pc, #100]	; (8001fb4 <TIM_Base_SetConfig+0xc8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d108      	bne.n	8001f64 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f6a:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a07      	ldr	r2, [pc, #28]	; (8001fac <TIM_Base_SetConfig+0xc0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d103      	bne.n	8001f9c <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	615a      	str	r2, [r3, #20]
}
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	40012c00 	.word	0x40012c00
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	40000800 	.word	0x40000800

08001fb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	f023 0201 	bic.w	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f023 0303 	bic.w	r3, r3, #3
 8001ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f023 0302 	bic.w	r3, r3, #2
 800200c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4313      	orrs	r3, r2
 8002016:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a1c      	ldr	r2, [pc, #112]	; (800208c <TIM_OC1_SetConfig+0xd4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d10c      	bne.n	800203a <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f023 0308 	bic.w	r3, r3, #8
 8002026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	4313      	orrs	r3, r2
 8002030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a13      	ldr	r2, [pc, #76]	; (800208c <TIM_OC1_SetConfig+0xd4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d111      	bne.n	8002066 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4313      	orrs	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	621a      	str	r2, [r3, #32]
}
 8002080:	bf00      	nop
 8002082:	371c      	adds	r7, #28
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40012c00 	.word	0x40012c00

08002090 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	f023 0210 	bic.w	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f023 0320 	bic.w	r3, r3, #32
 80020e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a1d      	ldr	r2, [pc, #116]	; (800216c <TIM_OC2_SetConfig+0xdc>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d10d      	bne.n	8002118 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002116:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a14      	ldr	r2, [pc, #80]	; (800216c <TIM_OC2_SetConfig+0xdc>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d113      	bne.n	8002148 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002126:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800212e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	621a      	str	r2, [r3, #32]
}
 8002162:	bf00      	nop
 8002164:	371c      	adds	r7, #28
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	40012c00 	.word	0x40012c00

08002170 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002170:	b480      	push	{r7}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f023 0303 	bic.w	r3, r3, #3
 80021b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	021b      	lsls	r3, r3, #8
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a1d      	ldr	r2, [pc, #116]	; (800224c <TIM_OC3_SetConfig+0xdc>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d10d      	bne.n	80021f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021f4:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a14      	ldr	r2, [pc, #80]	; (800224c <TIM_OC3_SetConfig+0xdc>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d113      	bne.n	8002226 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800220c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	621a      	str	r2, [r3, #32]
}
 8002240:	bf00      	nop
 8002242:	371c      	adds	r7, #28
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40012c00 	.word	0x40012c00

08002250 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800228a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002292:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022a6:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	031b      	lsls	r3, r3, #12
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a0f      	ldr	r2, [pc, #60]	; (80022f4 <TIM_OC4_SetConfig+0xa4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d109      	bne.n	80022d0 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	019b      	lsls	r3, r3, #6
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	621a      	str	r2, [r3, #32]
}
 80022ea:	bf00      	nop
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	40012c00 	.word	0x40012c00

080022f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002308:	2201      	movs	r2, #1
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a1a      	ldr	r2, [r3, #32]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	43db      	mvns	r3, r3
 800231a:	401a      	ands	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a1a      	ldr	r2, [r3, #32]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	431a      	orrs	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	621a      	str	r2, [r3, #32]
}
 8002332:	bf00      	nop
 8002334:	371c      	adds	r7, #28
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002354:	2302      	movs	r3, #2
 8002356:	e044      	b.n	80023e2 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	4313      	orrs	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4313      	orrs	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002400:	2302      	movs	r3, #2
 8002402:	e032      	b.n	800246a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	6852      	ldr	r2, [r2, #4]
 800241e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002422:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	6851      	ldr	r1, [r2, #4]
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	6892      	ldr	r2, [r2, #8]
 8002440:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002444:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	6891      	ldr	r1, [r2, #8]
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	6852      	ldr	r2, [r2, #4]
 8002454:	430a      	orrs	r2, r1
 8002456:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr

08002486 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  u.var32 = 0;
 800249c:	4b18      	ldr	r3, [pc, #96]	; (8002500 <main+0x68>)
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024a2:	f7fd fe53 	bl	800014c <HAL_Init>
  SystemClock_Config();
 80024a6:	f000 f831 	bl	800250c <SystemClock_Config>
  MX_GPIO_Init();
 80024aa:	f000 fa0b 	bl	80028c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80024ae:	f000 f98f 	bl	80027d0 <MX_TIM2_Init>
  MX_CAN_Init();
 80024b2:	f000 f871 	bl	8002598 <MX_CAN_Init>
  MX_TIM1_Init();
 80024b6:	f000 f8ed 	bl	8002694 <MX_TIM1_Init>


  HAL_TIM_Base_Start(&htim1);
 80024ba:	4812      	ldr	r0, [pc, #72]	; (8002504 <main+0x6c>)
 80024bc:	f7ff faac 	bl	8001a18 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1); // PWM_L
 80024c0:	2100      	movs	r1, #0
 80024c2:	4810      	ldr	r0, [pc, #64]	; (8002504 <main+0x6c>)
 80024c4:	f7ff faee 	bl	8001aa4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2); // PWM_R
 80024c8:	2104      	movs	r1, #4
 80024ca:	480e      	ldr	r0, [pc, #56]	; (8002504 <main+0x6c>)
 80024cc:	f7ff faea 	bl	8001aa4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3); // LED VERDE
 80024d0:	2108      	movs	r1, #8
 80024d2:	480c      	ldr	r0, [pc, #48]	; (8002504 <main+0x6c>)
 80024d4:	f7ff fae6 	bl	8001aa4 <HAL_TIM_PWM_Start>


  HAL_TIM_Base_Start(&htim2);
 80024d8:	480b      	ldr	r0, [pc, #44]	; (8002508 <main+0x70>)
 80024da:	f7ff fa9d 	bl	8001a18 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1); //A1
 80024de:	2100      	movs	r1, #0
 80024e0:	4809      	ldr	r0, [pc, #36]	; (8002508 <main+0x70>)
 80024e2:	f7ff fadf 	bl	8001aa4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2); //A2
 80024e6:	2104      	movs	r1, #4
 80024e8:	4807      	ldr	r0, [pc, #28]	; (8002508 <main+0x70>)
 80024ea:	f7ff fadb 	bl	8001aa4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3); //A3
 80024ee:	2108      	movs	r1, #8
 80024f0:	4805      	ldr	r0, [pc, #20]	; (8002508 <main+0x70>)
 80024f2:	f7ff fad7 	bl	8001aa4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4); //A4
 80024f6:	210c      	movs	r1, #12
 80024f8:	4803      	ldr	r0, [pc, #12]	; (8002508 <main+0x70>)
 80024fa:	f7ff fad3 	bl	8001aa4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 80024fe:	e7fe      	b.n	80024fe <main+0x66>
 8002500:	20000134 	.word	0x20000134
 8002504:	200000a4 	.word	0x200000a4
 8002508:	200000f4 	.word	0x200000f4

0800250c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b090      	sub	sp, #64	; 0x40
 8002510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002512:	f107 0318 	add.w	r3, r7, #24
 8002516:	2228      	movs	r2, #40	; 0x28
 8002518:	2100      	movs	r1, #0
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fc8c 	bl	8002e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
 800252c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800252e:	2301      	movs	r3, #1
 8002530:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002532:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002536:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002538:	2300      	movs	r3, #0
 800253a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800253c:	2301      	movs	r3, #1
 800253e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002540:	2302      	movs	r3, #2
 8002542:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002544:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002548:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800254a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800254e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002550:	f107 0318 	add.w	r3, r7, #24
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe fe6f 	bl	8001238 <HAL_RCC_OscConfig>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002560:	f000 fa8a 	bl	8002a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002564:	230f      	movs	r3, #15
 8002566:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002568:	2302      	movs	r3, #2
 800256a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002574:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	2102      	movs	r1, #2
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff f8be 	bl	8001700 <HAL_RCC_ClockConfig>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800258a:	f000 fa75 	bl	8002a78 <Error_Handler>
  }
}
 800258e:	bf00      	nop
 8002590:	3740      	adds	r7, #64	; 0x40
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08a      	sub	sp, #40	; 0x28
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800259e:	4b3a      	ldr	r3, [pc, #232]	; (8002688 <MX_CAN_Init+0xf0>)
 80025a0:	4a3a      	ldr	r2, [pc, #232]	; (800268c <MX_CAN_Init+0xf4>)
 80025a2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 80025a4:	4b38      	ldr	r3, [pc, #224]	; (8002688 <MX_CAN_Init+0xf0>)
 80025a6:	2209      	movs	r2, #9
 80025a8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80025aa:	4b37      	ldr	r3, [pc, #220]	; (8002688 <MX_CAN_Init+0xf0>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80025b0:	4b35      	ldr	r3, [pc, #212]	; (8002688 <MX_CAN_Init+0xf0>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80025b6:	4b34      	ldr	r3, [pc, #208]	; (8002688 <MX_CAN_Init+0xf0>)
 80025b8:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80025bc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80025be:	4b32      	ldr	r3, [pc, #200]	; (8002688 <MX_CAN_Init+0xf0>)
 80025c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025c4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80025c6:	4b30      	ldr	r3, [pc, #192]	; (8002688 <MX_CAN_Init+0xf0>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80025cc:	4b2e      	ldr	r3, [pc, #184]	; (8002688 <MX_CAN_Init+0xf0>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80025d2:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <MX_CAN_Init+0xf0>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80025d8:	4b2b      	ldr	r3, [pc, #172]	; (8002688 <MX_CAN_Init+0xf0>)
 80025da:	2200      	movs	r2, #0
 80025dc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80025de:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <MX_CAN_Init+0xf0>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80025e4:	4b28      	ldr	r3, [pc, #160]	; (8002688 <MX_CAN_Init+0xf0>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80025ea:	4827      	ldr	r0, [pc, #156]	; (8002688 <MX_CAN_Init+0xf0>)
 80025ec:	f7fd fe32 	bl	8000254 <HAL_CAN_Init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80025f6:	f000 fa3f 	bl	8002a78 <Error_Handler>
  }


  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80025fa:	2102      	movs	r1, #2
 80025fc:	4822      	ldr	r0, [pc, #136]	; (8002688 <MX_CAN_Init+0xf0>)
 80025fe:	f7fe f942 	bl	8000886 <HAL_CAN_ActivateNotification>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_CAN_Init+0x74>
  {
	Error_Handler();
 8002608:	f000 fa36 	bl	8002a78 <Error_Handler>
  }

  /* Configure the CAN Filter */
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002610:	2300      	movs	r3, #0
 8002612:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002614:	2301      	movs	r3, #1
 8002616:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh     = 0x000<<5; //0x000
 8002618:	2300      	movs	r3, #0
 800261a:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow      = 0x0000;
 800261c:	2300      	movs	r3, #0
 800261e:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x700<<5; // mascara que filtra
 8002620:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002624:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow  = 0x0000;
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800262e:	2301      	movs	r3, #1
 8002630:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8002632:	230e      	movs	r3, #14
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8002636:	463b      	mov	r3, r7
 8002638:	4619      	mov	r1, r3
 800263a:	4813      	ldr	r0, [pc, #76]	; (8002688 <MX_CAN_Init+0xf0>)
 800263c:	f7fd ff04 	bl	8000448 <HAL_CAN_ConfigFilter>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_CAN_Init+0xb2>
  {
    /* Filter configuration Error */
    Error_Handler();
 8002646:	f000 fa17 	bl	8002a78 <Error_Handler>
  }

  /* Configure Transmission process */
  TxHeader.StdId = 0x001;
 800264a:	4b11      	ldr	r3, [pc, #68]	; (8002690 <MX_CAN_Init+0xf8>)
 800264c:	2201      	movs	r2, #1
 800264e:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x001;
 8002650:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <MX_CAN_Init+0xf8>)
 8002652:	2201      	movs	r2, #1
 8002654:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 8002656:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <MX_CAN_Init+0xf8>)
 8002658:	2200      	movs	r2, #0
 800265a:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <MX_CAN_Init+0xf8>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <MX_CAN_Init+0xf8>)
 8002664:	2208      	movs	r2, #8
 8002666:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <MX_CAN_Init+0xf8>)
 800266a:	2200      	movs	r2, #0
 800266c:	751a      	strb	r2, [r3, #20]


  /* Start the CAN peripheral */
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 800266e:	4806      	ldr	r0, [pc, #24]	; (8002688 <MX_CAN_Init+0xf0>)
 8002670:	f7fd ffb3 	bl	80005da <HAL_CAN_Start>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_CAN_Init+0xe6>
  {
    /* Start Error */
    Error_Handler();
 800267a:	f000 f9fd 	bl	8002a78 <Error_Handler>
  }




}
 800267e:	bf00      	nop
 8002680:	3728      	adds	r7, #40	; 0x28
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000060 	.word	0x20000060
 800268c:	40006400 	.word	0x40006400
 8002690:	20000028 	.word	0x20000028

08002694 <MX_TIM1_Init>:


static void MX_TIM1_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b090      	sub	sp, #64	; 0x40
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800269a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026a4:	f107 031c 	add.w	r3, r7, #28
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
 80026b4:	615a      	str	r2, [r3, #20]
 80026b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026b8:	463b      	mov	r3, r7
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	609a      	str	r2, [r3, #8]
 80026c2:	60da      	str	r2, [r3, #12]
 80026c4:	611a      	str	r2, [r3, #16]
 80026c6:	615a      	str	r2, [r3, #20]
 80026c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026ca:	4b3f      	ldr	r3, [pc, #252]	; (80027c8 <MX_TIM1_Init+0x134>)
 80026cc:	4a3f      	ldr	r2, [pc, #252]	; (80027cc <MX_TIM1_Init+0x138>)
 80026ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 80026d0:	4b3d      	ldr	r3, [pc, #244]	; (80027c8 <MX_TIM1_Init+0x134>)
 80026d2:	220b      	movs	r2, #11
 80026d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d6:	4b3c      	ldr	r3, [pc, #240]	; (80027c8 <MX_TIM1_Init+0x134>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 300;
 80026dc:	4b3a      	ldr	r3, [pc, #232]	; (80027c8 <MX_TIM1_Init+0x134>)
 80026de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e4:	4b38      	ldr	r3, [pc, #224]	; (80027c8 <MX_TIM1_Init+0x134>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026ea:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <MX_TIM1_Init+0x134>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f0:	4b35      	ldr	r3, [pc, #212]	; (80027c8 <MX_TIM1_Init+0x134>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80026f6:	4834      	ldr	r0, [pc, #208]	; (80027c8 <MX_TIM1_Init+0x134>)
 80026f8:	f7ff f9a8 	bl	8001a4c <HAL_TIM_PWM_Init>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8002702:	f000 f9b9 	bl	8002a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002706:	2300      	movs	r3, #0
 8002708:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800270a:	2300      	movs	r3, #0
 800270c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800270e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002712:	4619      	mov	r1, r3
 8002714:	482c      	ldr	r0, [pc, #176]	; (80027c8 <MX_TIM1_Init+0x134>)
 8002716:	f7ff fe69 	bl	80023ec <HAL_TIMEx_MasterConfigSynchronization>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002720:	f000 f9aa 	bl	8002a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002724:	2360      	movs	r3, #96	; 0x60
 8002726:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800272c:	2300      	movs	r3, #0
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002730:	2300      	movs	r3, #0
 8002732:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002734:	2300      	movs	r3, #0
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002738:	2300      	movs	r3, #0
 800273a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800273c:	2300      	movs	r3, #0
 800273e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002740:	f107 031c 	add.w	r3, r7, #28
 8002744:	2200      	movs	r2, #0
 8002746:	4619      	mov	r1, r3
 8002748:	481f      	ldr	r0, [pc, #124]	; (80027c8 <MX_TIM1_Init+0x134>)
 800274a:	f7ff fadb 	bl	8001d04 <HAL_TIM_PWM_ConfigChannel>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002754:	f000 f990 	bl	8002a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002758:	f107 031c 	add.w	r3, r7, #28
 800275c:	2204      	movs	r2, #4
 800275e:	4619      	mov	r1, r3
 8002760:	4819      	ldr	r0, [pc, #100]	; (80027c8 <MX_TIM1_Init+0x134>)
 8002762:	f7ff facf 	bl	8001d04 <HAL_TIM_PWM_ConfigChannel>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800276c:	f000 f984 	bl	8002a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002770:	f107 031c 	add.w	r3, r7, #28
 8002774:	2208      	movs	r2, #8
 8002776:	4619      	mov	r1, r3
 8002778:	4813      	ldr	r0, [pc, #76]	; (80027c8 <MX_TIM1_Init+0x134>)
 800277a:	f7ff fac3 	bl	8001d04 <HAL_TIM_PWM_ConfigChannel>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002784:	f000 f978 	bl	8002a78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002788:	2300      	movs	r3, #0
 800278a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800278c:	2300      	movs	r3, #0
 800278e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002790:	2300      	movs	r3, #0
 8002792:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002798:	2300      	movs	r3, #0
 800279a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800279c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80027a6:	463b      	mov	r3, r7
 80027a8:	4619      	mov	r1, r3
 80027aa:	4807      	ldr	r0, [pc, #28]	; (80027c8 <MX_TIM1_Init+0x134>)
 80027ac:	f7ff fdc6 	bl	800233c <HAL_TIMEx_ConfigBreakDeadTime>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80027b6:	f000 f95f 	bl	8002a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80027ba:	4803      	ldr	r0, [pc, #12]	; (80027c8 <MX_TIM1_Init+0x134>)
 80027bc:	f000 fa26 	bl	8002c0c <HAL_TIM_MspPostInit>

}
 80027c0:	bf00      	nop
 80027c2:	3740      	adds	r7, #64	; 0x40
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200000a4 	.word	0x200000a4
 80027cc:	40012c00 	.word	0x40012c00

080027d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d6:	f107 0320 	add.w	r3, r7, #32
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]
 80027e8:	609a      	str	r2, [r3, #8]
 80027ea:	60da      	str	r2, [r3, #12]
 80027ec:	611a      	str	r2, [r3, #16]
 80027ee:	615a      	str	r2, [r3, #20]
 80027f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027f2:	4b33      	ldr	r3, [pc, #204]	; (80028c0 <MX_TIM2_Init+0xf0>)
 80027f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 80027fa:	4b31      	ldr	r3, [pc, #196]	; (80028c0 <MX_TIM2_Init+0xf0>)
 80027fc:	f240 321f 	movw	r2, #799	; 0x31f
 8002800:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002802:	4b2f      	ldr	r3, [pc, #188]	; (80028c0 <MX_TIM2_Init+0xf0>)
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1800;
 8002808:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <MX_TIM2_Init+0xf0>)
 800280a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800280e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002810:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <MX_TIM2_Init+0xf0>)
 8002812:	2200      	movs	r2, #0
 8002814:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002816:	4b2a      	ldr	r3, [pc, #168]	; (80028c0 <MX_TIM2_Init+0xf0>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800281c:	4828      	ldr	r0, [pc, #160]	; (80028c0 <MX_TIM2_Init+0xf0>)
 800281e:	f7ff f915 	bl	8001a4c <HAL_TIM_PWM_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002828:	f000 f926 	bl	8002a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800282c:	2300      	movs	r3, #0
 800282e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002830:	2300      	movs	r3, #0
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002834:	f107 0320 	add.w	r3, r7, #32
 8002838:	4619      	mov	r1, r3
 800283a:	4821      	ldr	r0, [pc, #132]	; (80028c0 <MX_TIM2_Init+0xf0>)
 800283c:	f7ff fdd6 	bl	80023ec <HAL_TIMEx_MasterConfigSynchronization>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002846:	f000 f917 	bl	8002a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800284a:	2360      	movs	r3, #96	; 0x60
 800284c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800285a:	1d3b      	adds	r3, r7, #4
 800285c:	2200      	movs	r2, #0
 800285e:	4619      	mov	r1, r3
 8002860:	4817      	ldr	r0, [pc, #92]	; (80028c0 <MX_TIM2_Init+0xf0>)
 8002862:	f7ff fa4f 	bl	8001d04 <HAL_TIM_PWM_ConfigChannel>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800286c:	f000 f904 	bl	8002a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002870:	1d3b      	adds	r3, r7, #4
 8002872:	2204      	movs	r2, #4
 8002874:	4619      	mov	r1, r3
 8002876:	4812      	ldr	r0, [pc, #72]	; (80028c0 <MX_TIM2_Init+0xf0>)
 8002878:	f7ff fa44 	bl	8001d04 <HAL_TIM_PWM_ConfigChannel>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8002882:	f000 f8f9 	bl	8002a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	2208      	movs	r2, #8
 800288a:	4619      	mov	r1, r3
 800288c:	480c      	ldr	r0, [pc, #48]	; (80028c0 <MX_TIM2_Init+0xf0>)
 800288e:	f7ff fa39 	bl	8001d04 <HAL_TIM_PWM_ConfigChannel>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8002898:	f000 f8ee 	bl	8002a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	220c      	movs	r2, #12
 80028a0:	4619      	mov	r1, r3
 80028a2:	4807      	ldr	r0, [pc, #28]	; (80028c0 <MX_TIM2_Init+0xf0>)
 80028a4:	f7ff fa2e 	bl	8001d04 <HAL_TIM_PWM_ConfigChannel>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80028ae:	f000 f8e3 	bl	8002a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80028b2:	4803      	ldr	r0, [pc, #12]	; (80028c0 <MX_TIM2_Init+0xf0>)
 80028b4:	f000 f9aa 	bl	8002c0c <HAL_TIM_MspPostInit>

}
 80028b8:	bf00      	nop
 80028ba:	3728      	adds	r7, #40	; 0x28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	200000f4 	.word	0x200000f4

080028c4 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ca:	f107 0310 	add.w	r3, r7, #16
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	609a      	str	r2, [r3, #8]
 80028d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d8:	4a45      	ldr	r2, [pc, #276]	; (80029f0 <MX_GPIO_Init+0x12c>)
 80028da:	4b45      	ldr	r3, [pc, #276]	; (80029f0 <MX_GPIO_Init+0x12c>)
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f043 0310 	orr.w	r3, r3, #16
 80028e2:	6193      	str	r3, [r2, #24]
 80028e4:	4b42      	ldr	r3, [pc, #264]	; (80029f0 <MX_GPIO_Init+0x12c>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f0:	4a3f      	ldr	r2, [pc, #252]	; (80029f0 <MX_GPIO_Init+0x12c>)
 80028f2:	4b3f      	ldr	r3, [pc, #252]	; (80029f0 <MX_GPIO_Init+0x12c>)
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f043 0320 	orr.w	r3, r3, #32
 80028fa:	6193      	str	r3, [r2, #24]
 80028fc:	4b3c      	ldr	r3, [pc, #240]	; (80029f0 <MX_GPIO_Init+0x12c>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002908:	4a39      	ldr	r2, [pc, #228]	; (80029f0 <MX_GPIO_Init+0x12c>)
 800290a:	4b39      	ldr	r3, [pc, #228]	; (80029f0 <MX_GPIO_Init+0x12c>)
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f043 0304 	orr.w	r3, r3, #4
 8002912:	6193      	str	r3, [r2, #24]
 8002914:	4b36      	ldr	r3, [pc, #216]	; (80029f0 <MX_GPIO_Init+0x12c>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002920:	4a33      	ldr	r2, [pc, #204]	; (80029f0 <MX_GPIO_Init+0x12c>)
 8002922:	4b33      	ldr	r3, [pc, #204]	; (80029f0 <MX_GPIO_Init+0x12c>)
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	f043 0308 	orr.w	r3, r3, #8
 800292a:	6193      	str	r3, [r2, #24]
 800292c:	4b30      	ldr	r3, [pc, #192]	; (80029f0 <MX_GPIO_Init+0x12c>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	603b      	str	r3, [r7, #0]
 8002936:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002938:	2201      	movs	r2, #1
 800293a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800293e:	482d      	ldr	r0, [pc, #180]	; (80029f4 <MX_GPIO_Init+0x130>)
 8002940:	f7fe fc4a 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294a:	2301      	movs	r3, #1
 800294c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	2302      	movs	r3, #2
 8002954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002956:	f107 0310 	add.w	r3, r7, #16
 800295a:	4619      	mov	r1, r3
 800295c:	4825      	ldr	r0, [pc, #148]	; (80029f4 <MX_GPIO_Init+0x130>)
 800295e:	f7fe fadd 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002968:	2301      	movs	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	2302      	movs	r3, #2
 8002972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002974:	f107 0310 	add.w	r3, r7, #16
 8002978:	4619      	mov	r1, r3
 800297a:	481f      	ldr	r0, [pc, #124]	; (80029f8 <MX_GPIO_Init+0x134>)
 800297c:	f7fe face 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002984:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002986:	2301      	movs	r3, #1
 8002988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	2302      	movs	r3, #2
 8002990:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002992:	f107 0310 	add.w	r3, r7, #16
 8002996:	4619      	mov	r1, r3
 8002998:	4817      	ldr	r0, [pc, #92]	; (80029f8 <MX_GPIO_Init+0x134>)
 800299a:	f7fe fabf 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800299e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a4:	2301      	movs	r3, #1
 80029a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2302      	movs	r3, #2
 80029ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b0:	f107 0310 	add.w	r3, r7, #16
 80029b4:	4619      	mov	r1, r3
 80029b6:	4810      	ldr	r0, [pc, #64]	; (80029f8 <MX_GPIO_Init+0x134>)
 80029b8:	f7fe fab0 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029c2:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <MX_GPIO_Init+0x138>)
 80029c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ca:	f107 0310 	add.w	r3, r7, #16
 80029ce:	4619      	mov	r1, r3
 80029d0:	4809      	ldr	r0, [pc, #36]	; (80029f8 <MX_GPIO_Init+0x134>)
 80029d2:	f7fe faa3 	bl	8000f1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2100      	movs	r1, #0
 80029da:	2028      	movs	r0, #40	; 0x28
 80029dc:	f7fe fa67 	bl	8000eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029e0:	2028      	movs	r0, #40	; 0x28
 80029e2:	f7fe fa80 	bl	8000ee6 <HAL_NVIC_EnableIRQ>

}
 80029e6:	bf00      	nop
 80029e8:	3720      	adds	r7, #32
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40011000 	.word	0x40011000
 80029f8:	40010c00 	.word	0x40010c00
 80029fc:	10110000 	.word	0x10110000

08002a00 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == GPIO_PIN_10){
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a10:	d111      	bne.n	8002a36 <HAL_GPIO_EXTI_Callback+0x36>

		u.var32 = 60000/(HAL_GetTick() - last_time);
 8002a12:	f7fd fbf3 	bl	80001fc <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_GPIO_EXTI_Callback+0x40>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a26:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <HAL_GPIO_EXTI_Callback+0x44>)
 8002a28:	6013      	str	r3, [r2, #0]
		last_time = HAL_GetTick();
 8002a2a:	f7fd fbe7 	bl	80001fc <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <HAL_GPIO_EXTI_Callback+0x40>)
 8002a32:	601a      	str	r2, [r3, #0]
	}
	else
		__NOP ();
}
 8002a34:	e000      	b.n	8002a38 <HAL_GPIO_EXTI_Callback+0x38>
 8002a36:	bf00      	nop
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	200000e4 	.word	0x200000e4
 8002a44:	20000134 	.word	0x20000134

08002a48 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8002a50:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8002a52:	4a08      	ldr	r2, [pc, #32]	; (8002a74 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8002a54:	2100      	movs	r1, #0
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fd fe03 	bl	8000662 <HAL_CAN_GetRxMessage>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {

    Error_Handler();
 8002a62:	f000 f809 	bl	8002a78 <Error_Handler>
  }
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	200000ec 	.word	0x200000ec
 8002a74:	20000040 	.word	0x20000040

08002a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_Delay(100);
 8002a7c:	2064      	movs	r0, #100	; 0x64
 8002a7e:	f7fd fbc7 	bl	8000210 <HAL_Delay>
  /* USER CODE END Error_Handler_Debug */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a8e:	4a0e      	ldr	r2, [pc, #56]	; (8002ac8 <HAL_MspInit+0x40>)
 8002a90:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <HAL_MspInit+0x40>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	6193      	str	r3, [r2, #24]
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_MspInit+0x40>)
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa6:	4a08      	ldr	r2, [pc, #32]	; (8002ac8 <HAL_MspInit+0x40>)
 8002aa8:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <HAL_MspInit+0x40>)
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	61d3      	str	r3, [r2, #28]
 8002ab2:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <HAL_MspInit+0x40>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	40021000 	.word	0x40021000

08002acc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	; 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a29      	ldr	r2, [pc, #164]	; (8002b8c <HAL_CAN_MspInit+0xc0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d14b      	bne.n	8002b84 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002aec:	4a28      	ldr	r2, [pc, #160]	; (8002b90 <HAL_CAN_MspInit+0xc4>)
 8002aee:	4b28      	ldr	r3, [pc, #160]	; (8002b90 <HAL_CAN_MspInit+0xc4>)
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002af6:	61d3      	str	r3, [r2, #28]
 8002af8:	4b25      	ldr	r3, [pc, #148]	; (8002b90 <HAL_CAN_MspInit+0xc4>)
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b04:	4a22      	ldr	r2, [pc, #136]	; (8002b90 <HAL_CAN_MspInit+0xc4>)
 8002b06:	4b22      	ldr	r3, [pc, #136]	; (8002b90 <HAL_CAN_MspInit+0xc4>)
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f043 0308 	orr.w	r3, r3, #8
 8002b0e:	6193      	str	r3, [r2, #24]
 8002b10:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <HAL_CAN_MspInit+0xc4>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4818      	ldr	r0, [pc, #96]	; (8002b94 <HAL_CAN_MspInit+0xc8>)
 8002b32:	f7fe f9f3 	bl	8000f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b40:	2303      	movs	r3, #3
 8002b42:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4812      	ldr	r0, [pc, #72]	; (8002b94 <HAL_CAN_MspInit+0xc8>)
 8002b4c:	f7fe f9e6 	bl	8000f1c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <HAL_CAN_MspInit+0xcc>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6e:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <HAL_CAN_MspInit+0xcc>)
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002b74:	2200      	movs	r2, #0
 8002b76:	2100      	movs	r1, #0
 8002b78:	2014      	movs	r0, #20
 8002b7a:	f7fe f998 	bl	8000eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002b7e:	2014      	movs	r0, #20
 8002b80:	f7fe f9b1 	bl	8000ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002b84:	bf00      	nop
 8002b86:	3728      	adds	r7, #40	; 0x28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40006400 	.word	0x40006400
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40010c00 	.word	0x40010c00
 8002b98:	40010000 	.word	0x40010000

08002b9c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a16      	ldr	r2, [pc, #88]	; (8002c04 <HAL_TIM_PWM_MspInit+0x68>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d10c      	bne.n	8002bc8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bae:	4a16      	ldr	r2, [pc, #88]	; (8002c08 <HAL_TIM_PWM_MspInit+0x6c>)
 8002bb0:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <HAL_TIM_PWM_MspInit+0x6c>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bb8:	6193      	str	r3, [r2, #24]
 8002bba:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <HAL_TIM_PWM_MspInit+0x6c>)
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002bc6:	e018      	b.n	8002bfa <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd0:	d113      	bne.n	8002bfa <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bd2:	4a0d      	ldr	r2, [pc, #52]	; (8002c08 <HAL_TIM_PWM_MspInit+0x6c>)
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <HAL_TIM_PWM_MspInit+0x6c>)
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	61d3      	str	r3, [r2, #28]
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <HAL_TIM_PWM_MspInit+0x6c>)
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bea:	2200      	movs	r2, #0
 8002bec:	2100      	movs	r1, #0
 8002bee:	201c      	movs	r0, #28
 8002bf0:	f7fe f95d 	bl	8000eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bf4:	201c      	movs	r0, #28
 8002bf6:	f7fe f976 	bl	8000ee6 <HAL_NVIC_EnableIRQ>
}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40012c00 	.word	0x40012c00
 8002c08:	40021000 	.word	0x40021000

08002c0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 0310 	add.w	r3, r7, #16
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1f      	ldr	r2, [pc, #124]	; (8002ca4 <HAL_TIM_MspPostInit+0x98>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d119      	bne.n	8002c60 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2c:	4a1e      	ldr	r2, [pc, #120]	; (8002ca8 <HAL_TIM_MspPostInit+0x9c>)
 8002c2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <HAL_TIM_MspPostInit+0x9c>)
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f043 0304 	orr.w	r3, r3, #4
 8002c36:	6193      	str	r3, [r2, #24]
 8002c38:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <HAL_TIM_MspPostInit+0x9c>)
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002c44:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002c48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c52:	f107 0310 	add.w	r3, r7, #16
 8002c56:	4619      	mov	r1, r3
 8002c58:	4814      	ldr	r0, [pc, #80]	; (8002cac <HAL_TIM_MspPostInit+0xa0>)
 8002c5a:	f7fe f95f 	bl	8000f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c5e:	e01c      	b.n	8002c9a <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c68:	d117      	bne.n	8002c9a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ca8 <HAL_TIM_MspPostInit+0x9c>)
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <HAL_TIM_MspPostInit+0x9c>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	f043 0304 	orr.w	r3, r3, #4
 8002c74:	6193      	str	r3, [r2, #24]
 8002c76:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <HAL_TIM_MspPostInit+0x9c>)
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002c82:	230f      	movs	r3, #15
 8002c84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c86:	2302      	movs	r3, #2
 8002c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c8e:	f107 0310 	add.w	r3, r7, #16
 8002c92:	4619      	mov	r1, r3
 8002c94:	4805      	ldr	r0, [pc, #20]	; (8002cac <HAL_TIM_MspPostInit+0xa0>)
 8002c96:	f7fe f941 	bl	8000f1c <HAL_GPIO_Init>
}
 8002c9a:	bf00      	nop
 8002c9c:	3720      	adds	r7, #32
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40012c00 	.word	0x40012c00
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40010800 	.word	0x40010800

08002cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cc0:	e7fe      	b.n	8002cc0 <HardFault_Handler+0x4>

08002cc2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cc6:	e7fe      	b.n	8002cc6 <MemManage_Handler+0x4>

08002cc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <BusFault_Handler+0x4>

08002cce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cd2:	e7fe      	b.n	8002cd2 <UsageFault_Handler+0x4>

08002cd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cfc:	f7fd fa6c 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002d08:	4802      	ldr	r0, [pc, #8]	; (8002d14 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002d0a:	f7fd fde1 	bl	80008d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000060 	.word	0x20000060

08002d18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d1c:	4802      	ldr	r0, [pc, #8]	; (8002d28 <TIM2_IRQHandler+0x10>)
 8002d1e:	f7fe fee9 	bl	8001af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200000f4 	.word	0x200000f4

08002d2c <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002d30:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002d34:	f7fe fa68 	bl	8001208 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002d40:	4a15      	ldr	r2, [pc, #84]	; (8002d98 <SystemInit+0x5c>)
 8002d42:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <SystemInit+0x5c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002d4c:	4912      	ldr	r1, [pc, #72]	; (8002d98 <SystemInit+0x5c>)
 8002d4e:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <SystemInit+0x5c>)
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <SystemInit+0x60>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002d58:	4a0f      	ldr	r2, [pc, #60]	; (8002d98 <SystemInit+0x5c>)
 8002d5a:	4b0f      	ldr	r3, [pc, #60]	; (8002d98 <SystemInit+0x5c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d66:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d68:	4a0b      	ldr	r2, [pc, #44]	; (8002d98 <SystemInit+0x5c>)
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <SystemInit+0x5c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d72:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002d74:	4a08      	ldr	r2, [pc, #32]	; (8002d98 <SystemInit+0x5c>)
 8002d76:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <SystemInit+0x5c>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002d7e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <SystemInit+0x5c>)
 8002d82:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002d86:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <SystemInit+0x64>)
 8002d8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d8e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	f8ff0000 	.word	0xf8ff0000
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002da4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002da6:	e003      	b.n	8002db0 <LoopCopyDataInit>

08002da8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002daa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002dac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002dae:	3104      	adds	r1, #4

08002db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002db0:	480a      	ldr	r0, [pc, #40]	; (8002ddc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002db4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002db6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002db8:	d3f6      	bcc.n	8002da8 <CopyDataInit>
  ldr r2, =_sbss
 8002dba:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002dbc:	e002      	b.n	8002dc4 <LoopFillZerobss>

08002dbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002dbe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002dc0:	f842 3b04 	str.w	r3, [r2], #4

08002dc4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002dc6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002dc8:	d3f9      	bcc.n	8002dbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002dca:	f7ff ffb7 	bl	8002d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dce:	f000 f80f 	bl	8002df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dd2:	f7ff fb61 	bl	8002498 <main>
  bx lr
 8002dd6:	4770      	bx	lr
  ldr r3, =_sidata
 8002dd8:	08002e8c 	.word	0x08002e8c
  ldr r0, =_sdata
 8002ddc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002de0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002de4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002de8:	20000138 	.word	0x20000138

08002dec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dec:	e7fe      	b.n	8002dec <ADC1_2_IRQHandler>
	...

08002df0 <__libc_init_array>:
 8002df0:	b570      	push	{r4, r5, r6, lr}
 8002df2:	2500      	movs	r5, #0
 8002df4:	4e0c      	ldr	r6, [pc, #48]	; (8002e28 <__libc_init_array+0x38>)
 8002df6:	4c0d      	ldr	r4, [pc, #52]	; (8002e2c <__libc_init_array+0x3c>)
 8002df8:	1ba4      	subs	r4, r4, r6
 8002dfa:	10a4      	asrs	r4, r4, #2
 8002dfc:	42a5      	cmp	r5, r4
 8002dfe:	d109      	bne.n	8002e14 <__libc_init_array+0x24>
 8002e00:	f000 f822 	bl	8002e48 <_init>
 8002e04:	2500      	movs	r5, #0
 8002e06:	4e0a      	ldr	r6, [pc, #40]	; (8002e30 <__libc_init_array+0x40>)
 8002e08:	4c0a      	ldr	r4, [pc, #40]	; (8002e34 <__libc_init_array+0x44>)
 8002e0a:	1ba4      	subs	r4, r4, r6
 8002e0c:	10a4      	asrs	r4, r4, #2
 8002e0e:	42a5      	cmp	r5, r4
 8002e10:	d105      	bne.n	8002e1e <__libc_init_array+0x2e>
 8002e12:	bd70      	pop	{r4, r5, r6, pc}
 8002e14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e18:	4798      	blx	r3
 8002e1a:	3501      	adds	r5, #1
 8002e1c:	e7ee      	b.n	8002dfc <__libc_init_array+0xc>
 8002e1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e22:	4798      	blx	r3
 8002e24:	3501      	adds	r5, #1
 8002e26:	e7f2      	b.n	8002e0e <__libc_init_array+0x1e>
 8002e28:	08002e84 	.word	0x08002e84
 8002e2c:	08002e84 	.word	0x08002e84
 8002e30:	08002e84 	.word	0x08002e84
 8002e34:	08002e88 	.word	0x08002e88

08002e38 <memset>:
 8002e38:	4603      	mov	r3, r0
 8002e3a:	4402      	add	r2, r0
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d100      	bne.n	8002e42 <memset+0xa>
 8002e40:	4770      	bx	lr
 8002e42:	f803 1b01 	strb.w	r1, [r3], #1
 8002e46:	e7f9      	b.n	8002e3c <memset+0x4>

08002e48 <_init>:
 8002e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4a:	bf00      	nop
 8002e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e4e:	bc08      	pop	{r3}
 8002e50:	469e      	mov	lr, r3
 8002e52:	4770      	bx	lr

08002e54 <_fini>:
 8002e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e56:	bf00      	nop
 8002e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5a:	bc08      	pop	{r3}
 8002e5c:	469e      	mov	lr, r3
 8002e5e:	4770      	bx	lr
