
Modulo_Energia_V14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c34  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  08006d44  08006d44  00016d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800730c  0800730c  0001730c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007310  08007310  00017310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08007314  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000338  20000078  0800738c  00020078  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200003b0  0800738c  000203b0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018995  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002d44  00000000  00000000  00038a36  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001190  00000000  00000000  0003b780  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001068  00000000  00000000  0003c910  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000781b  00000000  00000000  0003d978  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004eee  00000000  00000000  00045193  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004a081  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004e5c  00000000  00000000  0004a100  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08006d2c 	.word	0x08006d2c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08006d2c 	.word	0x08006d2c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__aeabi_d2uiz>:
 80008f4:	004a      	lsls	r2, r1, #1
 80008f6:	d211      	bcs.n	800091c <__aeabi_d2uiz+0x28>
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008fc:	d211      	bcs.n	8000922 <__aeabi_d2uiz+0x2e>
 80008fe:	d50d      	bpl.n	800091c <__aeabi_d2uiz+0x28>
 8000900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d40e      	bmi.n	8000928 <__aeabi_d2uiz+0x34>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	fa23 f002 	lsr.w	r0, r3, r2
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d102      	bne.n	800092e <__aeabi_d2uiz+0x3a>
 8000928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800092c:	4770      	bx	lr
 800092e:	f04f 0000 	mov.w	r0, #0
 8000932:	4770      	bx	lr

08000934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000938:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_Init+0x28>)
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_Init+0x28>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f043 0310 	orr.w	r3, r3, #16
 8000942:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000944:	2003      	movs	r0, #3
 8000946:	f001 fb81 	bl	800204c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094a:	2000      	movs	r0, #0
 800094c:	f000 f808 	bl	8000960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000950:	f005 fb4a 	bl	8005fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40022000 	.word	0x40022000

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_InitTick+0x54>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_InitTick+0x58>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000976:	fbb3 f3f1 	udiv	r3, r3, r1
 800097a:	fbb2 f3f3 	udiv	r3, r2, r3
 800097e:	4618      	mov	r0, r3
 8000980:	f001 fb99 	bl	80020b6 <HAL_SYSTICK_Config>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e00e      	b.n	80009ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b0f      	cmp	r3, #15
 8000992:	d80a      	bhi.n	80009aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000994:	2200      	movs	r2, #0
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800099c:	f001 fb61 	bl	8002062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a0:	4a06      	ldr	r2, [pc, #24]	; (80009bc <HAL_InitTick+0x5c>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	e000      	b.n	80009ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000010 	.word	0x20000010
 80009b8:	20000004 	.word	0x20000004
 80009bc:	20000000 	.word	0x20000000

080009c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_IncTick+0x1c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <HAL_IncTick+0x20>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a03      	ldr	r2, [pc, #12]	; (80009e0 <HAL_IncTick+0x20>)
 80009d2:	6013      	str	r3, [r2, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	20000004 	.word	0x20000004
 80009e0:	20000188 	.word	0x20000188

080009e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b02      	ldr	r3, [pc, #8]	; (80009f4 <HAL_GetTick+0x10>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	20000188 	.word	0x20000188

080009f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a00:	f7ff fff0 	bl	80009e4 <HAL_GetTick>
 8000a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a10:	d005      	beq.n	8000a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_Delay+0x40>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a1e:	bf00      	nop
 8000a20:	f7ff ffe0 	bl	80009e4 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	1ad2      	subs	r2, r2, r3
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d3f7      	bcc.n	8000a20 <HAL_Delay+0x28>
  {
  }
}
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000004 	.word	0x20000004

08000a3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a44:	2300      	movs	r3, #0
 8000a46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e0be      	b.n	8000bdc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d109      	bne.n	8000a80 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f005 fad6 	bl	800602c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f000 fbb1 	bl	80011e8 <ADC_ConversionStop_Disable>
 8000a86:	4603      	mov	r3, r0
 8000a88:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a8e:	f003 0310 	and.w	r3, r3, #16
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f040 8099 	bne.w	8000bca <HAL_ADC_Init+0x18e>
 8000a98:	7dfb      	ldrb	r3, [r7, #23]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f040 8095 	bne.w	8000bca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000aa8:	f023 0302 	bic.w	r3, r3, #2
 8000aac:	f043 0202 	orr.w	r2, r3, #2
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000abc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000ac4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ad4:	d003      	beq.n	8000ade <HAL_ADC_Init+0xa2>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d102      	bne.n	8000ae4 <HAL_ADC_Init+0xa8>
 8000ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae2:	e000      	b.n	8000ae6 <HAL_ADC_Init+0xaa>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d119      	bne.n	8000b28 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d109      	bne.n	8000b10 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	035a      	lsls	r2, r3, #13
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	e00b      	b.n	8000b28 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b14:	f043 0220 	orr.w	r2, r3, #32
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b20:	f043 0201 	orr.w	r2, r3, #1
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	6812      	ldr	r2, [r2, #0]
 8000b30:	6852      	ldr	r2, [r2, #4]
 8000b32:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6899      	ldr	r1, [r3, #8]
 8000b46:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <HAL_ADC_Init+0x1a8>)
 8000b48:	400b      	ands	r3, r1
 8000b4a:	68b9      	ldr	r1, [r7, #8]
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b58:	d003      	beq.n	8000b62 <HAL_ADC_Init+0x126>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d104      	bne.n	8000b6c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	691b      	ldr	r3, [r3, #16]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	051b      	lsls	r3, r3, #20
 8000b6a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	6812      	ldr	r2, [r2, #0]
 8000b74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000b76:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	689a      	ldr	r2, [r3, #8]
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <HAL_ADC_Init+0x1ac>)
 8000b88:	4013      	ands	r3, r2
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d10b      	bne.n	8000ba8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9a:	f023 0303 	bic.w	r3, r3, #3
 8000b9e:	f043 0201 	orr.w	r2, r3, #1
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ba6:	e018      	b.n	8000bda <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bac:	f023 0312 	bic.w	r3, r3, #18
 8000bb0:	f043 0210 	orr.w	r2, r3, #16
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbc:	f043 0201 	orr.w	r2, r3, #1
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bc8:	e007      	b.n	8000bda <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bce:	f043 0210 	orr.w	r2, r3, #16
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	ffe1f7fd 	.word	0xffe1f7fd
 8000be8:	ff1f0efe 	.word	0xff1f0efe

08000bec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d101      	bne.n	8000c06 <HAL_ADC_Start+0x1a>
 8000c02:	2302      	movs	r3, #2
 8000c04:	e098      	b.n	8000d38 <HAL_ADC_Start+0x14c>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 fa98 	bl	8001144 <ADC_Enable>
 8000c14:	4603      	mov	r3, r0
 8000c16:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f040 8087 	bne.w	8000d2e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c28:	f023 0301 	bic.w	r3, r3, #1
 8000c2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a41      	ldr	r2, [pc, #260]	; (8000d40 <HAL_ADC_Start+0x154>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d105      	bne.n	8000c4a <HAL_ADC_Start+0x5e>
 8000c3e:	4b41      	ldr	r3, [pc, #260]	; (8000d44 <HAL_ADC_Start+0x158>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d115      	bne.n	8000c76 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d026      	beq.n	8000cb2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c6c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c74:	e01d      	b.n	8000cb2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a2f      	ldr	r2, [pc, #188]	; (8000d44 <HAL_ADC_Start+0x158>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d004      	beq.n	8000c96 <HAL_ADC_Start+0xaa>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a2b      	ldr	r2, [pc, #172]	; (8000d40 <HAL_ADC_Start+0x154>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d10d      	bne.n	8000cb2 <HAL_ADC_Start+0xc6>
 8000c96:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <HAL_ADC_Start+0x158>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d007      	beq.n	8000cb2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000caa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d006      	beq.n	8000ccc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc2:	f023 0206 	bic.w	r2, r3, #6
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cca:	e002      	b.n	8000cd2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f06f 0202 	mvn.w	r2, #2
 8000ce2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000cee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000cf2:	d113      	bne.n	8000d1c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cf8:	4a11      	ldr	r2, [pc, #68]	; (8000d40 <HAL_ADC_Start+0x154>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d105      	bne.n	8000d0a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_ADC_Start+0x158>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d108      	bne.n	8000d1c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	6812      	ldr	r2, [r2, #0]
 8000d12:	6892      	ldr	r2, [r2, #8]
 8000d14:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	e00c      	b.n	8000d36 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	6812      	ldr	r2, [r2, #0]
 8000d24:	6892      	ldr	r2, [r2, #8]
 8000d26:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	e003      	b.n	8000d36 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40012800 	.word	0x40012800
 8000d44:	40012400 	.word	0x40012400

08000d48 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000d5e:	f7ff fe41 	bl	80009e4 <HAL_GetTick>
 8000d62:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d00b      	beq.n	8000d8a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d76:	f043 0220 	orr.w	r2, r3, #32
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e0c8      	b.n	8000f1c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d12a      	bne.n	8000dee <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d123      	bne.n	8000dee <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000da6:	e01a      	b.n	8000dde <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dae:	d016      	beq.n	8000dde <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d007      	beq.n	8000dc6 <HAL_ADC_PollForConversion+0x7e>
 8000db6:	f7ff fe15 	bl	80009e4 <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	1ad2      	subs	r2, r2, r3
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d90b      	bls.n	8000dde <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dca:	f043 0204 	orr.w	r2, r3, #4
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e09e      	b.n	8000f1c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d0dd      	beq.n	8000da8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000dec:	e06c      	b.n	8000ec8 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000dee:	4b4d      	ldr	r3, [pc, #308]	; (8000f24 <HAL_ADC_PollForConversion+0x1dc>)
 8000df0:	681c      	ldr	r4, [r3, #0]
 8000df2:	2002      	movs	r0, #2
 8000df4:	f001 ffe2 	bl	8002dbc <HAL_RCCEx_GetPeriphCLKFreq>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6919      	ldr	r1, [r3, #16]
 8000e04:	4b48      	ldr	r3, [pc, #288]	; (8000f28 <HAL_ADC_PollForConversion+0x1e0>)
 8000e06:	400b      	ands	r3, r1
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d118      	bne.n	8000e3e <HAL_ADC_PollForConversion+0xf6>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	68d9      	ldr	r1, [r3, #12]
 8000e12:	4b46      	ldr	r3, [pc, #280]	; (8000f2c <HAL_ADC_PollForConversion+0x1e4>)
 8000e14:	400b      	ands	r3, r1
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d111      	bne.n	8000e3e <HAL_ADC_PollForConversion+0xf6>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	6919      	ldr	r1, [r3, #16]
 8000e20:	4b43      	ldr	r3, [pc, #268]	; (8000f30 <HAL_ADC_PollForConversion+0x1e8>)
 8000e22:	400b      	ands	r3, r1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d108      	bne.n	8000e3a <HAL_ADC_PollForConversion+0xf2>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68d9      	ldr	r1, [r3, #12]
 8000e2e:	4b41      	ldr	r3, [pc, #260]	; (8000f34 <HAL_ADC_PollForConversion+0x1ec>)
 8000e30:	400b      	ands	r3, r1
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <HAL_ADC_PollForConversion+0xf2>
 8000e36:	2314      	movs	r3, #20
 8000e38:	e020      	b.n	8000e7c <HAL_ADC_PollForConversion+0x134>
 8000e3a:	2329      	movs	r3, #41	; 0x29
 8000e3c:	e01e      	b.n	8000e7c <HAL_ADC_PollForConversion+0x134>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	6919      	ldr	r1, [r3, #16]
 8000e44:	4b3a      	ldr	r3, [pc, #232]	; (8000f30 <HAL_ADC_PollForConversion+0x1e8>)
 8000e46:	400b      	ands	r3, r1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d106      	bne.n	8000e5a <HAL_ADC_PollForConversion+0x112>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	68d9      	ldr	r1, [r3, #12]
 8000e52:	4b38      	ldr	r3, [pc, #224]	; (8000f34 <HAL_ADC_PollForConversion+0x1ec>)
 8000e54:	400b      	ands	r3, r1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00d      	beq.n	8000e76 <HAL_ADC_PollForConversion+0x12e>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6919      	ldr	r1, [r3, #16]
 8000e60:	4b35      	ldr	r3, [pc, #212]	; (8000f38 <HAL_ADC_PollForConversion+0x1f0>)
 8000e62:	400b      	ands	r3, r1
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d108      	bne.n	8000e7a <HAL_ADC_PollForConversion+0x132>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68d9      	ldr	r1, [r3, #12]
 8000e6e:	4b32      	ldr	r3, [pc, #200]	; (8000f38 <HAL_ADC_PollForConversion+0x1f0>)
 8000e70:	400b      	ands	r3, r1
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <HAL_ADC_PollForConversion+0x132>
 8000e76:	2354      	movs	r3, #84	; 0x54
 8000e78:	e000      	b.n	8000e7c <HAL_ADC_PollForConversion+0x134>
 8000e7a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000e7c:	fb03 f302 	mul.w	r3, r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e82:	e01d      	b.n	8000ec0 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e8a:	d016      	beq.n	8000eba <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d007      	beq.n	8000ea2 <HAL_ADC_PollForConversion+0x15a>
 8000e92:	f7ff fda7 	bl	80009e4 <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	1ad2      	subs	r2, r2, r3
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d90b      	bls.n	8000eba <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea6:	f043 0204 	orr.w	r2, r3, #4
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e030      	b.n	8000f1c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d3dd      	bcc.n	8000e84 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f06f 0212 	mvn.w	r2, #18
 8000ed0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ee8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000eec:	d115      	bne.n	8000f1a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68db      	ldr	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d111      	bne.n	8000f1a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d105      	bne.n	8000f1a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f12:	f043 0201 	orr.w	r2, r3, #1
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	371c      	adds	r7, #28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd90      	pop	{r4, r7, pc}
 8000f24:	20000010 	.word	0x20000010
 8000f28:	24924924 	.word	0x24924924
 8000f2c:	00924924 	.word	0x00924924
 8000f30:	12492492 	.word	0x12492492
 8000f34:	00492492 	.word	0x00492492
 8000f38:	00249249 	.word	0x00249249

08000f3c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f54:	b490      	push	{r4, r7}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d101      	bne.n	8000f74 <HAL_ADC_ConfigChannel+0x20>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e0dc      	b.n	800112e <HAL_ADC_ConfigChannel+0x1da>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b06      	cmp	r3, #6
 8000f82:	d81c      	bhi.n	8000fbe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6819      	ldr	r1, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	4613      	mov	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	3b05      	subs	r3, #5
 8000f9a:	221f      	movs	r2, #31
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	4018      	ands	r0, r3
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681c      	ldr	r4, [r3, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	4613      	mov	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	3b05      	subs	r3, #5
 8000fb4:	fa04 f303 	lsl.w	r3, r4, r3
 8000fb8:	4303      	orrs	r3, r0
 8000fba:	634b      	str	r3, [r1, #52]	; 0x34
 8000fbc:	e03c      	b.n	8001038 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b0c      	cmp	r3, #12
 8000fc4:	d81c      	bhi.n	8001000 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6819      	ldr	r1, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	3b23      	subs	r3, #35	; 0x23
 8000fdc:	221f      	movs	r2, #31
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	4018      	ands	r0, r3
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681c      	ldr	r4, [r3, #0]
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	3b23      	subs	r3, #35	; 0x23
 8000ff6:	fa04 f303 	lsl.w	r3, r4, r3
 8000ffa:	4303      	orrs	r3, r0
 8000ffc:	630b      	str	r3, [r1, #48]	; 0x30
 8000ffe:	e01b      	b.n	8001038 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6819      	ldr	r1, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	4613      	mov	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	3b41      	subs	r3, #65	; 0x41
 8001016:	221f      	movs	r2, #31
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	4018      	ands	r0, r3
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681c      	ldr	r4, [r3, #0]
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	3b41      	subs	r3, #65	; 0x41
 8001030:	fa04 f303 	lsl.w	r3, r4, r3
 8001034:	4303      	orrs	r3, r0
 8001036:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b09      	cmp	r3, #9
 800103e:	d91c      	bls.n	800107a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6819      	ldr	r1, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68d8      	ldr	r0, [r3, #12]
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	3b1e      	subs	r3, #30
 8001056:	2207      	movs	r2, #7
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	4018      	ands	r0, r3
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	689c      	ldr	r4, [r3, #8]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4613      	mov	r3, r2
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	4413      	add	r3, r2
 800106e:	3b1e      	subs	r3, #30
 8001070:	fa04 f303 	lsl.w	r3, r4, r3
 8001074:	4303      	orrs	r3, r0
 8001076:	60cb      	str	r3, [r1, #12]
 8001078:	e019      	b.n	80010ae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6819      	ldr	r1, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6918      	ldr	r0, [r3, #16]
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4613      	mov	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	2207      	movs	r2, #7
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	4018      	ands	r0, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689c      	ldr	r4, [r3, #8]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4613      	mov	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	fa04 f303 	lsl.w	r3, r4, r3
 80010aa:	4303      	orrs	r3, r0
 80010ac:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b10      	cmp	r3, #16
 80010b4:	d003      	beq.n	80010be <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010ba:	2b11      	cmp	r3, #17
 80010bc:	d132      	bne.n	8001124 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <HAL_ADC_ConfigChannel+0x1e4>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d125      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d126      	bne.n	8001124 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	6812      	ldr	r2, [r2, #0]
 80010de:	6892      	ldr	r2, [r2, #8]
 80010e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80010e4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b10      	cmp	r3, #16
 80010ec:	d11a      	bne.n	8001124 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <HAL_ADC_ConfigChannel+0x1e8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a13      	ldr	r2, [pc, #76]	; (8001140 <HAL_ADC_ConfigChannel+0x1ec>)
 80010f4:	fba2 2303 	umull	r2, r3, r2, r3
 80010f8:	0c9a      	lsrs	r2, r3, #18
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001104:	e002      	b.n	800110c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	3b01      	subs	r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f9      	bne.n	8001106 <HAL_ADC_ConfigChannel+0x1b2>
 8001112:	e007      	b.n	8001124 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001118:	f043 0220 	orr.w	r2, r3, #32
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bc90      	pop	{r4, r7}
 8001136:	4770      	bx	lr
 8001138:	40012400 	.word	0x40012400
 800113c:	20000010 	.word	0x20000010
 8001140:	431bde83 	.word	0x431bde83

08001144 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b01      	cmp	r3, #1
 8001160:	d039      	beq.n	80011d6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6812      	ldr	r2, [r2, #0]
 800116a:	6892      	ldr	r2, [r2, #8]
 800116c:	f042 0201 	orr.w	r2, r2, #1
 8001170:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001172:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <ADC_Enable+0x9c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a1b      	ldr	r2, [pc, #108]	; (80011e4 <ADC_Enable+0xa0>)
 8001178:	fba2 2303 	umull	r2, r3, r2, r3
 800117c:	0c9b      	lsrs	r3, r3, #18
 800117e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001180:	e002      	b.n	8001188 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	3b01      	subs	r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f9      	bne.n	8001182 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800118e:	f7ff fc29 	bl	80009e4 <HAL_GetTick>
 8001192:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001194:	e018      	b.n	80011c8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001196:	f7ff fc25 	bl	80009e4 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d911      	bls.n	80011c8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	f043 0210 	orr.w	r2, r3, #16
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b4:	f043 0201 	orr.w	r2, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e007      	b.n	80011d8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d1df      	bne.n	8001196 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000010 	.word	0x20000010
 80011e4:	431bde83 	.word	0x431bde83

080011e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d127      	bne.n	8001252 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6812      	ldr	r2, [r2, #0]
 800120a:	6892      	ldr	r2, [r2, #8]
 800120c:	f022 0201 	bic.w	r2, r2, #1
 8001210:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001212:	f7ff fbe7 	bl	80009e4 <HAL_GetTick>
 8001216:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001218:	e014      	b.n	8001244 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800121a:	f7ff fbe3 	bl	80009e4 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d90d      	bls.n	8001244 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	f043 0210 	orr.w	r2, r3, #16
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001238:	f043 0201 	orr.w	r2, r3, #1
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e007      	b.n	8001254 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b01      	cmp	r3, #1
 8001250:	d0e3      	beq.n	800121a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e0ec      	b.n	8001448 <HAL_CAN_Init+0x1ec>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d102      	bne.n	8001280 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f004 ff12 	bl	80060a4 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6812      	ldr	r2, [r2, #0]
 8001288:	6812      	ldr	r2, [r2, #0]
 800128a:	f022 0202 	bic.w	r2, r2, #2
 800128e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001290:	f7ff fba8 	bl	80009e4 <HAL_GetTick>
 8001294:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001296:	e012      	b.n	80012be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001298:	f7ff fba4 	bl	80009e4 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b0a      	cmp	r3, #10
 80012a4:	d90b      	bls.n	80012be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2205      	movs	r2, #5
 80012b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e0c4      	b.n	8001448 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1e5      	bne.n	8001298 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	6812      	ldr	r2, [r2, #0]
 80012d6:	f042 0201 	orr.w	r2, r2, #1
 80012da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012dc:	f7ff fb82 	bl	80009e4 <HAL_GetTick>
 80012e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012e2:	e012      	b.n	800130a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012e4:	f7ff fb7e 	bl	80009e4 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b0a      	cmp	r3, #10
 80012f0:	d90b      	bls.n	800130a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2205      	movs	r2, #5
 8001302:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e09e      	b.n	8001448 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0e5      	beq.n	80012e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7e1b      	ldrb	r3, [r3, #24]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d108      	bne.n	8001332 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	e007      	b.n	8001342 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7e5b      	ldrb	r3, [r3, #25]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d108      	bne.n	800135c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	e007      	b.n	800136c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800136a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	7e9b      	ldrb	r3, [r3, #26]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d108      	bne.n	8001386 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	f042 0220 	orr.w	r2, r2, #32
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e007      	b.n	8001396 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	6812      	ldr	r2, [r2, #0]
 8001390:	f022 0220 	bic.w	r2, r2, #32
 8001394:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7edb      	ldrb	r3, [r3, #27]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d108      	bne.n	80013b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	f022 0210 	bic.w	r2, r2, #16
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	e007      	b.n	80013c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	f042 0210 	orr.w	r2, r2, #16
 80013be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7f1b      	ldrb	r3, [r3, #28]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d108      	bne.n	80013da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	f042 0208 	orr.w	r2, r2, #8
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	e007      	b.n	80013ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	f022 0208 	bic.w	r2, r2, #8
 80013e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7f5b      	ldrb	r3, [r3, #29]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d108      	bne.n	8001404 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	6812      	ldr	r2, [r2, #0]
 80013fc:	f042 0204 	orr.w	r2, r2, #4
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	e007      	b.n	8001414 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	6812      	ldr	r2, [r2, #0]
 800140e:	f022 0204 	bic.w	r2, r2, #4
 8001412:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6891      	ldr	r1, [r2, #8]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	68d2      	ldr	r2, [r2, #12]
 8001420:	4311      	orrs	r1, r2
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6912      	ldr	r2, [r2, #16]
 8001426:	4311      	orrs	r1, r2
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6952      	ldr	r2, [r2, #20]
 800142c:	4311      	orrs	r1, r2
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6852      	ldr	r2, [r2, #4]
 8001432:	3a01      	subs	r2, #1
 8001434:	430a      	orrs	r2, r1
 8001436:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001450:	b480      	push	{r7}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001466:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001468:	7cfb      	ldrb	r3, [r7, #19]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d003      	beq.n	8001476 <HAL_CAN_ConfigFilter+0x26>
 800146e:	7cfb      	ldrb	r3, [r7, #19]
 8001470:	2b02      	cmp	r3, #2
 8001472:	f040 80aa 	bne.w	80015ca <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800147c:	f043 0201 	orr.w	r2, r3, #1
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	f003 031f 	and.w	r3, r3, #31
 800148e:	2201      	movs	r2, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	43db      	mvns	r3, r3
 80014a0:	401a      	ands	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d123      	bne.n	80014f8 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3248      	adds	r2, #72	; 0x48
 80014d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	6892      	ldr	r2, [r2, #8]
 80014e4:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014ee:	6979      	ldr	r1, [r7, #20]
 80014f0:	3348      	adds	r3, #72	; 0x48
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	440b      	add	r3, r1
 80014f6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d122      	bne.n	8001546 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	431a      	orrs	r2, r3
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001520:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3248      	adds	r2, #72	; 0x48
 8001526:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	6892      	ldr	r2, [r2, #8]
 8001532:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	68d2      	ldr	r2, [r2, #12]
 8001538:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800153a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800153c:	6979      	ldr	r1, [r7, #20]
 800153e:	3348      	adds	r3, #72	; 0x48
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	440b      	add	r3, r1
 8001544:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d109      	bne.n	8001562 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43db      	mvns	r3, r3
 8001558:	401a      	ands	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001560:	e007      	b.n	8001572 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	431a      	orrs	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d109      	bne.n	800158e <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	43db      	mvns	r3, r3
 8001584:	401a      	ands	r2, r3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800158c:	e007      	b.n	800159e <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	431a      	orrs	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d107      	bne.n	80015b6 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	431a      	orrs	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015bc:	f023 0201 	bic.w	r2, r3, #1
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e006      	b.n	80015d8 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
  }
}
 80015d8:	4618      	mov	r0, r3
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b084      	sub	sp, #16
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d12e      	bne.n	8001654 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2202      	movs	r2, #2
 80015fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	6812      	ldr	r2, [r2, #0]
 8001608:	f022 0201 	bic.w	r2, r2, #1
 800160c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800160e:	f7ff f9e9 	bl	80009e4 <HAL_GetTick>
 8001612:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001614:	e012      	b.n	800163c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001616:	f7ff f9e5 	bl	80009e4 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b0a      	cmp	r3, #10
 8001622:	d90b      	bls.n	800163c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2205      	movs	r2, #5
 8001634:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e012      	b.n	8001662 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1e5      	bne.n	8001616 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	e006      	b.n	8001662 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
  }
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800166a:	b480      	push	{r7}
 800166c:	b089      	sub	sp, #36	; 0x24
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800167e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001688:	7ffb      	ldrb	r3, [r7, #31]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d003      	beq.n	8001696 <HAL_CAN_AddTxMessage+0x2c>
 800168e:	7ffb      	ldrb	r3, [r7, #31]
 8001690:	2b02      	cmp	r3, #2
 8001692:	f040 80b4 	bne.w	80017fe <HAL_CAN_AddTxMessage+0x194>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10a      	bne.n	80016b6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d105      	bne.n	80016b6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 809c 	beq.w	80017ee <HAL_CAN_AddTxMessage+0x184>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	0e1b      	lsrs	r3, r3, #24
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d907      	bls.n	80016d6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e09a      	b.n	800180c <HAL_CAN_AddTxMessage+0x1a2>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80016d6:	2201      	movs	r2, #1
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10d      	bne.n	8001704 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6819      	ldr	r1, [r3, #0]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016f6:	431a      	orrs	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3318      	adds	r3, #24
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	440b      	add	r3, r1
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e00f      	b.n	8001724 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6819      	ldr	r1, [r3, #0]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001712:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	68db      	ldr	r3, [r3, #12]
                                                           pHeader->IDE |
 8001718:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3318      	adds	r3, #24
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	440b      	add	r3, r1
 8001722:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6819      	ldr	r1, [r3, #0]
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	691a      	ldr	r2, [r3, #16]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	3318      	adds	r3, #24
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	440b      	add	r3, r1
 8001734:	3304      	adds	r3, #4
 8001736:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	7d1b      	ldrb	r3, [r3, #20]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d111      	bne.n	8001764 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6819      	ldr	r1, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	3318      	adds	r3, #24
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	4413      	add	r3, r2
 8001750:	3304      	adds	r3, #4
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3318      	adds	r3, #24
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	440b      	add	r3, r1
 8001760:	3304      	adds	r3, #4
 8001762:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6819      	ldr	r1, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3307      	adds	r3, #7
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	061a      	lsls	r2, r3, #24
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3306      	adds	r3, #6
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	041b      	lsls	r3, r3, #16
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3305      	adds	r3, #5
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	4313      	orrs	r3, r2
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	3204      	adds	r2, #4
 8001788:	7812      	ldrb	r2, [r2, #0]
 800178a:	431a      	orrs	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	440b      	add	r3, r1
 8001792:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001796:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6819      	ldr	r1, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3303      	adds	r3, #3
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	061a      	lsls	r2, r3, #24
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3302      	adds	r3, #2
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	041b      	lsls	r3, r3, #16
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3301      	adds	r3, #1
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	4313      	orrs	r3, r2
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	7812      	ldrb	r2, [r2, #0]
 80017bc:	431a      	orrs	r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	440b      	add	r3, r1
 80017c4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80017c8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6819      	ldr	r1, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3318      	adds	r3, #24
 80017d6:	011b      	lsls	r3, r3, #4
 80017d8:	4413      	add	r3, r2
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f043 0201 	orr.w	r2, r3, #1
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3318      	adds	r3, #24
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	440b      	add	r3, r1
 80017e8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e00e      	b.n	800180c <HAL_CAN_AddTxMessage+0x1a2>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e006      	b.n	800180c <HAL_CAN_AddTxMessage+0x1a2>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
  }
}
 800180c:	4618      	mov	r0, r3
 800180e:	3724      	adds	r7, #36	; 0x24
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001816:	b480      	push	{r7}
 8001818:	b087      	sub	sp, #28
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800182c:	7dfb      	ldrb	r3, [r7, #23]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d003      	beq.n	800183a <HAL_CAN_GetRxMessage+0x24>
 8001832:	7dfb      	ldrb	r3, [r7, #23]
 8001834:	2b02      	cmp	r3, #2
 8001836:	f040 80f4 	bne.w	8001a22 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10e      	bne.n	800185e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d116      	bne.n	800187c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e0e8      	b.n	8001a30 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d107      	bne.n	800187c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0d9      	b.n	8001a30 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	331b      	adds	r3, #27
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	4413      	add	r3, r2
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0204 	and.w	r2, r3, #4
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10c      	bne.n	80018b4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	331b      	adds	r3, #27
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	4413      	add	r3, r2
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	0d5b      	lsrs	r3, r3, #21
 80018aa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	e00b      	b.n	80018cc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	331b      	adds	r3, #27
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	4413      	add	r3, r2
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	08db      	lsrs	r3, r3, #3
 80018c4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	331b      	adds	r3, #27
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	4413      	add	r3, r2
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	085b      	lsrs	r3, r3, #1
 80018dc:	f003 0201 	and.w	r2, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	331b      	adds	r3, #27
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	4413      	add	r3, r2
 80018f0:	3304      	adds	r3, #4
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 020f 	and.w	r2, r3, #15
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	331b      	adds	r3, #27
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	4413      	add	r3, r2
 8001908:	3304      	adds	r3, #4
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	b2da      	uxtb	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	331b      	adds	r3, #27
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	4413      	add	r3, r2
 8001920:	3304      	adds	r3, #4
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	0c1b      	lsrs	r3, r3, #16
 8001926:	b29a      	uxth	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	4413      	add	r3, r2
 8001936:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	3301      	adds	r3, #1
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	6811      	ldr	r1, [r2, #0]
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	440a      	add	r2, r1
 8001950:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	0a12      	lsrs	r2, r2, #8
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	3302      	adds	r3, #2
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	6811      	ldr	r1, [r2, #0]
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	440a      	add	r2, r1
 800196a:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	0c12      	lsrs	r2, r2, #16
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	3303      	adds	r3, #3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	6811      	ldr	r1, [r2, #0]
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	440a      	add	r2, r1
 8001984:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	0e12      	lsrs	r2, r2, #24
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	3304      	adds	r3, #4
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	6811      	ldr	r1, [r2, #0]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	440a      	add	r2, r1
 800199e:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	3305      	adds	r3, #5
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	6811      	ldr	r1, [r2, #0]
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	440a      	add	r2, r1
 80019b6:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	0a12      	lsrs	r2, r2, #8
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	3306      	adds	r3, #6
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	6811      	ldr	r1, [r2, #0]
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	440a      	add	r2, r1
 80019d0:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	0c12      	lsrs	r2, r2, #16
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	3307      	adds	r3, #7
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	6811      	ldr	r1, [r2, #0]
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	440a      	add	r2, r1
 80019ea:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	0e12      	lsrs	r2, r2, #24
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d108      	bne.n	8001a0e <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	68d2      	ldr	r2, [r2, #12]
 8001a06:	f042 0220 	orr.w	r2, r2, #32
 8001a0a:	60da      	str	r2, [r3, #12]
 8001a0c:	e007      	b.n	8001a1e <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	6912      	ldr	r2, [r2, #16]
 8001a18:	f042 0220 	orr.w	r2, r2, #32
 8001a1c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e006      	b.n	8001a30 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
  }
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	371c      	adds	r7, #28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr

08001a3a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b085      	sub	sp, #20
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a4a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d002      	beq.n	8001a58 <HAL_CAN_ActivateNotification+0x1e>
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d109      	bne.n	8001a6c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	6951      	ldr	r1, [r2, #20]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e006      	b.n	8001a7a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	; 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d07c      	beq.n	8001bc4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d023      	beq.n	8001b1c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f97d 	bl	8001de6 <HAL_CAN_TxMailbox0CompleteCallback>
 8001aec:	e016      	b.n	8001b1c <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
 8001b00:	e00c      	b.n	8001b1c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d004      	beq.n	8001b16 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
 8001b14:	e002      	b.n	8001b1c <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f980 	bl	8001e1c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d024      	beq.n	8001b70 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f95c 	bl	8001df8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b40:	e016      	b.n	8001b70 <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d004      	beq.n	8001b56 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
 8001b54:	e00c      	b.n	8001b70 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d004      	beq.n	8001b6a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
 8001b68:	e002      	b.n	8001b70 <HAL_CAN_IRQHandler+0xec>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f95f 	bl	8001e2e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d024      	beq.n	8001bc4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f93b 	bl	8001e0a <HAL_CAN_TxMailbox2CompleteCallback>
 8001b94:	e016      	b.n	8001bc4 <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d004      	beq.n	8001baa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba8:	e00c      	b.n	8001bc4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d004      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbc:	e002      	b.n	8001bc4 <HAL_CAN_IRQHandler+0x140>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f93e 	bl	8001e40 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00c      	beq.n	8001be8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d007      	beq.n	8001be8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2210      	movs	r2, #16
 8001be6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00b      	beq.n	8001c0a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d006      	beq.n	8001c0a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2208      	movs	r2, #8
 8001c02:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f924 	bl	8001e52 <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d009      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f004 f9c2 	bl	8005fac <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00c      	beq.n	8001c4c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d007      	beq.n	8001c4c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2210      	movs	r2, #16
 8001c4a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	f003 0320 	and.w	r3, r3, #32
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00b      	beq.n	8001c6e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d006      	beq.n	8001c6e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2208      	movs	r2, #8
 8001c66:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f904 	bl	8001e76 <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d009      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8ec 	bl	8001e64 <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00b      	beq.n	8001cae <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f003 0310 	and.w	r3, r3, #16
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d006      	beq.n	8001cae <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f8ed 	bl	8001e88 <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00b      	beq.n	8001cd0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f8e5 	bl	8001e9a <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d075      	beq.n	8001dc6 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d06c      	beq.n	8001dbe <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d008      	beq.n	8001d00 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d008      	beq.n	8001d1c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	f043 0302 	orr.w	r3, r3, #2
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d008      	beq.n	8001d38 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d03d      	beq.n	8001dbe <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d038      	beq.n	8001dbe <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d52:	2b30      	cmp	r3, #48	; 0x30
 8001d54:	d017      	beq.n	8001d86 <HAL_CAN_IRQHandler+0x302>
 8001d56:	2b30      	cmp	r3, #48	; 0x30
 8001d58:	d804      	bhi.n	8001d64 <HAL_CAN_IRQHandler+0x2e0>
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d009      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x2ee>
 8001d5e:	2b20      	cmp	r3, #32
 8001d60:	d00c      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d62:	e024      	b.n	8001dae <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001d64:	2b50      	cmp	r3, #80	; 0x50
 8001d66:	d018      	beq.n	8001d9a <HAL_CAN_IRQHandler+0x316>
 8001d68:	2b60      	cmp	r3, #96	; 0x60
 8001d6a:	d01b      	beq.n	8001da4 <HAL_CAN_IRQHandler+0x320>
 8001d6c:	2b40      	cmp	r3, #64	; 0x40
 8001d6e:	d00f      	beq.n	8001d90 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001d70:	e01d      	b.n	8001dae <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	f043 0308 	orr.w	r3, r3, #8
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d7a:	e018      	b.n	8001dae <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	f043 0310 	orr.w	r3, r3, #16
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d84:	e013      	b.n	8001dae <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	f043 0320 	orr.w	r3, r3, #32
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d8e:	e00e      	b.n	8001dae <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d98:	e009      	b.n	8001dae <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001da2:	e004      	b.n	8001dae <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dac:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	6992      	ldr	r2, [r2, #24]
 8001db8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001dbc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f867 	bl	8001eac <HAL_CAN_ErrorCallback>
  }
}
 8001dde:	bf00      	nop
 8001de0:	3728      	adds	r7, #40	; 0x28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr

08001e2e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr

08001e52 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr

08001e76 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
	...

08001ec0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <NVIC_SetPriorityGrouping+0x44>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef2:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <NVIC_SetPriorityGrouping+0x44>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	60d3      	str	r3, [r2, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001f2e:	4908      	ldr	r1, [pc, #32]	; (8001f50 <NVIC_EnableIRQ+0x2c>)
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	095b      	lsrs	r3, r3, #5
 8001f36:	79fa      	ldrb	r2, [r7, #7]
 8001f38:	f002 021f 	and.w	r2, r2, #31
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	e000e100 	.word	0xe000e100

08001f54 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	6039      	str	r1, [r7, #0]
 8001f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	da0b      	bge.n	8001f80 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f68:	490d      	ldr	r1, [pc, #52]	; (8001fa0 <NVIC_SetPriority+0x4c>)
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	3b04      	subs	r3, #4
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f7e:	e009      	b.n	8001f94 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	4908      	ldr	r1, [pc, #32]	; (8001fa4 <NVIC_SetPriority+0x50>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000ed00 	.word	0xe000ed00
 8001fa4:	e000e100 	.word	0xe000e100

08001fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b089      	sub	sp, #36	; 0x24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f1c3 0307 	rsb	r3, r3, #7
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	bf28      	it	cs
 8001fc6:	2304      	movcs	r3, #4
 8001fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	d902      	bls.n	8001fd8 <NVIC_EncodePriority+0x30>
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3b03      	subs	r3, #3
 8001fd6:	e000      	b.n	8001fda <NVIC_EncodePriority+0x32>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fdc:	2201      	movs	r2, #1
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	1e5a      	subs	r2, r3, #1
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	401a      	ands	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fee:	2101      	movs	r1, #1
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	1e59      	subs	r1, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	4313      	orrs	r3, r2
         );
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	; 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002018:	d301      	bcc.n	800201e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201a:	2301      	movs	r3, #1
 800201c:	e00f      	b.n	800203e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <SysTick_Config+0x40>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002026:	210f      	movs	r1, #15
 8002028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800202c:	f7ff ff92 	bl	8001f54 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <SysTick_Config+0x40>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <SysTick_Config+0x40>)
 8002038:	2207      	movs	r2, #7
 800203a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	e000e010 	.word	0xe000e010

0800204c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff33 	bl	8001ec0 <NVIC_SetPriorityGrouping>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002074:	f7ff ff48 	bl	8001f08 <NVIC_GetPriorityGrouping>
 8002078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	6978      	ldr	r0, [r7, #20]
 8002080:	f7ff ff92 	bl	8001fa8 <NVIC_EncodePriority>
 8002084:	4602      	mov	r2, r0
 8002086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff61 	bl	8001f54 <NVIC_SetPriority>
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff3b 	bl	8001f24 <NVIC_EnableIRQ>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ffa2 	bl	8002008 <SysTick_Config>
 80020c4:	4603      	mov	r3, r0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b08b      	sub	sp, #44	; 0x2c
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
 80020f2:	e127      	b.n	8002344 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80020f4:	2201      	movs	r2, #1
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	429a      	cmp	r2, r3
 800210e:	f040 8116 	bne.w	800233e <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b12      	cmp	r3, #18
 8002118:	d034      	beq.n	8002184 <HAL_GPIO_Init+0xb4>
 800211a:	2b12      	cmp	r3, #18
 800211c:	d80d      	bhi.n	800213a <HAL_GPIO_Init+0x6a>
 800211e:	2b02      	cmp	r3, #2
 8002120:	d02b      	beq.n	800217a <HAL_GPIO_Init+0xaa>
 8002122:	2b02      	cmp	r3, #2
 8002124:	d804      	bhi.n	8002130 <HAL_GPIO_Init+0x60>
 8002126:	2b00      	cmp	r3, #0
 8002128:	d031      	beq.n	800218e <HAL_GPIO_Init+0xbe>
 800212a:	2b01      	cmp	r3, #1
 800212c:	d01c      	beq.n	8002168 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800212e:	e048      	b.n	80021c2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8002130:	2b03      	cmp	r3, #3
 8002132:	d043      	beq.n	80021bc <HAL_GPIO_Init+0xec>
 8002134:	2b11      	cmp	r3, #17
 8002136:	d01b      	beq.n	8002170 <HAL_GPIO_Init+0xa0>
          break;
 8002138:	e043      	b.n	80021c2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800213a:	4a87      	ldr	r2, [pc, #540]	; (8002358 <HAL_GPIO_Init+0x288>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d026      	beq.n	800218e <HAL_GPIO_Init+0xbe>
 8002140:	4a85      	ldr	r2, [pc, #532]	; (8002358 <HAL_GPIO_Init+0x288>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d806      	bhi.n	8002154 <HAL_GPIO_Init+0x84>
 8002146:	4a85      	ldr	r2, [pc, #532]	; (800235c <HAL_GPIO_Init+0x28c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d020      	beq.n	800218e <HAL_GPIO_Init+0xbe>
 800214c:	4a84      	ldr	r2, [pc, #528]	; (8002360 <HAL_GPIO_Init+0x290>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01d      	beq.n	800218e <HAL_GPIO_Init+0xbe>
          break;
 8002152:	e036      	b.n	80021c2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8002154:	4a83      	ldr	r2, [pc, #524]	; (8002364 <HAL_GPIO_Init+0x294>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d019      	beq.n	800218e <HAL_GPIO_Init+0xbe>
 800215a:	4a83      	ldr	r2, [pc, #524]	; (8002368 <HAL_GPIO_Init+0x298>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d016      	beq.n	800218e <HAL_GPIO_Init+0xbe>
 8002160:	4a82      	ldr	r2, [pc, #520]	; (800236c <HAL_GPIO_Init+0x29c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <HAL_GPIO_Init+0xbe>
          break;
 8002166:	e02c      	b.n	80021c2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	623b      	str	r3, [r7, #32]
          break;
 800216e:	e028      	b.n	80021c2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	3304      	adds	r3, #4
 8002176:	623b      	str	r3, [r7, #32]
          break;
 8002178:	e023      	b.n	80021c2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	3308      	adds	r3, #8
 8002180:	623b      	str	r3, [r7, #32]
          break;
 8002182:	e01e      	b.n	80021c2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	330c      	adds	r3, #12
 800218a:	623b      	str	r3, [r7, #32]
          break;
 800218c:	e019      	b.n	80021c2 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d102      	bne.n	800219c <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002196:	2304      	movs	r3, #4
 8002198:	623b      	str	r3, [r7, #32]
          break;
 800219a:	e012      	b.n	80021c2 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d105      	bne.n	80021b0 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021a4:	2308      	movs	r3, #8
 80021a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	611a      	str	r2, [r3, #16]
          break;
 80021ae:	e008      	b.n	80021c2 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021b0:	2308      	movs	r3, #8
 80021b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	615a      	str	r2, [r3, #20]
          break;
 80021ba:	e002      	b.n	80021c2 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021bc:	2300      	movs	r3, #0
 80021be:	623b      	str	r3, [r7, #32]
          break;
 80021c0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2bff      	cmp	r3, #255	; 0xff
 80021c6:	d801      	bhi.n	80021cc <HAL_GPIO_Init+0xfc>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	e001      	b.n	80021d0 <HAL_GPIO_Init+0x100>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3304      	adds	r3, #4
 80021d0:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	2bff      	cmp	r3, #255	; 0xff
 80021d6:	d802      	bhi.n	80021de <HAL_GPIO_Init+0x10e>
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	e002      	b.n	80021e4 <HAL_GPIO_Init+0x114>
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	3b08      	subs	r3, #8
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	210f      	movs	r1, #15
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	401a      	ands	r2, r3
 80021f6:	6a39      	ldr	r1, [r7, #32]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	431a      	orrs	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 8096 	beq.w	800233e <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002212:	4a57      	ldr	r2, [pc, #348]	; (8002370 <HAL_GPIO_Init+0x2a0>)
 8002214:	4b56      	ldr	r3, [pc, #344]	; (8002370 <HAL_GPIO_Init+0x2a0>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6193      	str	r3, [r2, #24]
 800221e:	4b54      	ldr	r3, [pc, #336]	; (8002370 <HAL_GPIO_Init+0x2a0>)
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800222a:	4a52      	ldr	r2, [pc, #328]	; (8002374 <HAL_GPIO_Init+0x2a4>)
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	3302      	adds	r3, #2
 8002232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002236:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	220f      	movs	r2, #15
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	4013      	ands	r3, r2
 800224c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a49      	ldr	r2, [pc, #292]	; (8002378 <HAL_GPIO_Init+0x2a8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <HAL_GPIO_Init+0x1ae>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a48      	ldr	r2, [pc, #288]	; (800237c <HAL_GPIO_Init+0x2ac>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00d      	beq.n	800227a <HAL_GPIO_Init+0x1aa>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a47      	ldr	r2, [pc, #284]	; (8002380 <HAL_GPIO_Init+0x2b0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d007      	beq.n	8002276 <HAL_GPIO_Init+0x1a6>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a46      	ldr	r2, [pc, #280]	; (8002384 <HAL_GPIO_Init+0x2b4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d101      	bne.n	8002272 <HAL_GPIO_Init+0x1a2>
 800226e:	2303      	movs	r3, #3
 8002270:	e006      	b.n	8002280 <HAL_GPIO_Init+0x1b0>
 8002272:	2304      	movs	r3, #4
 8002274:	e004      	b.n	8002280 <HAL_GPIO_Init+0x1b0>
 8002276:	2302      	movs	r3, #2
 8002278:	e002      	b.n	8002280 <HAL_GPIO_Init+0x1b0>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_GPIO_Init+0x1b0>
 800227e:	2300      	movs	r3, #0
 8002280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002282:	f002 0203 	and.w	r2, r2, #3
 8002286:	0092      	lsls	r2, r2, #2
 8002288:	4093      	lsls	r3, r2
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4313      	orrs	r3, r2
 800228e:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8002290:	4938      	ldr	r1, [pc, #224]	; (8002374 <HAL_GPIO_Init+0x2a4>)
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	3302      	adds	r3, #2
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d006      	beq.n	80022b8 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022aa:	4937      	ldr	r1, [pc, #220]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 80022ac:	4b36      	ldr	r3, [pc, #216]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
 80022b6:	e006      	b.n	80022c6 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022b8:	4933      	ldr	r1, [pc, #204]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 80022ba:	4b33      	ldr	r3, [pc, #204]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	4013      	ands	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d006      	beq.n	80022e0 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022d2:	492d      	ldr	r1, [pc, #180]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 80022d4:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
 80022de:	e006      	b.n	80022ee <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022e0:	4929      	ldr	r1, [pc, #164]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 80022e2:	4b29      	ldr	r3, [pc, #164]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	4013      	ands	r3, r2
 80022ec:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d006      	beq.n	8002308 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022fa:	4923      	ldr	r1, [pc, #140]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 80022fc:	4b22      	ldr	r3, [pc, #136]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	608b      	str	r3, [r1, #8]
 8002306:	e006      	b.n	8002316 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002308:	491f      	ldr	r1, [pc, #124]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 800230a:	4b1f      	ldr	r3, [pc, #124]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	43db      	mvns	r3, r3
 8002312:	4013      	ands	r3, r2
 8002314:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d006      	beq.n	8002330 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002322:	4919      	ldr	r1, [pc, #100]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 8002324:	4b18      	ldr	r3, [pc, #96]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	60cb      	str	r3, [r1, #12]
 800232e:	e006      	b.n	800233e <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002330:	4915      	ldr	r1, [pc, #84]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 8002332:	4b15      	ldr	r3, [pc, #84]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	43db      	mvns	r3, r3
 800233a:	4013      	ands	r3, r2
 800233c:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	3301      	adds	r3, #1
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	2b0f      	cmp	r3, #15
 8002348:	f67f aed4 	bls.w	80020f4 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 800234c:	bf00      	nop
 800234e:	372c      	adds	r7, #44	; 0x2c
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	10210000 	.word	0x10210000
 800235c:	10110000 	.word	0x10110000
 8002360:	10120000 	.word	0x10120000
 8002364:	10310000 	.word	0x10310000
 8002368:	10320000 	.word	0x10320000
 800236c:	10220000 	.word	0x10220000
 8002370:	40021000 	.word	0x40021000
 8002374:	40010000 	.word	0x40010000
 8002378:	40010800 	.word	0x40010800
 800237c:	40010c00 	.word	0x40010c00
 8002380:	40011000 	.word	0x40011000
 8002384:	40011400 	.word	0x40011400
 8002388:	40010400 	.word	0x40010400

0800238c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	887b      	ldrh	r3, [r7, #2]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	e001      	b.n	80023ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	460b      	mov	r3, r1
 80023c4:	807b      	strh	r3, [r7, #2]
 80023c6:	4613      	mov	r3, r2
 80023c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ca:	787b      	ldrb	r3, [r7, #1]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d0:	887a      	ldrh	r2, [r7, #2]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d6:	e003      	b.n	80023e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023d8:	887b      	ldrh	r3, [r7, #2]
 80023da:	041a      	lsls	r2, r3, #16
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	611a      	str	r2, [r3, #16]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr

080023ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	887b      	ldrh	r3, [r7, #2]
 80023fc:	405a      	eors	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	60da      	str	r2, [r3, #12]
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8087 	beq.w	8002534 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002426:	4b92      	ldr	r3, [pc, #584]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b04      	cmp	r3, #4
 8002430:	d00c      	beq.n	800244c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002432:	4b8f      	ldr	r3, [pc, #572]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	2b08      	cmp	r3, #8
 800243c:	d112      	bne.n	8002464 <HAL_RCC_OscConfig+0x58>
 800243e:	4b8c      	ldr	r3, [pc, #560]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800244a:	d10b      	bne.n	8002464 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244c:	4b88      	ldr	r3, [pc, #544]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d06c      	beq.n	8002532 <HAL_RCC_OscConfig+0x126>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d168      	bne.n	8002532 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e22d      	b.n	80028c0 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246c:	d106      	bne.n	800247c <HAL_RCC_OscConfig+0x70>
 800246e:	4a80      	ldr	r2, [pc, #512]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 8002470:	4b7f      	ldr	r3, [pc, #508]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e02e      	b.n	80024da <HAL_RCC_OscConfig+0xce>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10c      	bne.n	800249e <HAL_RCC_OscConfig+0x92>
 8002484:	4a7a      	ldr	r2, [pc, #488]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 8002486:	4b7a      	ldr	r3, [pc, #488]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4a77      	ldr	r2, [pc, #476]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 8002492:	4b77      	ldr	r3, [pc, #476]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	e01d      	b.n	80024da <HAL_RCC_OscConfig+0xce>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a6:	d10c      	bne.n	80024c2 <HAL_RCC_OscConfig+0xb6>
 80024a8:	4a71      	ldr	r2, [pc, #452]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 80024aa:	4b71      	ldr	r3, [pc, #452]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4a6e      	ldr	r2, [pc, #440]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 80024b6:	4b6e      	ldr	r3, [pc, #440]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	e00b      	b.n	80024da <HAL_RCC_OscConfig+0xce>
 80024c2:	4a6b      	ldr	r2, [pc, #428]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 80024c4:	4b6a      	ldr	r3, [pc, #424]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	4a68      	ldr	r2, [pc, #416]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 80024d0:	4b67      	ldr	r3, [pc, #412]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d8:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d013      	beq.n	800250a <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e2:	f7fe fa7f 	bl	80009e4 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ea:	f7fe fa7b 	bl	80009e4 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b64      	cmp	r3, #100	; 0x64
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e1e1      	b.n	80028c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fc:	4b5c      	ldr	r3, [pc, #368]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0xde>
 8002508:	e014      	b.n	8002534 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250a:	f7fe fa6b 	bl	80009e4 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002512:	f7fe fa67 	bl	80009e4 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b64      	cmp	r3, #100	; 0x64
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e1cd      	b.n	80028c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002524:	4b52      	ldr	r3, [pc, #328]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f0      	bne.n	8002512 <HAL_RCC_OscConfig+0x106>
 8002530:	e000      	b.n	8002534 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002532:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d063      	beq.n	8002608 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002540:	4b4b      	ldr	r3, [pc, #300]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 030c 	and.w	r3, r3, #12
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00b      	beq.n	8002564 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800254c:	4b48      	ldr	r3, [pc, #288]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	2b08      	cmp	r3, #8
 8002556:	d11c      	bne.n	8002592 <HAL_RCC_OscConfig+0x186>
 8002558:	4b45      	ldr	r3, [pc, #276]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d116      	bne.n	8002592 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002564:	4b42      	ldr	r3, [pc, #264]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_OscConfig+0x170>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d001      	beq.n	800257c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e1a1      	b.n	80028c0 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257c:	493c      	ldr	r1, [pc, #240]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 800257e:	4b3c      	ldr	r3, [pc, #240]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002590:	e03a      	b.n	8002608 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d020      	beq.n	80025dc <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800259a:	4b36      	ldr	r3, [pc, #216]	; (8002674 <HAL_RCC_OscConfig+0x268>)
 800259c:	2201      	movs	r2, #1
 800259e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7fe fa20 	bl	80009e4 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a8:	f7fe fa1c 	bl	80009e4 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e182      	b.n	80028c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ba:	4b2d      	ldr	r3, [pc, #180]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c6:	492a      	ldr	r1, [pc, #168]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 80025c8:	4b29      	ldr	r3, [pc, #164]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]
 80025da:	e015      	b.n	8002608 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025dc:	4b25      	ldr	r3, [pc, #148]	; (8002674 <HAL_RCC_OscConfig+0x268>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e2:	f7fe f9ff 	bl	80009e4 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ea:	f7fe f9fb 	bl	80009e4 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e161      	b.n	80028c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fc:	4b1c      	ldr	r3, [pc, #112]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f0      	bne.n	80025ea <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d039      	beq.n	8002688 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d019      	beq.n	8002650 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261c:	4b16      	ldr	r3, [pc, #88]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 800261e:	2201      	movs	r2, #1
 8002620:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002622:	f7fe f9df 	bl	80009e4 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800262a:	f7fe f9db 	bl	80009e4 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e141      	b.n	80028c0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <HAL_RCC_OscConfig+0x264>)
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002648:	2001      	movs	r0, #1
 800264a:	f000 fae3 	bl	8002c14 <RCC_Delay>
 800264e:	e01b      	b.n	8002688 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002656:	f7fe f9c5 	bl	80009e4 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265c:	e00e      	b.n	800267c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800265e:	f7fe f9c1 	bl	80009e4 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d907      	bls.n	800267c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e127      	b.n	80028c0 <HAL_RCC_OscConfig+0x4b4>
 8002670:	40021000 	.word	0x40021000
 8002674:	42420000 	.word	0x42420000
 8002678:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267c:	4b92      	ldr	r3, [pc, #584]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ea      	bne.n	800265e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80a6 	beq.w	80027e2 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002696:	2300      	movs	r3, #0
 8002698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269a:	4b8b      	ldr	r3, [pc, #556]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10d      	bne.n	80026c2 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	4a88      	ldr	r2, [pc, #544]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 80026a8:	4b87      	ldr	r3, [pc, #540]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b0:	61d3      	str	r3, [r2, #28]
 80026b2:	4b85      	ldr	r3, [pc, #532]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026be:	2301      	movs	r3, #1
 80026c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c2:	4b82      	ldr	r3, [pc, #520]	; (80028cc <HAL_RCC_OscConfig+0x4c0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d118      	bne.n	8002700 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ce:	4a7f      	ldr	r2, [pc, #508]	; (80028cc <HAL_RCC_OscConfig+0x4c0>)
 80026d0:	4b7e      	ldr	r3, [pc, #504]	; (80028cc <HAL_RCC_OscConfig+0x4c0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026da:	f7fe f983 	bl	80009e4 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e2:	f7fe f97f 	bl	80009e4 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b64      	cmp	r3, #100	; 0x64
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e0e5      	b.n	80028c0 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f4:	4b75      	ldr	r3, [pc, #468]	; (80028cc <HAL_RCC_OscConfig+0x4c0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d106      	bne.n	8002716 <HAL_RCC_OscConfig+0x30a>
 8002708:	4a6f      	ldr	r2, [pc, #444]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 800270a:	4b6f      	ldr	r3, [pc, #444]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	6213      	str	r3, [r2, #32]
 8002714:	e02d      	b.n	8002772 <HAL_RCC_OscConfig+0x366>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0x32c>
 800271e:	4a6a      	ldr	r2, [pc, #424]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 8002720:	4b69      	ldr	r3, [pc, #420]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	6213      	str	r3, [r2, #32]
 800272a:	4a67      	ldr	r2, [pc, #412]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 800272c:	4b66      	ldr	r3, [pc, #408]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	f023 0304 	bic.w	r3, r3, #4
 8002734:	6213      	str	r3, [r2, #32]
 8002736:	e01c      	b.n	8002772 <HAL_RCC_OscConfig+0x366>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2b05      	cmp	r3, #5
 800273e:	d10c      	bne.n	800275a <HAL_RCC_OscConfig+0x34e>
 8002740:	4a61      	ldr	r2, [pc, #388]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 8002742:	4b61      	ldr	r3, [pc, #388]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	f043 0304 	orr.w	r3, r3, #4
 800274a:	6213      	str	r3, [r2, #32]
 800274c:	4a5e      	ldr	r2, [pc, #376]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 800274e:	4b5e      	ldr	r3, [pc, #376]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6213      	str	r3, [r2, #32]
 8002758:	e00b      	b.n	8002772 <HAL_RCC_OscConfig+0x366>
 800275a:	4a5b      	ldr	r2, [pc, #364]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 800275c:	4b5a      	ldr	r3, [pc, #360]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6213      	str	r3, [r2, #32]
 8002766:	4a58      	ldr	r2, [pc, #352]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 8002768:	4b57      	ldr	r3, [pc, #348]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f023 0304 	bic.w	r3, r3, #4
 8002770:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d015      	beq.n	80027a6 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277a:	f7fe f933 	bl	80009e4 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002780:	e00a      	b.n	8002798 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002782:	f7fe f92f 	bl	80009e4 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002790:	4293      	cmp	r3, r2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e093      	b.n	80028c0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002798:	4b4b      	ldr	r3, [pc, #300]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0ee      	beq.n	8002782 <HAL_RCC_OscConfig+0x376>
 80027a4:	e014      	b.n	80027d0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a6:	f7fe f91d 	bl	80009e4 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ac:	e00a      	b.n	80027c4 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7fe f919 	bl	80009e4 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027bc:	4293      	cmp	r3, r2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e07d      	b.n	80028c0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c4:	4b40      	ldr	r3, [pc, #256]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1ee      	bne.n	80027ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d105      	bne.n	80027e2 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d6:	4a3c      	ldr	r2, [pc, #240]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 80027d8:	4b3b      	ldr	r3, [pc, #236]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d069      	beq.n	80028be <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ea:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d061      	beq.n	80028ba <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d146      	bne.n	800288c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fe:	4b34      	ldr	r3, [pc, #208]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002804:	f7fe f8ee 	bl	80009e4 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280c:	f7fe f8ea 	bl	80009e4 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e050      	b.n	80028c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281e:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002832:	d108      	bne.n	8002846 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002834:	4924      	ldr	r1, [pc, #144]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 8002836:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002846:	4820      	ldr	r0, [pc, #128]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 8002848:	4b1f      	ldr	r3, [pc, #124]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a19      	ldr	r1, [r3, #32]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	430b      	orrs	r3, r1
 800285a:	4313      	orrs	r3, r2
 800285c:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800285e:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7fe f8be 	bl	80009e4 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe f8ba 	bl	80009e4 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e020      	b.n	80028c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x460>
 800288a:	e018      	b.n	80028be <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7fe f8a7 	bl	80009e4 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289a:	f7fe f8a3 	bl	80009e4 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e009      	b.n	80028c0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_RCC_OscConfig+0x4bc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f0      	bne.n	800289a <HAL_RCC_OscConfig+0x48e>
 80028b8:	e001      	b.n	80028be <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40007000 	.word	0x40007000
 80028d0:	42420060 	.word	0x42420060

080028d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80028e2:	4b7e      	ldr	r3, [pc, #504]	; (8002adc <HAL_RCC_ClockConfig+0x208>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0207 	and.w	r2, r3, #7
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d210      	bcs.n	8002912 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f0:	497a      	ldr	r1, [pc, #488]	; (8002adc <HAL_RCC_ClockConfig+0x208>)
 80028f2:	4b7a      	ldr	r3, [pc, #488]	; (8002adc <HAL_RCC_ClockConfig+0x208>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 0207 	bic.w	r2, r3, #7
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002900:	4b76      	ldr	r3, [pc, #472]	; (8002adc <HAL_RCC_ClockConfig+0x208>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0207 	and.w	r2, r3, #7
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d001      	beq.n	8002912 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e0e0      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d020      	beq.n	8002960 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800292a:	4a6d      	ldr	r2, [pc, #436]	; (8002ae0 <HAL_RCC_ClockConfig+0x20c>)
 800292c:	4b6c      	ldr	r3, [pc, #432]	; (8002ae0 <HAL_RCC_ClockConfig+0x20c>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002934:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002942:	4a67      	ldr	r2, [pc, #412]	; (8002ae0 <HAL_RCC_ClockConfig+0x20c>)
 8002944:	4b66      	ldr	r3, [pc, #408]	; (8002ae0 <HAL_RCC_ClockConfig+0x20c>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800294c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800294e:	4964      	ldr	r1, [pc, #400]	; (8002ae0 <HAL_RCC_ClockConfig+0x20c>)
 8002950:	4b63      	ldr	r3, [pc, #396]	; (8002ae0 <HAL_RCC_ClockConfig+0x20c>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	4313      	orrs	r3, r2
 800295e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d06a      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d107      	bne.n	8002984 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002974:	4b5a      	ldr	r3, [pc, #360]	; (8002ae0 <HAL_RCC_ClockConfig+0x20c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d115      	bne.n	80029ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0a7      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d107      	bne.n	800299c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298c:	4b54      	ldr	r3, [pc, #336]	; (8002ae0 <HAL_RCC_ClockConfig+0x20c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d109      	bne.n	80029ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e09b      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299c:	4b50      	ldr	r3, [pc, #320]	; (8002ae0 <HAL_RCC_ClockConfig+0x20c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e093      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ac:	494c      	ldr	r1, [pc, #304]	; (8002ae0 <HAL_RCC_ClockConfig+0x20c>)
 80029ae:	4b4c      	ldr	r3, [pc, #304]	; (8002ae0 <HAL_RCC_ClockConfig+0x20c>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029be:	f7fe f811 	bl	80009e4 <HAL_GetTick>
 80029c2:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d112      	bne.n	80029f2 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029cc:	e00a      	b.n	80029e4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ce:	f7fe f809 	bl	80009e4 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029dc:	4293      	cmp	r3, r2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e077      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e4:	4b3e      	ldr	r3, [pc, #248]	; (8002ae0 <HAL_RCC_ClockConfig+0x20c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 030c 	and.w	r3, r3, #12
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d1ee      	bne.n	80029ce <HAL_RCC_ClockConfig+0xfa>
 80029f0:	e027      	b.n	8002a42 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d11d      	bne.n	8002a36 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029fc:	f7fd fff2 	bl	80009e4 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e060      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a12:	4b33      	ldr	r3, [pc, #204]	; (8002ae0 <HAL_RCC_ClockConfig+0x20c>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d1ee      	bne.n	80029fc <HAL_RCC_ClockConfig+0x128>
 8002a1e:	e010      	b.n	8002a42 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a20:	f7fd ffe0 	bl	80009e4 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e04e      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a36:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <HAL_RCC_ClockConfig+0x20c>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1ee      	bne.n	8002a20 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002a42:	4b26      	ldr	r3, [pc, #152]	; (8002adc <HAL_RCC_ClockConfig+0x208>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0207 	and.w	r2, r3, #7
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d910      	bls.n	8002a72 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a50:	4922      	ldr	r1, [pc, #136]	; (8002adc <HAL_RCC_ClockConfig+0x208>)
 8002a52:	4b22      	ldr	r3, [pc, #136]	; (8002adc <HAL_RCC_ClockConfig+0x208>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 0207 	bic.w	r2, r3, #7
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a60:	4b1e      	ldr	r3, [pc, #120]	; (8002adc <HAL_RCC_ClockConfig+0x208>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0207 	and.w	r2, r3, #7
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d001      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e030      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d008      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a7e:	4918      	ldr	r1, [pc, #96]	; (8002ae0 <HAL_RCC_ClockConfig+0x20c>)
 8002a80:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <HAL_RCC_ClockConfig+0x20c>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d009      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a9c:	4910      	ldr	r1, [pc, #64]	; (8002ae0 <HAL_RCC_ClockConfig+0x20c>)
 8002a9e:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <HAL_RCC_ClockConfig+0x20c>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ab0:	f000 f81c 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8002ab4:	4601      	mov	r1, r0
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <HAL_RCC_ClockConfig+0x20c>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	4a08      	ldr	r2, [pc, #32]	; (8002ae4 <HAL_RCC_ClockConfig+0x210>)
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	fa21 f303 	lsr.w	r3, r1, r3
 8002ac8:	4a07      	ldr	r2, [pc, #28]	; (8002ae8 <HAL_RCC_ClockConfig+0x214>)
 8002aca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7fd ff47 	bl	8000960 <HAL_InitTick>
  
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40022000 	.word	0x40022000
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	080072c0 	.word	0x080072c0
 8002ae8:	20000010 	.word	0x20000010

08002aec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aec:	b490      	push	{r4, r7}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002af2:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002af4:	1d3c      	adds	r4, r7, #4
 8002af6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002af8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002afc:	4b28      	ldr	r3, [pc, #160]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	2300      	movs	r3, #0
 8002b08:	61bb      	str	r3, [r7, #24]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b16:	4b23      	ldr	r3, [pc, #140]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d002      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x40>
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d003      	beq.n	8002b32 <HAL_RCC_GetSysClockFreq+0x46>
 8002b2a:	e02d      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b2e:	623b      	str	r3, [r7, #32]
      break;
 8002b30:	e02d      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	0c9b      	lsrs	r3, r3, #18
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b3e:	4413      	add	r3, r2
 8002b40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d013      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b50:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	0c5b      	lsrs	r3, r3, #17
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b5e:	4413      	add	r3, r2
 8002b60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b64:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	4a0f      	ldr	r2, [pc, #60]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b6a:	fb02 f203 	mul.w	r2, r2, r3
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
 8002b76:	e004      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	4a0c      	ldr	r2, [pc, #48]	; (8002bac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b7c:	fb02 f303 	mul.w	r3, r2, r3
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	623b      	str	r3, [r7, #32]
      break;
 8002b86:	e002      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b88:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b8a:	623b      	str	r3, [r7, #32]
      break;
 8002b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3728      	adds	r7, #40	; 0x28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc90      	pop	{r4, r7}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	08006d44 	.word	0x08006d44
 8002ba0:	08006d54 	.word	0x08006d54
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	007a1200 	.word	0x007a1200
 8002bac:	003d0900 	.word	0x003d0900

08002bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb4:	4b02      	ldr	r3, [pc, #8]	; (8002bc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr
 8002bc0:	20000010 	.word	0x20000010

08002bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bc8:	f7ff fff2 	bl	8002bb0 <HAL_RCC_GetHCLKFreq>
 8002bcc:	4601      	mov	r1, r0
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4a03      	ldr	r2, [pc, #12]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bda:	5cd3      	ldrb	r3, [r2, r3]
 8002bdc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40021000 	.word	0x40021000
 8002be8:	080072d0 	.word	0x080072d0

08002bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bf0:	f7ff ffde 	bl	8002bb0 <HAL_RCC_GetHCLKFreq>
 8002bf4:	4601      	mov	r1, r0
 8002bf6:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	0adb      	lsrs	r3, r3, #11
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4a03      	ldr	r2, [pc, #12]	; (8002c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
 8002c04:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	080072d0 	.word	0x080072d0

08002c14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c1c:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <RCC_Delay+0x34>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <RCC_Delay+0x38>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	0a5b      	lsrs	r3, r3, #9
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002c30:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	1e5a      	subs	r2, r3, #1
 8002c36:	60fa      	str	r2, [r7, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1f9      	bne.n	8002c30 <RCC_Delay+0x1c>
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	20000010 	.word	0x20000010
 8002c4c:	10624dd3 	.word	0x10624dd3

08002c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d07d      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c70:	4b4f      	ldr	r3, [pc, #316]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10d      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c7c:	4a4c      	ldr	r2, [pc, #304]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c7e:	4b4c      	ldr	r3, [pc, #304]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c86:	61d3      	str	r3, [r2, #28]
 8002c88:	4b49      	ldr	r3, [pc, #292]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c94:	2301      	movs	r3, #1
 8002c96:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	4b46      	ldr	r3, [pc, #280]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d118      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca4:	4a43      	ldr	r2, [pc, #268]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ca6:	4b43      	ldr	r3, [pc, #268]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cae:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb0:	f7fd fe98 	bl	80009e4 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb6:	e008      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb8:	f7fd fe94 	bl	80009e4 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e06d      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cca:	4b3a      	ldr	r3, [pc, #232]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cd6:	4b36      	ldr	r3, [pc, #216]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cde:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d02e      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d027      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cf4:	4b2e      	ldr	r3, [pc, #184]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cfc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cfe:	4b2e      	ldr	r3, [pc, #184]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d04:	4b2c      	ldr	r3, [pc, #176]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d0a:	4a29      	ldr	r2, [pc, #164]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d014      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1a:	f7fd fe63 	bl	80009e4 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d20:	e00a      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d22:	f7fd fe5f 	bl	80009e4 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e036      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d38:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0ee      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d44:	491a      	ldr	r1, [pc, #104]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d46:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d56:	7dfb      	ldrb	r3, [r7, #23]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d105      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5c:	4a14      	ldr	r2, [pc, #80]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d74:	490e      	ldr	r1, [pc, #56]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d76:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d008      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d92:	4907      	ldr	r1, [pc, #28]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40007000 	.word	0x40007000
 8002db8:	42420440 	.word	0x42420440

08002dbc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b08d      	sub	sp, #52	; 0x34
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002dc4:	4b57      	ldr	r3, [pc, #348]	; (8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002dc6:	f107 040c 	add.w	r4, r7, #12
 8002dca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002dd0:	4b55      	ldr	r3, [pc, #340]	; (8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dda:	2300      	movs	r3, #0
 8002ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dde:	2300      	movs	r3, #0
 8002de0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	2300      	movs	r3, #0
 8002de8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	f000 8084 	beq.w	8002efa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002df2:	2b10      	cmp	r3, #16
 8002df4:	d002      	beq.n	8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d049      	beq.n	8002e8e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
  default: 
    {
      break;
 8002dfa:	e08d      	b.n	8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->CFGR;
 8002dfc:	4b4b      	ldr	r3, [pc, #300]	; (8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8002e02:	4b4a      	ldr	r3, [pc, #296]	; (8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 8083 	beq.w	8002f16 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	0c9b      	lsrs	r3, r3, #18
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e22:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d018      	beq.n	8002e60 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e2e:	4b3f      	ldr	r3, [pc, #252]	; (8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	0c5b      	lsrs	r3, r3, #17
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00d      	beq.n	8002e6a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e4e:	4a38      	ldr	r2, [pc, #224]	; (8002f30 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e56:	6a3a      	ldr	r2, [r7, #32]
 8002e58:	fb02 f303 	mul.w	r3, r2, r3
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e5e:	e004      	b.n	8002e6a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	4a34      	ldr	r2, [pc, #208]	; (8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002e64:	fb02 f303 	mul.w	r3, r2, r3
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e6a:	4b30      	ldr	r3, [pc, #192]	; (8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e76:	d102      	bne.n	8002e7e <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
          frequency = pllclk;
 8002e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e7c:	e04b      	b.n	8002f16 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          frequency = (pllclk * 2) / 3;
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	4a2d      	ldr	r2, [pc, #180]	; (8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	085b      	lsrs	r3, r3, #1
 8002e8a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e8c:	e043      	b.n	8002f16 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      temp_reg = RCC->BDCR;
 8002e8e:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e9e:	d108      	bne.n	8002eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
        frequency = LSE_VALUE;
 8002eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eb0:	e022      	b.n	8002ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ebc:	d109      	bne.n	8002ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 8002ebe:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        frequency = LSI_VALUE;
 8002eca:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed0:	e012      	b.n	8002ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002edc:	d109      	bne.n	8002ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 8002ede:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
        frequency = HSE_VALUE / 128U;
 8002eea:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ef0:	e002      	b.n	8002ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ef6:	e00f      	b.n	8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8002ef8:	e00e      	b.n	8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002efa:	f7ff fe77 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 8002efe:	4602      	mov	r2, r0
 8002f00:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	0b9b      	lsrs	r3, r3, #14
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f14:	e000      	b.n	8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      break;
 8002f16:	bf00      	nop
    }
  }
  return(frequency);
 8002f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3734      	adds	r7, #52	; 0x34
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd90      	pop	{r4, r7, pc}
 8002f22:	bf00      	nop
 8002f24:	08006d58 	.word	0x08006d58
 8002f28:	08006d68 	.word	0x08006d68
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	007a1200 	.word	0x007a1200
 8002f34:	003d0900 	.word	0x003d0900
 8002f38:	aaaaaaab 	.word	0xaaaaaaab

08002f3c <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	; 0x28
 8002f40:	af02      	add	r7, sp, #8
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_SPI_Transmit+0x26>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e123      	b.n	80031aa <HAL_SPI_Transmit+0x26e>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f6a:	f7fd fd3b 	bl	80009e4 <HAL_GetTick>
 8002f6e:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d002      	beq.n	8002f82 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f80:	e10a      	b.n	8003198 <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0U))
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <HAL_SPI_Transmit+0x52>
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d102      	bne.n	8002f94 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f92:	e101      	b.n	8003198 <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2203      	movs	r2, #3
 8002f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	88fa      	ldrh	r2, [r7, #6]
 8002fac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	88fa      	ldrh	r2, [r7, #6]
 8002fb2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fda:	d107      	bne.n	8002fec <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff6:	2b40      	cmp	r3, #64	; 0x40
 8002ff8:	d007      	beq.n	800300a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003008:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003012:	d147      	bne.n	80030a4 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d004      	beq.n	8003026 <HAL_SPI_Transmit+0xea>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b01      	cmp	r3, #1
 8003024:	d138      	bne.n	8003098 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	8812      	ldrh	r2, [r2, #0]
 800302e:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	3302      	adds	r3, #2
 8003034:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003044:	e028      	b.n	8003098 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b02      	cmp	r3, #2
 8003052:	d10f      	bne.n	8003074 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	8812      	ldrh	r2, [r2, #0]
 800305c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	3302      	adds	r3, #2
 8003062:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003068:	b29b      	uxth	r3, r3
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	86da      	strh	r2, [r3, #54]	; 0x36
 8003072:	e011      	b.n	8003098 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00b      	beq.n	8003092 <HAL_SPI_Transmit+0x156>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003080:	d00a      	beq.n	8003098 <HAL_SPI_Transmit+0x15c>
 8003082:	f7fd fcaf 	bl	80009e4 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	1ad2      	subs	r2, r2, r3
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d302      	bcc.n	8003098 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003096:	e07f      	b.n	8003198 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1d1      	bne.n	8003046 <HAL_SPI_Transmit+0x10a>
 80030a2:	e048      	b.n	8003136 <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d004      	beq.n	80030b6 <HAL_SPI_Transmit+0x17a>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d13a      	bne.n	800312c <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	330c      	adds	r3, #12
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	7812      	ldrb	r2, [r2, #0]
 80030c0:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	3301      	adds	r3, #1
 80030c6:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80030d6:	e029      	b.n	800312c <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d110      	bne.n	8003108 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	330c      	adds	r3, #12
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	7812      	ldrb	r2, [r2, #0]
 80030f0:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	3301      	adds	r3, #1
 80030f6:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	86da      	strh	r2, [r3, #54]	; 0x36
 8003106:	e011      	b.n	800312c <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00b      	beq.n	8003126 <HAL_SPI_Transmit+0x1ea>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003114:	d00a      	beq.n	800312c <HAL_SPI_Transmit+0x1f0>
 8003116:	f7fd fc65 	bl	80009e4 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	1ad2      	subs	r2, r2, r3
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d302      	bcc.n	800312c <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	77fb      	strb	r3, [r7, #31]
          goto error;
 800312a:	e035      	b.n	8003198 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1d0      	bne.n	80030d8 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2201      	movs	r2, #1
 800313e:	2102      	movs	r1, #2
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 fae3 	bl	800370c <SPI_WaitFlagStateUntilTimeout>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003150:	e022      	b.n	8003198 <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	6839      	ldr	r1, [r7, #0]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fb41 	bl	80037de <SPI_CheckFlag_BSY>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800316c:	e014      	b.n	8003198 <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10a      	bne.n	800318c <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3720      	adds	r7, #32
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_SPI_Receive>:
  * @param  Size: amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b088      	sub	sp, #32
 80031b6:	af02      	add	r7, sp, #8
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	603b      	str	r3, [r7, #0]
 80031be:	4613      	mov	r3, r2
 80031c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	75fb      	strb	r3, [r7, #23]

  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031d2:	d112      	bne.n	80031fa <HAL_SPI_Receive+0x48>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10e      	bne.n	80031fa <HAL_SPI_Receive+0x48>
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2204      	movs	r2, #4
 80031e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 80031e4:	88fa      	ldrh	r2, [r7, #6]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	4613      	mov	r3, r2
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f8ec 	bl	80033ce <HAL_SPI_TransmitReceive>
 80031f6:	4603      	mov	r3, r0
 80031f8:	e0e5      	b.n	80033c6 <HAL_SPI_Receive+0x214>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_SPI_Receive+0x56>
 8003204:	2302      	movs	r3, #2
 8003206:	e0de      	b.n	80033c6 <HAL_SPI_Receive+0x214>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003210:	f7fd fbe8 	bl	80009e4 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

  if(hspi->State != HAL_SPI_STATE_READY)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b01      	cmp	r3, #1
 8003220:	d002      	beq.n	8003228 <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 8003222:	2302      	movs	r3, #2
 8003224:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003226:	e0c5      	b.n	80033b4 <HAL_SPI_Receive+0x202>
  }

  if((pData == NULL ) || (Size == 0U))
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <HAL_SPI_Receive+0x82>
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d102      	bne.n	800323a <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003238:	e0bc      	b.n	80033b4 <HAL_SPI_Receive+0x202>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2204      	movs	r2, #4
 800323e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	88fa      	ldrh	r2, [r7, #6]
 8003252:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	88fa      	ldrh	r2, [r7, #6]
 8003258:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003280:	d107      	bne.n	8003292 <HAL_SPI_Receive+0xe0>
  {
    SPI_1LINE_RX(hspi);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	6812      	ldr	r2, [r2, #0]
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003290:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329c:	2b40      	cmp	r3, #64	; 0x40
 800329e:	d007      	beq.n	80032b0 <HAL_SPI_Receive+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ae:	601a      	str	r2, [r3, #0]
  }

    /* Receive data in 8 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d15b      	bne.n	8003370 <HAL_SPI_Receive+0x1be>
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 80032b8:	e02a      	b.n	8003310 <HAL_SPI_Receive+0x15e>
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d111      	bne.n	80032ec <HAL_SPI_Receive+0x13a>
      {
        /* read the received data */
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	330c      	adds	r3, #12
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	3301      	adds	r3, #1
 80032da:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032ea:	e011      	b.n	8003310 <HAL_SPI_Receive+0x15e>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_SPI_Receive+0x158>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032f8:	d00a      	beq.n	8003310 <HAL_SPI_Receive+0x15e>
 80032fa:	f7fd fb73 	bl	80009e4 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad2      	subs	r2, r2, r3
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d302      	bcc.n	8003310 <HAL_SPI_Receive+0x15e>
        {
          errorcode = HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800330e:	e051      	b.n	80033b4 <HAL_SPI_Receive+0x202>
    while(hspi->RxXferCount > 0U)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1cf      	bne.n	80032ba <HAL_SPI_Receive+0x108>
 800331a:	e02e      	b.n	800337a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b01      	cmp	r3, #1
 8003328:	d110      	bne.n	800334c <HAL_SPI_Receive+0x19a>
      {
        *((uint16_t*)pData) = hspi->Instance->DR;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	b29a      	uxth	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	3302      	adds	r3, #2
 800333a:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003340:	b29b      	uxth	r3, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	87da      	strh	r2, [r3, #62]	; 0x3e
 800334a:	e011      	b.n	8003370 <HAL_SPI_Receive+0x1be>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <HAL_SPI_Receive+0x1b8>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003358:	d00a      	beq.n	8003370 <HAL_SPI_Receive+0x1be>
 800335a:	f7fd fb43 	bl	80009e4 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad2      	subs	r2, r2, r3
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d302      	bcc.n	8003370 <HAL_SPI_Receive+0x1be>
        {
          errorcode = HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800336e:	e021      	b.n	80033b4 <HAL_SPI_Receive+0x202>
    while(hspi->RxXferCount > 0U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003374:	b29b      	uxth	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1d0      	bne.n	800331c <HAL_SPI_Receive+0x16a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003382:	d111      	bne.n	80033a8 <HAL_SPI_Receive+0x1f6>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800338c:	d004      	beq.n	8003398 <HAL_SPI_Receive+0x1e6>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003396:	d107      	bne.n	80033a8 <HAL_SPI_Receive+0x1f6>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033a6:	601a      	str	r2, [r3, #0]
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_SPI_Receive+0x202>
  {
    errorcode = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b08c      	sub	sp, #48	; 0x30
 80033d2:	af02      	add	r7, sp, #8
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	61fb      	str	r3, [r7, #28]
 80033e0:	2300      	movs	r3, #0
 80033e2:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80033e8:	2301      	movs	r3, #1
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_SPI_TransmitReceive+0x32>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e181      	b.n	8003704 <HAL_SPI_TransmitReceive+0x336>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003408:	f7fd faec 	bl	80009e4 <HAL_GetTick>
 800340c:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003414:	b2db      	uxtb	r3, r3
 8003416:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d00e      	beq.n	8003442 <HAL_SPI_TransmitReceive+0x74>
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800342a:	d106      	bne.n	800343a <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d102      	bne.n	800343a <HAL_SPI_TransmitReceive+0x6c>
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	2b04      	cmp	r3, #4
 8003438:	d003      	beq.n	8003442 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 800343a:	2302      	movs	r3, #2
 800343c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003440:	e156      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x322>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_SPI_TransmitReceive+0x86>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <HAL_SPI_TransmitReceive+0x86>
 800344e:	887b      	ldrh	r3, [r7, #2]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d103      	bne.n	800345c <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800345a:	e149      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d103      	bne.n	8003470 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2205      	movs	r2, #5
 800346c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	887a      	ldrh	r2, [r7, #2]
 8003480:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	887a      	ldrh	r2, [r7, #2]
 8003486:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	887a      	ldrh	r2, [r7, #2]
 8003492:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	887a      	ldrh	r2, [r7, #2]
 8003498:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b0:	2b40      	cmp	r3, #64	; 0x40
 80034b2:	d007      	beq.n	80034c4 <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034cc:	d171      	bne.n	80035b2 <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d004      	beq.n	80034e0 <HAL_SPI_TransmitReceive+0x112>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d15d      	bne.n	800359c <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	8812      	ldrh	r2, [r2, #0]
 80034e8:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	3302      	adds	r3, #2
 80034ee:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034fe:	e04d      	b.n	800359c <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	2b00      	cmp	r3, #0
 8003504:	d01c      	beq.n	8003540 <HAL_SPI_TransmitReceive+0x172>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d017      	beq.n	8003540 <HAL_SPI_TransmitReceive+0x172>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b02      	cmp	r3, #2
 800351c:	d110      	bne.n	8003540 <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	8812      	ldrh	r2, [r2, #0]
 8003526:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	3302      	adds	r3, #2
 800352c:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d018      	beq.n	800357c <HAL_SPI_TransmitReceive+0x1ae>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b01      	cmp	r3, #1
 8003556:	d111      	bne.n	800357c <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	b29a      	uxth	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3302      	adds	r3, #2
 8003568:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8003578:	2301      	movs	r3, #1
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800357c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003582:	d00b      	beq.n	800359c <HAL_SPI_TransmitReceive+0x1ce>
 8003584:	f7fd fa2e 	bl	80009e4 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	1ad2      	subs	r2, r2, r3
 800358e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003590:	429a      	cmp	r2, r3
 8003592:	d303      	bcc.n	800359c <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800359a:	e0a9      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x322>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1ac      	bne.n	8003500 <HAL_SPI_TransmitReceive+0x132>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1a7      	bne.n	8003500 <HAL_SPI_TransmitReceive+0x132>
 80035b0:	e071      	b.n	8003696 <HAL_SPI_TransmitReceive+0x2c8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d004      	beq.n	80035c4 <HAL_SPI_TransmitReceive+0x1f6>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d15e      	bne.n	8003682 <HAL_SPI_TransmitReceive+0x2b4>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	330c      	adds	r3, #12
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	7812      	ldrb	r2, [r2, #0]
 80035ce:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	3301      	adds	r3, #1
 80035d4:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035e4:	e04d      	b.n	8003682 <HAL_SPI_TransmitReceive+0x2b4>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01d      	beq.n	8003628 <HAL_SPI_TransmitReceive+0x25a>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d018      	beq.n	8003628 <HAL_SPI_TransmitReceive+0x25a>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b02      	cmp	r3, #2
 8003602:	d111      	bne.n	8003628 <HAL_SPI_TransmitReceive+0x25a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f103 020c 	add.w	r2, r3, #12
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	1c59      	adds	r1, r3, #1
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d017      	beq.n	8003662 <HAL_SPI_TransmitReceive+0x294>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b01      	cmp	r3, #1
 800363e:	d110      	bne.n	8003662 <HAL_SPI_TransmitReceive+0x294>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	68d2      	ldr	r2, [r2, #12]
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 800365e:	2301      	movs	r3, #1
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8003662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003668:	d00b      	beq.n	8003682 <HAL_SPI_TransmitReceive+0x2b4>
 800366a:	f7fd f9bb 	bl	80009e4 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	1ad2      	subs	r2, r2, r3
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	429a      	cmp	r2, r3
 8003678:	d303      	bcc.n	8003682 <HAL_SPI_TransmitReceive+0x2b4>
      {
        errorcode = HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003680:	e036      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x322>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1ac      	bne.n	80035e6 <HAL_SPI_TransmitReceive+0x218>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1a7      	bne.n	80035e6 <HAL_SPI_TransmitReceive+0x218>
    }
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	2201      	movs	r2, #1
 800369e:	2102      	movs	r1, #2
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f833 	bl	800370c <SPI_WaitFlagStateUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_SPI_TransmitReceive+0x2e6>
  {
    errorcode = HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80036b2:	e01d      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x322>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f890 	bl	80037de <SPI_CheckFlag_BSY>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d006      	beq.n	80036d2 <HAL_SPI_TransmitReceive+0x304>
  {
    errorcode = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2220      	movs	r2, #32
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80036d0:	e00e      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10a      	bne.n	80036f0 <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036da:	2300      	movs	r3, #0
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	693b      	ldr	r3, [r7, #16]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003700:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003704:	4618      	mov	r0, r3
 8003706:	3728      	adds	r7, #40	; 0x28
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800371a:	e04d      	b.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003722:	d049      	beq.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d007      	beq.n	800373a <SPI_WaitFlagStateUntilTimeout+0x2e>
 800372a:	f7fd f95b 	bl	80009e4 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	1ad2      	subs	r2, r2, r3
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d33e      	bcc.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	6812      	ldr	r2, [r2, #0]
 8003742:	6852      	ldr	r2, [r2, #4]
 8003744:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003748:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003752:	d111      	bne.n	8003778 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800375c:	d004      	beq.n	8003768 <SPI_WaitFlagStateUntilTimeout+0x5c>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003766:	d107      	bne.n	8003778 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003776:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003780:	d110      	bne.n	80037a4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6819      	ldr	r1, [r3, #0]
 800378c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8003790:	400b      	ands	r3, r1
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e00e      	b.n	80037d6 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	401a      	ands	r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d101      	bne.n	80037cc <SPI_WaitFlagStateUntilTimeout+0xc0>
 80037c8:	2201      	movs	r2, #1
 80037ca:	e000      	b.n	80037ce <SPI_WaitFlagStateUntilTimeout+0xc2>
 80037cc:	2200      	movs	r2, #0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d1a3      	bne.n	800371c <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b086      	sub	sp, #24
 80037e2:	af02      	add	r7, sp, #8
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2200      	movs	r2, #0
 80037f2:	2180      	movs	r1, #128	; 0x80
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f7ff ff89 	bl	800370c <SPI_WaitFlagStateUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d007      	beq.n	8003810 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003804:	f043 0220 	orr.w	r2, r3, #32
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e000      	b.n	8003812 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e056      	b.n	80038da <HAL_SPI_Init+0xc0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d102      	bne.n	8003844 <HAL_SPI_Init+0x2a>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f002 fc98 	bl	8006174 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800385a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6851      	ldr	r1, [r2, #4]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6892      	ldr	r2, [r2, #8]
 8003868:	4311      	orrs	r1, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	68d2      	ldr	r2, [r2, #12]
 800386e:	4311      	orrs	r1, r2
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6912      	ldr	r2, [r2, #16]
 8003874:	4311      	orrs	r1, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6952      	ldr	r2, [r2, #20]
 800387a:	4311      	orrs	r1, r2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6992      	ldr	r2, [r2, #24]
 8003880:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003884:	4311      	orrs	r1, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	69d2      	ldr	r2, [r2, #28]
 800388a:	4311      	orrs	r1, r2
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6a12      	ldr	r2, [r2, #32]
 8003890:	4311      	orrs	r1, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003896:	430a      	orrs	r2, r1
 8003898:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6992      	ldr	r2, [r2, #24]
 80038a2:	0c12      	lsrs	r2, r2, #16
 80038a4:	f002 0104 	and.w	r1, r2, #4
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038ac:	430a      	orrs	r2, r1
 80038ae:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80038b8:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	69d2      	ldr	r2, [r2, #28]
 80038c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038c8:	61da      	str	r2, [r3, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e01d      	b.n	8003930 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d106      	bne.n	800390e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f002 fc7d 	bl	8006208 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2202      	movs	r2, #2
 8003912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3304      	adds	r3, #4
 800391e:	4619      	mov	r1, r3
 8003920:	4610      	mov	r0, r2
 8003922:	f000 fa2b 	bl	8003d7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	68d2      	ldr	r2, [r2, #12]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b02      	cmp	r3, #2
 8003980:	d122      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b02      	cmp	r3, #2
 800398e:	d11b      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0202 	mvn.w	r2, #2
 8003998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f9c8 	bl	8003d44 <HAL_TIM_IC_CaptureCallback>
 80039b4:	e005      	b.n	80039c2 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f9bb 	bl	8003d32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f9ca 	bl	8003d56 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d122      	bne.n	8003a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d11b      	bne.n	8003a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f06f 0204 	mvn.w	r2, #4
 80039ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2202      	movs	r2, #2
 80039f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f99e 	bl	8003d44 <HAL_TIM_IC_CaptureCallback>
 8003a08:	e005      	b.n	8003a16 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f991 	bl	8003d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f9a0 	bl	8003d56 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d122      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d11b      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0208 	mvn.w	r2, #8
 8003a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2204      	movs	r2, #4
 8003a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f974 	bl	8003d44 <HAL_TIM_IC_CaptureCallback>
 8003a5c:	e005      	b.n	8003a6a <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f967 	bl	8003d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f976 	bl	8003d56 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	2b10      	cmp	r3, #16
 8003a7c:	d122      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b10      	cmp	r3, #16
 8003a8a:	d11b      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f06f 0210 	mvn.w	r2, #16
 8003a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2208      	movs	r2, #8
 8003a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f94a 	bl	8003d44 <HAL_TIM_IC_CaptureCallback>
 8003ab0:	e005      	b.n	8003abe <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f93d 	bl	8003d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f94c 	bl	8003d56 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d10e      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d107      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0201 	mvn.w	r2, #1
 8003ae8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f002 fa1c 	bl	8005f28 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afa:	2b80      	cmp	r3, #128	; 0x80
 8003afc:	d10e      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b08:	2b80      	cmp	r3, #128	; 0x80
 8003b0a:	d107      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b14:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fa88 	bl	800402c <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	d10e      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b34:	2b40      	cmp	r3, #64	; 0x40
 8003b36:	d107      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b40:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f910 	bl	8003d68 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d10e      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d107      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0220 	mvn.w	r2, #32
 8003b6c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fa53 	bl	800401a <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_TIM_ConfigClockSource+0x1c>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e0c8      	b.n	8003d2a <HAL_TIM_ConfigClockSource+0x1ae>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bbe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d077      	beq.n	8003cc0 <HAL_TIM_ConfigClockSource+0x144>
 8003bd0:	2b40      	cmp	r3, #64	; 0x40
 8003bd2:	d80e      	bhi.n	8003bf2 <HAL_TIM_ConfigClockSource+0x76>
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	f000 808a 	beq.w	8003cee <HAL_TIM_ConfigClockSource+0x172>
 8003bda:	2b10      	cmp	r3, #16
 8003bdc:	d802      	bhi.n	8003be4 <HAL_TIM_ConfigClockSource+0x68>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d07e      	beq.n	8003ce0 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8003be2:	e099      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	f000 8089 	beq.w	8003cfc <HAL_TIM_ConfigClockSource+0x180>
 8003bea:	2b30      	cmp	r3, #48	; 0x30
 8003bec:	f000 808d 	beq.w	8003d0a <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8003bf0:	e092      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003bf2:	2b70      	cmp	r3, #112	; 0x70
 8003bf4:	d016      	beq.n	8003c24 <HAL_TIM_ConfigClockSource+0xa8>
 8003bf6:	2b70      	cmp	r3, #112	; 0x70
 8003bf8:	d804      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x88>
 8003bfa:	2b50      	cmp	r3, #80	; 0x50
 8003bfc:	d040      	beq.n	8003c80 <HAL_TIM_ConfigClockSource+0x104>
 8003bfe:	2b60      	cmp	r3, #96	; 0x60
 8003c00:	d04e      	beq.n	8003ca0 <HAL_TIM_ConfigClockSource+0x124>
    break;
 8003c02:	e089      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c08:	d003      	beq.n	8003c12 <HAL_TIM_ConfigClockSource+0x96>
 8003c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c0e:	d024      	beq.n	8003c5a <HAL_TIM_ConfigClockSource+0xde>
    break;
 8003c10:	e082      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6812      	ldr	r2, [r2, #0]
 8003c1a:	6892      	ldr	r2, [r2, #8]
 8003c1c:	f022 0207 	bic.w	r2, r2, #7
 8003c20:	609a      	str	r2, [r3, #8]
    break;
 8003c22:	e079      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	6899      	ldr	r1, [r3, #8]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f000 f98c 	bl	8003f50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c46:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c4e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	609a      	str	r2, [r3, #8]
    break;
 8003c58:	e05e      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	6899      	ldr	r1, [r3, #8]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f000 f971 	bl	8003f50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	6892      	ldr	r2, [r2, #8]
 8003c78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c7c:	609a      	str	r2, [r3, #8]
    break;
 8003c7e:	e04b      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	6859      	ldr	r1, [r3, #4]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f000 f8db 	bl	8003e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2150      	movs	r1, #80	; 0x50
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 f93a 	bl	8003f12 <TIM_ITRx_SetConfig>
    break;
 8003c9e:	e03b      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6818      	ldr	r0, [r3, #0]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	6859      	ldr	r1, [r3, #4]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	461a      	mov	r2, r3
 8003cae:	f000 f8fd 	bl	8003eac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2160      	movs	r1, #96	; 0x60
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 f92a 	bl	8003f12 <TIM_ITRx_SetConfig>
    break;
 8003cbe:	e02b      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	6859      	ldr	r1, [r3, #4]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f000 f8bb 	bl	8003e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2140      	movs	r1, #64	; 0x40
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 f91a 	bl	8003f12 <TIM_ITRx_SetConfig>
    break;
 8003cde:	e01b      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 f913 	bl	8003f12 <TIM_ITRx_SetConfig>
    break;
 8003cec:	e014      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2110      	movs	r1, #16
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 f90c 	bl	8003f12 <TIM_ITRx_SetConfig>
    break;
 8003cfa:	e00d      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2120      	movs	r1, #32
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 f905 	bl	8003f12 <TIM_ITRx_SetConfig>
    break;
 8003d08:	e006      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2130      	movs	r1, #48	; 0x30
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 f8fe 	bl	8003f12 <TIM_ITRx_SetConfig>
    break;
 8003d16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr

08003d56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr

08003d68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr
	...

08003d7c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a2a      	ldr	r2, [pc, #168]	; (8003e3c <TIM_Base_SetConfig+0xc0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00b      	beq.n	8003db0 <TIM_Base_SetConfig+0x34>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9e:	d007      	beq.n	8003db0 <TIM_Base_SetConfig+0x34>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a27      	ldr	r2, [pc, #156]	; (8003e40 <TIM_Base_SetConfig+0xc4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d003      	beq.n	8003db0 <TIM_Base_SetConfig+0x34>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a26      	ldr	r2, [pc, #152]	; (8003e44 <TIM_Base_SetConfig+0xc8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d108      	bne.n	8003dc2 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a1d      	ldr	r2, [pc, #116]	; (8003e3c <TIM_Base_SetConfig+0xc0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00b      	beq.n	8003de2 <TIM_Base_SetConfig+0x66>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd0:	d007      	beq.n	8003de2 <TIM_Base_SetConfig+0x66>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a1a      	ldr	r2, [pc, #104]	; (8003e40 <TIM_Base_SetConfig+0xc4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d003      	beq.n	8003de2 <TIM_Base_SetConfig+0x66>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a19      	ldr	r2, [pc, #100]	; (8003e44 <TIM_Base_SetConfig+0xc8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d108      	bne.n	8003df4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dfa:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a07      	ldr	r2, [pc, #28]	; (8003e3c <TIM_Base_SetConfig+0xc0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d103      	bne.n	8003e2c <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	615a      	str	r2, [r3, #20]
}
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	40012c00 	.word	0x40012c00
 8003e40:	40000400 	.word	0x40000400
 8003e44:	40000800 	.word	0x40000800

08003e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	f023 0201 	bic.w	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f023 030a 	bic.w	r3, r3, #10
 8003e8c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr

08003eac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	f023 0210 	bic.w	r2, r3, #16
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ede:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	031b      	lsls	r3, r3, #12
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ef0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	621a      	str	r2, [r3, #32]
}
 8003f08:	bf00      	nop
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b085      	sub	sp, #20
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2e:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003f30:	887b      	ldrh	r3, [r7, #2]
 8003f32:	f043 0307 	orr.w	r3, r3, #7
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	461a      	mov	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	609a      	str	r2, [r3, #8]
}
 8003f46:	bf00      	nop
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr

08003f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	021a      	lsls	r2, r3, #8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	609a      	str	r2, [r3, #8]
}
 8003f88:	bf00      	nop
 8003f8a:	371c      	adds	r7, #28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr

08003f92 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e032      	b.n	8004010 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6812      	ldr	r2, [r2, #0]
 8003fc2:	6852      	ldr	r2, [r2, #4]
 8003fc4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003fc8:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6812      	ldr	r2, [r2, #0]
 8003fd2:	6851      	ldr	r1, [r2, #4]
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	6812      	ldr	r2, [r2, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	6892      	ldr	r2, [r2, #8]
 8003fe6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fea:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	6891      	ldr	r1, [r2, #8]
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	6852      	ldr	r2, [r2, #4]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr

0800402c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr

0800403e <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b082      	sub	sp, #8
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e03f      	b.n	80040d0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d106      	bne.n	800406a <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f002 f8f3 	bl	8006250 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2224      	movs	r2, #36	; 0x24
 800406e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	68d2      	ldr	r2, [r2, #12]
 800407c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004080:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f90a 	bl	800429c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	6912      	ldr	r2, [r2, #16]
 8004092:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004096:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6812      	ldr	r2, [r2, #0]
 80040a0:	6952      	ldr	r2, [r2, #20]
 80040a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040a6:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6812      	ldr	r2, [r2, #0]
 80040b0:	68d2      	ldr	r2, [r2, #12]
 80040b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040b6:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	603b      	str	r3, [r7, #0]
 80040e4:	4613      	mov	r3, r2
 80040e6:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b20      	cmp	r3, #32
 80040f6:	f040 8082 	bne.w	80041fe <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL) || (Size == 0U))
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <HAL_UART_Transmit+0x2e>
 8004100:	88fb      	ldrh	r3, [r7, #6]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e07a      	b.n	8004200 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_UART_Transmit+0x40>
 8004114:	2302      	movs	r3, #2
 8004116:	e073      	b.n	8004200 <HAL_UART_Transmit+0x128>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2221      	movs	r2, #33	; 0x21
 800412a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800412e:	f7fc fc59 	bl	80009e4 <HAL_GetTick>
 8004132:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	88fa      	ldrh	r2, [r7, #6]
 8004138:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	88fa      	ldrh	r2, [r7, #6]
 800413e:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8004140:	e041      	b.n	80041c6 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004158:	d121      	bne.n	800419e <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2200      	movs	r2, #0
 8004162:	2180      	movs	r1, #128	; 0x80
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f84f 	bl	8004208 <UART_WaitOnFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e045      	b.n	8004200 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	8812      	ldrh	r2, [r2, #0]
 8004180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004184:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d103      	bne.n	8004196 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	3302      	adds	r3, #2
 8004192:	60bb      	str	r3, [r7, #8]
 8004194:	e017      	b.n	80041c6 <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData +=1U;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	3301      	adds	r3, #1
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	e013      	b.n	80041c6 <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2200      	movs	r2, #0
 80041a6:	2180      	movs	r1, #128	; 0x80
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f82d 	bl	8004208 <UART_WaitOnFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e023      	b.n	8004200 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	1c59      	adds	r1, r3, #1
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1b8      	bne.n	8004142 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2200      	movs	r2, #0
 80041d8:	2140      	movs	r1, #64	; 0x40
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f814 	bl	8004208 <UART_WaitOnFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e00a      	b.n	8004200 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e000      	b.n	8004200 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
  }
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	4613      	mov	r3, r2
 8004216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8004218:	e02c      	b.n	8004274 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004220:	d028      	beq.n	8004274 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d007      	beq.n	8004238 <UART_WaitOnFlagUntilTimeout+0x30>
 8004228:	f7fc fbdc 	bl	80009e4 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	1ad2      	subs	r2, r2, r3
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	429a      	cmp	r2, r3
 8004236:	d91d      	bls.n	8004274 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	68d2      	ldr	r2, [r2, #12]
 8004242:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004246:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	6952      	ldr	r2, [r2, #20]
 8004252:	f022 0201 	bic.w	r2, r2, #1
 8004256:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e00f      	b.n	8004294 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	401a      	ands	r2, r3
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	429a      	cmp	r2, r3
 8004282:	bf0c      	ite	eq
 8004284:	2301      	moveq	r3, #1
 8004286:	2300      	movne	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	79fb      	ldrb	r3, [r7, #7]
 800428e:	429a      	cmp	r2, r3
 8004290:	d0c3      	beq.n	800421a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800429c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	6912      	ldr	r2, [r2, #16]
 80042b2:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	68d2      	ldr	r2, [r2, #12]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042e2:	f023 030c 	bic.w	r3, r3, #12
 80042e6:	68f9      	ldr	r1, [r7, #12]
 80042e8:	430b      	orrs	r3, r1
 80042ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	6952      	ldr	r2, [r2, #20]
 80042f6:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6992      	ldr	r2, [r2, #24]
 80042fe:	430a      	orrs	r2, r1
 8004300:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a6f      	ldr	r2, [pc, #444]	; (80044c4 <UART_SetConfig+0x228>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d16b      	bne.n	80043e4 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681c      	ldr	r4, [r3, #0]
 8004310:	f7fe fc6c 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 8004314:	4602      	mov	r2, r0
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	009a      	lsls	r2, r3, #2
 800431e:	441a      	add	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	fbb2 f3f3 	udiv	r3, r2, r3
 800432a:	4a67      	ldr	r2, [pc, #412]	; (80044c8 <UART_SetConfig+0x22c>)
 800432c:	fba2 2303 	umull	r2, r3, r2, r3
 8004330:	095b      	lsrs	r3, r3, #5
 8004332:	011d      	lsls	r5, r3, #4
 8004334:	f7fe fc5a 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 8004338:	4602      	mov	r2, r0
 800433a:	4613      	mov	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	009a      	lsls	r2, r3, #2
 8004342:	441a      	add	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	fbb2 f6f3 	udiv	r6, r2, r3
 800434e:	f7fe fc4d 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 8004352:	4602      	mov	r2, r0
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	009a      	lsls	r2, r3, #2
 800435c:	441a      	add	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	fbb2 f3f3 	udiv	r3, r2, r3
 8004368:	4a57      	ldr	r2, [pc, #348]	; (80044c8 <UART_SetConfig+0x22c>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	2264      	movs	r2, #100	; 0x64
 8004372:	fb02 f303 	mul.w	r3, r2, r3
 8004376:	1af3      	subs	r3, r6, r3
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	3332      	adds	r3, #50	; 0x32
 800437c:	4a52      	ldr	r2, [pc, #328]	; (80044c8 <UART_SetConfig+0x22c>)
 800437e:	fba2 2303 	umull	r2, r3, r2, r3
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004388:	441d      	add	r5, r3
 800438a:	f7fe fc2f 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 800438e:	4602      	mov	r2, r0
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	009a      	lsls	r2, r3, #2
 8004398:	441a      	add	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80043a4:	f7fe fc22 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 80043a8:	4602      	mov	r2, r0
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	009a      	lsls	r2, r3, #2
 80043b2:	441a      	add	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80043be:	4a42      	ldr	r2, [pc, #264]	; (80044c8 <UART_SetConfig+0x22c>)
 80043c0:	fba2 2303 	umull	r2, r3, r2, r3
 80043c4:	095b      	lsrs	r3, r3, #5
 80043c6:	2264      	movs	r2, #100	; 0x64
 80043c8:	fb02 f303 	mul.w	r3, r2, r3
 80043cc:	1af3      	subs	r3, r6, r3
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	3332      	adds	r3, #50	; 0x32
 80043d2:	4a3d      	ldr	r2, [pc, #244]	; (80044c8 <UART_SetConfig+0x22c>)
 80043d4:	fba2 2303 	umull	r2, r3, r2, r3
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	442b      	add	r3, r5
 80043e0:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80043e2:	e06a      	b.n	80044ba <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681c      	ldr	r4, [r3, #0]
 80043e8:	f7fe fbec 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 80043ec:	4602      	mov	r2, r0
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	009a      	lsls	r2, r3, #2
 80043f6:	441a      	add	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004402:	4a31      	ldr	r2, [pc, #196]	; (80044c8 <UART_SetConfig+0x22c>)
 8004404:	fba2 2303 	umull	r2, r3, r2, r3
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	011d      	lsls	r5, r3, #4
 800440c:	f7fe fbda 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8004410:	4602      	mov	r2, r0
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	009a      	lsls	r2, r3, #2
 800441a:	441a      	add	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	fbb2 f6f3 	udiv	r6, r2, r3
 8004426:	f7fe fbcd 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 800442a:	4602      	mov	r2, r0
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	009a      	lsls	r2, r3, #2
 8004434:	441a      	add	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004440:	4a21      	ldr	r2, [pc, #132]	; (80044c8 <UART_SetConfig+0x22c>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	2264      	movs	r2, #100	; 0x64
 800444a:	fb02 f303 	mul.w	r3, r2, r3
 800444e:	1af3      	subs	r3, r6, r3
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	3332      	adds	r3, #50	; 0x32
 8004454:	4a1c      	ldr	r2, [pc, #112]	; (80044c8 <UART_SetConfig+0x22c>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004460:	441d      	add	r5, r3
 8004462:	f7fe fbaf 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8004466:	4602      	mov	r2, r0
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	009a      	lsls	r2, r3, #2
 8004470:	441a      	add	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	fbb2 f6f3 	udiv	r6, r2, r3
 800447c:	f7fe fba2 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8004480:	4602      	mov	r2, r0
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	009a      	lsls	r2, r3, #2
 800448a:	441a      	add	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	fbb2 f3f3 	udiv	r3, r2, r3
 8004496:	4a0c      	ldr	r2, [pc, #48]	; (80044c8 <UART_SetConfig+0x22c>)
 8004498:	fba2 2303 	umull	r2, r3, r2, r3
 800449c:	095b      	lsrs	r3, r3, #5
 800449e:	2264      	movs	r2, #100	; 0x64
 80044a0:	fb02 f303 	mul.w	r3, r2, r3
 80044a4:	1af3      	subs	r3, r6, r3
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	3332      	adds	r3, #50	; 0x32
 80044aa:	4a07      	ldr	r2, [pc, #28]	; (80044c8 <UART_SetConfig+0x22c>)
 80044ac:	fba2 2303 	umull	r2, r3, r2, r3
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	442b      	add	r3, r5
 80044b8:	60a3      	str	r3, [r4, #8]
}
 80044ba:	bf00      	nop
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40013800 	.word	0x40013800
 80044c8:	51eb851f 	.word	0x51eb851f

080044cc <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80044d8:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <NRF24_DelayMicroSeconds+0x38>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a0a      	ldr	r2, [pc, #40]	; (8004508 <NRF24_DelayMicroSeconds+0x3c>)
 80044de:	fba2 2303 	umull	r2, r3, r2, r3
 80044e2:	0c9a      	lsrs	r2, r3, #18
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	fb02 f303 	mul.w	r3, r2, r3
 80044ea:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80044ec:	bf00      	nop
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	1e5a      	subs	r2, r3, #1
 80044f2:	60fa      	str	r2, [r7, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1fa      	bne.n	80044ee <NRF24_DelayMicroSeconds+0x22>
}
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	20000010 	.word	0x20000010
 8004508:	165e9f81 	.word	0x165e9f81

0800450c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d008      	beq.n	800452c <NRF24_csn+0x20>
 800451a:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <NRF24_csn+0x38>)
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <NRF24_csn+0x3c>)
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	2201      	movs	r2, #1
 8004524:	4619      	mov	r1, r3
 8004526:	f7fd ff48 	bl	80023ba <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800452a:	e007      	b.n	800453c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <NRF24_csn+0x38>)
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <NRF24_csn+0x3c>)
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	2200      	movs	r2, #0
 8004536:	4619      	mov	r1, r3
 8004538:	f7fd ff3f 	bl	80023ba <HAL_GPIO_WritePin>
}
 800453c:	bf00      	nop
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	200000a4 	.word	0x200000a4
 8004548:	200000a8 	.word	0x200000a8

0800454c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d008      	beq.n	800456c <NRF24_ce+0x20>
 800455a:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <NRF24_ce+0x38>)
 800455c:	6818      	ldr	r0, [r3, #0]
 800455e:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <NRF24_ce+0x3c>)
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	2201      	movs	r2, #1
 8004564:	4619      	mov	r1, r3
 8004566:	f7fd ff28 	bl	80023ba <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800456a:	e007      	b.n	800457c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <NRF24_ce+0x38>)
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <NRF24_ce+0x3c>)
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	2200      	movs	r2, #0
 8004576:	4619      	mov	r1, r3
 8004578:	f7fd ff1f 	bl	80023ba <HAL_GPIO_WritePin>
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	200000a4 	.word	0x200000a4
 8004588:	200000aa 	.word	0x200000aa

0800458c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8004596:	2000      	movs	r0, #0
 8004598:	f7ff ffb8 	bl	800450c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	f003 031f 	and.w	r3, r3, #31
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80045a6:	f107 010c 	add.w	r1, r7, #12
 80045aa:	2364      	movs	r3, #100	; 0x64
 80045ac:	2201      	movs	r2, #1
 80045ae:	480a      	ldr	r0, [pc, #40]	; (80045d8 <NRF24_read_register+0x4c>)
 80045b0:	f7fe fcc4 	bl	8002f3c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80045b4:	f107 030c 	add.w	r3, r7, #12
 80045b8:	1c59      	adds	r1, r3, #1
 80045ba:	2364      	movs	r3, #100	; 0x64
 80045bc:	2201      	movs	r2, #1
 80045be:	4806      	ldr	r0, [pc, #24]	; (80045d8 <NRF24_read_register+0x4c>)
 80045c0:	f7fe fdf7 	bl	80031b2 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80045c4:	7b7b      	ldrb	r3, [r7, #13]
 80045c6:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80045c8:	2001      	movs	r0, #1
 80045ca:	f7ff ff9f 	bl	800450c <NRF24_csn>
	return retData;
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	200000ac 	.word	0x200000ac

080045dc <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	6039      	str	r1, [r7, #0]
 80045e6:	71fb      	strb	r3, [r7, #7]
 80045e8:	4613      	mov	r3, r2
 80045ea:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80045ec:	2000      	movs	r0, #0
 80045ee:	f7ff ff8d 	bl	800450c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	f003 031f 	and.w	r3, r3, #31
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80045fc:	f107 010c 	add.w	r1, r7, #12
 8004600:	2364      	movs	r3, #100	; 0x64
 8004602:	2201      	movs	r2, #1
 8004604:	4808      	ldr	r0, [pc, #32]	; (8004628 <NRF24_read_registerN+0x4c>)
 8004606:	f7fe fc99 	bl	8002f3c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800460a:	79bb      	ldrb	r3, [r7, #6]
 800460c:	b29a      	uxth	r2, r3
 800460e:	2364      	movs	r3, #100	; 0x64
 8004610:	6839      	ldr	r1, [r7, #0]
 8004612:	4805      	ldr	r0, [pc, #20]	; (8004628 <NRF24_read_registerN+0x4c>)
 8004614:	f7fe fdcd 	bl	80031b2 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8004618:	2001      	movs	r0, #1
 800461a:	f7ff ff77 	bl	800450c <NRF24_csn>
}
 800461e:	bf00      	nop
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	200000ac 	.word	0x200000ac

0800462c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	460a      	mov	r2, r1
 8004636:	71fb      	strb	r3, [r7, #7]
 8004638:	4613      	mov	r3, r2
 800463a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800463c:	2000      	movs	r0, #0
 800463e:	f7ff ff65 	bl	800450c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	f043 0320 	orr.w	r3, r3, #32
 8004648:	b2db      	uxtb	r3, r3
 800464a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800464c:	79bb      	ldrb	r3, [r7, #6]
 800464e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8004650:	f107 010c 	add.w	r1, r7, #12
 8004654:	2364      	movs	r3, #100	; 0x64
 8004656:	2202      	movs	r2, #2
 8004658:	4804      	ldr	r0, [pc, #16]	; (800466c <NRF24_write_register+0x40>)
 800465a:	f7fe fc6f 	bl	8002f3c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800465e:	2001      	movs	r0, #1
 8004660:	f7ff ff54 	bl	800450c <NRF24_csn>
}
 8004664:	bf00      	nop
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	200000ac 	.word	0x200000ac

08004670 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	6039      	str	r1, [r7, #0]
 800467a:	71fb      	strb	r3, [r7, #7]
 800467c:	4613      	mov	r3, r2
 800467e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8004680:	2000      	movs	r0, #0
 8004682:	f7ff ff43 	bl	800450c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	f043 0320 	orr.w	r3, r3, #32
 800468c:	b2db      	uxtb	r3, r3
 800468e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8004690:	f107 010c 	add.w	r1, r7, #12
 8004694:	2364      	movs	r3, #100	; 0x64
 8004696:	2201      	movs	r2, #1
 8004698:	4808      	ldr	r0, [pc, #32]	; (80046bc <NRF24_write_registerN+0x4c>)
 800469a:	f7fe fc4f 	bl	8002f3c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800469e:	79bb      	ldrb	r3, [r7, #6]
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	2364      	movs	r3, #100	; 0x64
 80046a4:	6839      	ldr	r1, [r7, #0]
 80046a6:	4805      	ldr	r0, [pc, #20]	; (80046bc <NRF24_write_registerN+0x4c>)
 80046a8:	f7fe fc48 	bl	8002f3c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80046ac:	2001      	movs	r0, #1
 80046ae:	f7ff ff2d 	bl	800450c <NRF24_csn>
}
 80046b2:	bf00      	nop
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	200000ac 	.word	0x200000ac

080046c0 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80046cc:	f000 fa06 	bl	8004adc <NRF24_getPayloadSize>
 80046d0:	4603      	mov	r3, r0
 80046d2:	461a      	mov	r2, r3
 80046d4:	78fb      	ldrb	r3, [r7, #3]
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d303      	bcc.n	80046e2 <NRF24_read_payload+0x22>
 80046da:	f000 f9ff 	bl	8004adc <NRF24_getPayloadSize>
 80046de:	4603      	mov	r3, r0
 80046e0:	e000      	b.n	80046e4 <NRF24_read_payload+0x24>
 80046e2:	78fb      	ldrb	r3, [r7, #3]
 80046e4:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80046e6:	2000      	movs	r0, #0
 80046e8:	f7ff ff10 	bl	800450c <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80046ec:	2361      	movs	r3, #97	; 0x61
 80046ee:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80046f0:	f107 010e 	add.w	r1, r7, #14
 80046f4:	2364      	movs	r3, #100	; 0x64
 80046f6:	2201      	movs	r2, #1
 80046f8:	4808      	ldr	r0, [pc, #32]	; (800471c <NRF24_read_payload+0x5c>)
 80046fa:	f7fe fc1f 	bl	8002f3c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	b29a      	uxth	r2, r3
 8004702:	2364      	movs	r3, #100	; 0x64
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	4805      	ldr	r0, [pc, #20]	; (800471c <NRF24_read_payload+0x5c>)
 8004708:	f7fe fd53 	bl	80031b2 <HAL_SPI_Receive>
	NRF24_csn(1);
 800470c:	2001      	movs	r0, #1
 800470e:	f7ff fefd 	bl	800450c <NRF24_csn>
}
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	200000ac 	.word	0x200000ac

08004720 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8004724:	21ff      	movs	r1, #255	; 0xff
 8004726:	20e1      	movs	r0, #225	; 0xe1
 8004728:	f7ff ff80 	bl	800462c <NRF24_write_register>
}
 800472c:	bf00      	nop
 800472e:	bd80      	pop	{r7, pc}

08004730 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8004734:	21ff      	movs	r1, #255	; 0xff
 8004736:	20e2      	movs	r0, #226	; 0xe2
 8004738:	f7ff ff78 	bl	800462c <NRF24_write_register>
}
 800473c:	bf00      	nop
 800473e:	bd80      	pop	{r7, pc}

08004740 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8004746:	2007      	movs	r0, #7
 8004748:	f7ff ff20 	bl	800458c <NRF24_read_register>
 800474c:	4603      	mov	r3, r0
 800474e:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8004750:	79fb      	ldrb	r3, [r7, #7]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 800475c:	b082      	sub	sp, #8
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	61fb      	str	r3, [r7, #28]
 8004768:	460b      	mov	r3, r1
 800476a:	807b      	strh	r3, [r7, #2]
 800476c:	4613      	mov	r3, r2
 800476e:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8004770:	4b66      	ldr	r3, [pc, #408]	; (800490c <NRF24_begin+0x1b0>)
 8004772:	4618      	mov	r0, r3
 8004774:	f107 031c 	add.w	r3, r7, #28
 8004778:	2258      	movs	r2, #88	; 0x58
 800477a:	4619      	mov	r1, r3
 800477c:	f001 fea2 	bl	80064c4 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8004780:	4a63      	ldr	r2, [pc, #396]	; (8004910 <NRF24_begin+0x1b4>)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8004786:	4a63      	ldr	r2, [pc, #396]	; (8004914 <NRF24_begin+0x1b8>)
 8004788:	887b      	ldrh	r3, [r7, #2]
 800478a:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 800478c:	4a62      	ldr	r2, [pc, #392]	; (8004918 <NRF24_begin+0x1bc>)
 800478e:	883b      	ldrh	r3, [r7, #0]
 8004790:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8004792:	2001      	movs	r0, #1
 8004794:	f7ff feba 	bl	800450c <NRF24_csn>
	NRF24_ce(0);
 8004798:	2000      	movs	r0, #0
 800479a:	f7ff fed7 	bl	800454c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800479e:	2005      	movs	r0, #5
 80047a0:	f7fc f92a 	bl	80009f8 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80047a4:	2108      	movs	r1, #8
 80047a6:	2000      	movs	r0, #0
 80047a8:	f7ff ff40 	bl	800462c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80047ac:	213f      	movs	r1, #63	; 0x3f
 80047ae:	2001      	movs	r0, #1
 80047b0:	f7ff ff3c 	bl	800462c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80047b4:	2103      	movs	r1, #3
 80047b6:	2002      	movs	r0, #2
 80047b8:	f7ff ff38 	bl	800462c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80047bc:	2103      	movs	r1, #3
 80047be:	2003      	movs	r0, #3
 80047c0:	f7ff ff34 	bl	800462c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80047c4:	2103      	movs	r1, #3
 80047c6:	2004      	movs	r0, #4
 80047c8:	f7ff ff30 	bl	800462c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80047cc:	2102      	movs	r1, #2
 80047ce:	2005      	movs	r0, #5
 80047d0:	f7ff ff2c 	bl	800462c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80047d4:	210f      	movs	r1, #15
 80047d6:	2006      	movs	r0, #6
 80047d8:	f7ff ff28 	bl	800462c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80047dc:	210e      	movs	r1, #14
 80047de:	2007      	movs	r0, #7
 80047e0:	f7ff ff24 	bl	800462c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80047e4:	2100      	movs	r1, #0
 80047e6:	2008      	movs	r0, #8
 80047e8:	f7ff ff20 	bl	800462c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80047ec:	2100      	movs	r1, #0
 80047ee:	2009      	movs	r0, #9
 80047f0:	f7ff ff1c 	bl	800462c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80047f4:	23e7      	movs	r3, #231	; 0xe7
 80047f6:	733b      	strb	r3, [r7, #12]
 80047f8:	23e7      	movs	r3, #231	; 0xe7
 80047fa:	72fb      	strb	r3, [r7, #11]
 80047fc:	23e7      	movs	r3, #231	; 0xe7
 80047fe:	72bb      	strb	r3, [r7, #10]
 8004800:	23e7      	movs	r3, #231	; 0xe7
 8004802:	727b      	strb	r3, [r7, #9]
 8004804:	23e7      	movs	r3, #231	; 0xe7
 8004806:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8004808:	f107 0308 	add.w	r3, r7, #8
 800480c:	2205      	movs	r2, #5
 800480e:	4619      	mov	r1, r3
 8004810:	200a      	movs	r0, #10
 8004812:	f7ff ff2d 	bl	8004670 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8004816:	23c2      	movs	r3, #194	; 0xc2
 8004818:	733b      	strb	r3, [r7, #12]
 800481a:	23c2      	movs	r3, #194	; 0xc2
 800481c:	72fb      	strb	r3, [r7, #11]
 800481e:	23c2      	movs	r3, #194	; 0xc2
 8004820:	72bb      	strb	r3, [r7, #10]
 8004822:	23c2      	movs	r3, #194	; 0xc2
 8004824:	727b      	strb	r3, [r7, #9]
 8004826:	23c2      	movs	r3, #194	; 0xc2
 8004828:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800482a:	f107 0308 	add.w	r3, r7, #8
 800482e:	2205      	movs	r2, #5
 8004830:	4619      	mov	r1, r3
 8004832:	200b      	movs	r0, #11
 8004834:	f7ff ff1c 	bl	8004670 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8004838:	21c3      	movs	r1, #195	; 0xc3
 800483a:	200c      	movs	r0, #12
 800483c:	f7ff fef6 	bl	800462c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8004840:	21c4      	movs	r1, #196	; 0xc4
 8004842:	200d      	movs	r0, #13
 8004844:	f7ff fef2 	bl	800462c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8004848:	21c5      	movs	r1, #197	; 0xc5
 800484a:	200e      	movs	r0, #14
 800484c:	f7ff feee 	bl	800462c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8004850:	21c6      	movs	r1, #198	; 0xc6
 8004852:	200f      	movs	r0, #15
 8004854:	f7ff feea 	bl	800462c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8004858:	23e7      	movs	r3, #231	; 0xe7
 800485a:	733b      	strb	r3, [r7, #12]
 800485c:	23e7      	movs	r3, #231	; 0xe7
 800485e:	72fb      	strb	r3, [r7, #11]
 8004860:	23e7      	movs	r3, #231	; 0xe7
 8004862:	72bb      	strb	r3, [r7, #10]
 8004864:	23e7      	movs	r3, #231	; 0xe7
 8004866:	727b      	strb	r3, [r7, #9]
 8004868:	23e7      	movs	r3, #231	; 0xe7
 800486a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 800486c:	f107 0308 	add.w	r3, r7, #8
 8004870:	2205      	movs	r2, #5
 8004872:	4619      	mov	r1, r3
 8004874:	2010      	movs	r0, #16
 8004876:	f7ff fefb 	bl	8004670 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800487a:	2100      	movs	r1, #0
 800487c:	2011      	movs	r0, #17
 800487e:	f7ff fed5 	bl	800462c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8004882:	2100      	movs	r1, #0
 8004884:	2012      	movs	r0, #18
 8004886:	f7ff fed1 	bl	800462c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800488a:	2100      	movs	r1, #0
 800488c:	2013      	movs	r0, #19
 800488e:	f7ff fecd 	bl	800462c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8004892:	2100      	movs	r1, #0
 8004894:	2014      	movs	r0, #20
 8004896:	f7ff fec9 	bl	800462c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800489a:	2100      	movs	r1, #0
 800489c:	2015      	movs	r0, #21
 800489e:	f7ff fec5 	bl	800462c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80048a2:	2100      	movs	r1, #0
 80048a4:	2016      	movs	r0, #22
 80048a6:	f7ff fec1 	bl	800462c <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 80048aa:	f000 facf 	bl	8004e4c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80048ae:	2100      	movs	r1, #0
 80048b0:	201c      	movs	r0, #28
 80048b2:	f7ff febb 	bl	800462c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80048b6:	2100      	movs	r1, #0
 80048b8:	201d      	movs	r0, #29
 80048ba:	f7ff feb7 	bl	800462c <NRF24_write_register>
	printRadioSettings();
 80048be:	f000 fadf 	bl	8004e80 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80048c2:	210f      	movs	r1, #15
 80048c4:	200f      	movs	r0, #15
 80048c6:	f000 f8c3 	bl	8004a50 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80048ca:	2003      	movs	r0, #3
 80048cc:	f000 f9a5 	bl	8004c1a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80048d0:	2001      	movs	r0, #1
 80048d2:	f000 f9db 	bl	8004c8c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80048d6:	2002      	movs	r0, #2
 80048d8:	f000 fa1e 	bl	8004d18 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80048dc:	f000 f970 	bl	8004bc0 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80048e0:	2020      	movs	r0, #32
 80048e2:	f000 f8e5 	bl	8004ab0 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80048e6:	f000 faa8 	bl	8004e3a <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80048ea:	204c      	movs	r0, #76	; 0x4c
 80048ec:	f000 f8cb 	bl	8004a86 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80048f0:	f7ff ff16 	bl	8004720 <NRF24_flush_tx>
	NRF24_flush_rx();
 80048f4:	f7ff ff1c 	bl	8004730 <NRF24_flush_rx>
	
	NRF24_powerDown();
 80048f8:	f000 fa36 	bl	8004d68 <NRF24_powerDown>
	
}
 80048fc:	bf00      	nop
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004906:	b002      	add	sp, #8
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	200000ac 	.word	0x200000ac
 8004910:	200000a4 	.word	0x200000a4
 8004914:	200000a8 	.word	0x200000a8
 8004918:	200000aa 	.word	0x200000aa

0800491c <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 800491c:	b598      	push	{r3, r4, r7, lr}
 800491e:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8004920:	2000      	movs	r0, #0
 8004922:	f7ff fe33 	bl	800458c <NRF24_read_register>
 8004926:	4603      	mov	r3, r0
 8004928:	f043 0303 	orr.w	r3, r3, #3
 800492c:	b2db      	uxtb	r3, r3
 800492e:	4619      	mov	r1, r3
 8004930:	2000      	movs	r0, #0
 8004932:	f7ff fe7b 	bl	800462c <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8004936:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <NRF24_startListening+0x44>)
 8004938:	cb18      	ldmia	r3, {r3, r4}
 800493a:	4323      	orrs	r3, r4
 800493c:	d004      	beq.n	8004948 <NRF24_startListening+0x2c>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 800493e:	2205      	movs	r2, #5
 8004940:	4907      	ldr	r1, [pc, #28]	; (8004960 <NRF24_startListening+0x44>)
 8004942:	200a      	movs	r0, #10
 8004944:	f7ff fe94 	bl	8004670 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8004948:	f7ff feea 	bl	8004720 <NRF24_flush_tx>
	NRF24_flush_rx();
 800494c:	f7ff fef0 	bl	8004730 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8004950:	2001      	movs	r0, #1
 8004952:	f7ff fdfb 	bl	800454c <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8004956:	2096      	movs	r0, #150	; 0x96
 8004958:	f7ff fdb8 	bl	80044cc <NRF24_DelayMicroSeconds>
}
 800495c:	bf00      	nop
 800495e:	bd98      	pop	{r3, r4, r7, pc}
 8004960:	20000098 	.word	0x20000098

08004964 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8004968:	2000      	movs	r0, #0
 800496a:	f000 fa0c 	bl	8004d86 <NRF24_availablePipe>
 800496e:	4603      	mov	r3, r0
}
 8004970:	4618      	mov	r0, r3
 8004972:	bd80      	pop	{r7, pc}

08004974 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	4619      	mov	r1, r3
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff fe9b 	bl	80046c0 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800498a:	2017      	movs	r0, #23
 800498c:	f7ff fdfe 	bl	800458c <NRF24_read_register>
 8004990:	4603      	mov	r3, r0
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8004998:	f7ff feca 	bl	8004730 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 800499c:	f000 f8a8 	bl	8004af0 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	bf14      	ite	ne
 80049a6:	2301      	movne	r3, #1
 80049a8:	2300      	moveq	r3, #0
 80049aa:	b2db      	uxtb	r3, r3
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 80049b4:	b590      	push	{r4, r7, lr}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4601      	mov	r1, r0
 80049bc:	e9c7 2300 	strd	r2, r3, [r7]
 80049c0:	460b      	mov	r3, r1
 80049c2:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d104      	bne.n	80049d4 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 80049ca:	e897 0018 	ldmia.w	r7, {r3, r4}
 80049ce:	4a1c      	ldr	r2, [pc, #112]	; (8004a40 <NRF24_openReadingPipe+0x8c>)
 80049d0:	e882 0018 	stmia.w	r2, {r3, r4}
	
	if(number <= 6)
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	2b06      	cmp	r3, #6
 80049d8:	d82d      	bhi.n	8004a36 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d808      	bhi.n	80049f2 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	4a18      	ldr	r2, [pc, #96]	; (8004a44 <NRF24_openReadingPipe+0x90>)
 80049e4:	5cd3      	ldrb	r3, [r2, r3]
 80049e6:	4639      	mov	r1, r7
 80049e8:	2205      	movs	r2, #5
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff fe40 	bl	8004670 <NRF24_write_registerN>
 80049f0:	e007      	b.n	8004a02 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	4a13      	ldr	r2, [pc, #76]	; (8004a44 <NRF24_openReadingPipe+0x90>)
 80049f6:	5cd3      	ldrb	r3, [r2, r3]
 80049f8:	4639      	mov	r1, r7
 80049fa:	2201      	movs	r2, #1
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff fe37 	bl	8004670 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	4a10      	ldr	r2, [pc, #64]	; (8004a48 <NRF24_openReadingPipe+0x94>)
 8004a06:	5cd2      	ldrb	r2, [r2, r3]
 8004a08:	4b10      	ldr	r3, [pc, #64]	; (8004a4c <NRF24_openReadingPipe+0x98>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4610      	mov	r0, r2
 8004a10:	f7ff fe0c 	bl	800462c <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8004a14:	2002      	movs	r0, #2
 8004a16:	f7ff fdb9 	bl	800458c <NRF24_read_register>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	b25a      	sxtb	r2, r3
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	2101      	movs	r1, #1
 8004a22:	fa01 f303 	lsl.w	r3, r1, r3
 8004a26:	b25b      	sxtb	r3, r3
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	b25b      	sxtb	r3, r3
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	4619      	mov	r1, r3
 8004a30:	2002      	movs	r0, #2
 8004a32:	f7ff fdfb 	bl	800462c <NRF24_write_register>
	}
	
}
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd90      	pop	{r4, r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000098 	.word	0x20000098
 8004a44:	080072b0 	.word	0x080072b0
 8004a48:	080072b8 	.word	0x080072b8
 8004a4c:	200000a0 	.word	0x200000a0

08004a50 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	4603      	mov	r3, r0
 8004a58:	460a      	mov	r2, r1
 8004a5a:	71fb      	strb	r3, [r7, #7]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8004a60:	79fb      	ldrb	r3, [r7, #7]
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	b25a      	sxtb	r2, r3
 8004a66:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	b25b      	sxtb	r3, r3
 8004a70:	4313      	orrs	r3, r2
 8004a72:	b25b      	sxtb	r3, r3
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	4619      	mov	r1, r3
 8004a78:	2004      	movs	r0, #4
 8004a7a:	f7ff fdd7 	bl	800462c <NRF24_write_register>
}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b084      	sub	sp, #16
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8004a90:	237f      	movs	r3, #127	; 0x7f
 8004a92:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8004a94:	7bfa      	ldrb	r2, [r7, #15]
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	bf28      	it	cs
 8004a9c:	4613      	movcs	r3, r2
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	2005      	movs	r0, #5
 8004aa4:	f7ff fdc2 	bl	800462c <NRF24_write_register>
}
 8004aa8:	bf00      	nop
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8004aba:	2320      	movs	r3, #32
 8004abc:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8004abe:	7bfa      	ldrb	r2, [r7, #15]
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	bf28      	it	cs
 8004ac6:	4613      	movcs	r3, r2
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	4b03      	ldr	r3, [pc, #12]	; (8004ad8 <NRF24_setPayloadSize+0x28>)
 8004acc:	701a      	strb	r2, [r3, #0]
}
 8004ace:	bf00      	nop
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc80      	pop	{r7}
 8004ad6:	4770      	bx	lr
 8004ad8:	200000a0 	.word	0x200000a0

08004adc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
	return payload_size;
 8004ae0:	4b02      	ldr	r3, [pc, #8]	; (8004aec <NRF24_getPayloadSize+0x10>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr
 8004aec:	200000a0 	.word	0x200000a0

08004af0 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8004af4:	2060      	movs	r0, #96	; 0x60
 8004af6:	f7ff fd49 	bl	800458c <NRF24_read_register>
 8004afa:	4603      	mov	r3, r0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8004b04:	201d      	movs	r0, #29
 8004b06:	f7ff fd41 	bl	800458c <NRF24_read_register>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	f043 0306 	orr.w	r3, r3, #6
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	4619      	mov	r1, r3
 8004b14:	201d      	movs	r0, #29
 8004b16:	f7ff fd89 	bl	800462c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8004b1a:	201d      	movs	r0, #29
 8004b1c:	f7ff fd36 	bl	800458c <NRF24_read_register>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10c      	bne.n	8004b40 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8004b26:	f000 f991 	bl	8004e4c <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8004b2a:	201d      	movs	r0, #29
 8004b2c:	f7ff fd2e 	bl	800458c <NRF24_read_register>
 8004b30:	4603      	mov	r3, r0
 8004b32:	f043 0306 	orr.w	r3, r3, #6
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	4619      	mov	r1, r3
 8004b3a:	201d      	movs	r0, #29
 8004b3c:	f7ff fd76 	bl	800462c <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8004b40:	201c      	movs	r0, #28
 8004b42:	f7ff fd23 	bl	800458c <NRF24_read_register>
 8004b46:	4603      	mov	r3, r0
 8004b48:	f043 0303 	orr.w	r3, r3, #3
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	4619      	mov	r1, r3
 8004b50:	201c      	movs	r0, #28
 8004b52:	f7ff fd6b 	bl	800462c <NRF24_write_register>
}
 8004b56:	bf00      	nop
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8004b60:	201d      	movs	r0, #29
 8004b62:	f7ff fd13 	bl	800458c <NRF24_read_register>
 8004b66:	4603      	mov	r3, r0
 8004b68:	f043 0304 	orr.w	r3, r3, #4
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	4619      	mov	r1, r3
 8004b70:	201d      	movs	r0, #29
 8004b72:	f7ff fd5b 	bl	800462c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8004b76:	201d      	movs	r0, #29
 8004b78:	f7ff fd08 	bl	800458c <NRF24_read_register>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10c      	bne.n	8004b9c <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8004b82:	f000 f963 	bl	8004e4c <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8004b86:	201d      	movs	r0, #29
 8004b88:	f7ff fd00 	bl	800458c <NRF24_read_register>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	f043 0304 	orr.w	r3, r3, #4
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	4619      	mov	r1, r3
 8004b96:	201d      	movs	r0, #29
 8004b98:	f7ff fd48 	bl	800462c <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8004b9c:	201c      	movs	r0, #28
 8004b9e:	f7ff fcf5 	bl	800458c <NRF24_read_register>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	4619      	mov	r1, r3
 8004bac:	201c      	movs	r0, #28
 8004bae:	f7ff fd3d 	bl	800462c <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8004bb2:	4b02      	ldr	r3, [pc, #8]	; (8004bbc <NRF24_enableDynamicPayloads+0x60>)
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	701a      	strb	r2, [r3, #0]
	
}
 8004bb8:	bf00      	nop
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	200000a1 	.word	0x200000a1

08004bc0 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8004bc4:	201d      	movs	r0, #29
 8004bc6:	f7ff fce1 	bl	800458c <NRF24_read_register>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f023 0304 	bic.w	r3, r3, #4
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	201d      	movs	r0, #29
 8004bd6:	f7ff fd29 	bl	800462c <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8004bda:	2100      	movs	r1, #0
 8004bdc:	201c      	movs	r0, #28
 8004bde:	f7ff fd25 	bl	800462c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8004be2:	4b02      	ldr	r3, [pc, #8]	; (8004bec <NRF24_disableDynamicPayloads+0x2c>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
}
 8004be8:	bf00      	nop
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	200000a1 	.word	0x200000a1

08004bf0 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d004      	beq.n	8004c0a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8004c00:	213f      	movs	r1, #63	; 0x3f
 8004c02:	2001      	movs	r0, #1
 8004c04:	f7ff fd12 	bl	800462c <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8004c08:	e003      	b.n	8004c12 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	2001      	movs	r0, #1
 8004c0e:	f7ff fd0d 	bl	800462c <NRF24_write_register>
}
 8004c12:	bf00      	nop
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	4603      	mov	r3, r0
 8004c22:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8004c24:	2006      	movs	r0, #6
 8004c26:	f7ff fcb1 	bl	800458c <NRF24_read_register>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	f023 0306 	bic.w	r3, r3, #6
 8004c34:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	2b03      	cmp	r3, #3
 8004c3a:	d104      	bne.n	8004c46 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	f043 0306 	orr.w	r3, r3, #6
 8004c42:	73fb      	strb	r3, [r7, #15]
 8004c44:	e019      	b.n	8004c7a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d104      	bne.n	8004c56 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	f043 0304 	orr.w	r3, r3, #4
 8004c52:	73fb      	strb	r3, [r7, #15]
 8004c54:	e011      	b.n	8004c7a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d104      	bne.n	8004c66 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	f043 0302 	orr.w	r3, r3, #2
 8004c62:	73fb      	strb	r3, [r7, #15]
 8004c64:	e009      	b.n	8004c7a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d006      	beq.n	8004c7a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d103      	bne.n	8004c7a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
 8004c74:	f043 0306 	orr.w	r3, r3, #6
 8004c78:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	2006      	movs	r0, #6
 8004c80:	f7ff fcd4 	bl	800462c <NRF24_write_register>
}
 8004c84:	bf00      	nop
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4603      	mov	r3, r0
 8004c94:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8004c96:	2300      	movs	r3, #0
 8004c98:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8004c9a:	2006      	movs	r0, #6
 8004c9c:	f7ff fc76 	bl	800458c <NRF24_read_register>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8004ca4:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <NRF24_setDataRate+0x88>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8004caa:	7bbb      	ldrb	r3, [r7, #14]
 8004cac:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004cb0:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d107      	bne.n	8004cc8 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8004cb8:	4b16      	ldr	r3, [pc, #88]	; (8004d14 <NRF24_setDataRate+0x88>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8004cbe:	7bbb      	ldrb	r3, [r7, #14]
 8004cc0:	f043 0320 	orr.w	r3, r3, #32
 8004cc4:	73bb      	strb	r3, [r7, #14]
 8004cc6:	e00d      	b.n	8004ce4 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8004cc8:	79fb      	ldrb	r3, [r7, #7]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d107      	bne.n	8004cde <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8004cce:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <NRF24_setDataRate+0x88>)
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8004cd4:	7bbb      	ldrb	r3, [r7, #14]
 8004cd6:	f043 0308 	orr.w	r3, r3, #8
 8004cda:	73bb      	strb	r3, [r7, #14]
 8004cdc:	e002      	b.n	8004ce4 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8004cde:	4b0d      	ldr	r3, [pc, #52]	; (8004d14 <NRF24_setDataRate+0x88>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8004ce4:	7bbb      	ldrb	r3, [r7, #14]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	2006      	movs	r0, #6
 8004cea:	f7ff fc9f 	bl	800462c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8004cee:	2006      	movs	r0, #6
 8004cf0:	f7ff fc4c 	bl	800458c <NRF24_read_register>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	7bbb      	ldrb	r3, [r7, #14]
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d102      	bne.n	8004d04 <NRF24_setDataRate+0x78>
  {
    result = true;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	73fb      	strb	r3, [r7, #15]
 8004d02:	e002      	b.n	8004d0a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8004d04:	4b03      	ldr	r3, [pc, #12]	; (8004d14 <NRF24_setDataRate+0x88>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	200000a2 	.word	0x200000a2

08004d18 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8004d22:	2000      	movs	r0, #0
 8004d24:	f7ff fc32 	bl	800458c <NRF24_read_register>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f023 030c 	bic.w	r3, r3, #12
 8004d2e:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8004d30:	79fb      	ldrb	r3, [r7, #7]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00f      	beq.n	8004d56 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d104      	bne.n	8004d46 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
 8004d3e:	f043 0308 	orr.w	r3, r3, #8
 8004d42:	73fb      	strb	r3, [r7, #15]
 8004d44:	e007      	b.n	8004d56 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
 8004d48:	f043 0308 	orr.w	r3, r3, #8
 8004d4c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	f043 0304 	orr.w	r3, r3, #4
 8004d54:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	f7ff fc66 	bl	800462c <NRF24_write_register>
}
 8004d60:	bf00      	nop
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	f7ff fc0d 	bl	800458c <NRF24_read_register>
 8004d72:	4603      	mov	r3, r0
 8004d74:	f023 0302 	bic.w	r3, r3, #2
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	f7ff fc55 	bl	800462c <NRF24_write_register>
}
 8004d82:	bf00      	nop
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8004d8e:	f7ff fcd7 	bl	8004740 <NRF24_get_status>
 8004d92:	4603      	mov	r3, r0
 8004d94:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	bf14      	ite	ne
 8004da0:	2301      	movne	r3, #1
 8004da2:	2300      	moveq	r3, #0
 8004da4:	73bb      	strb	r3, [r7, #14]

  if (result)
 8004da6:	7bbb      	ldrb	r3, [r7, #14]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d017      	beq.n	8004ddc <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	085b      	lsrs	r3, r3, #1
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8004dc2:	2140      	movs	r1, #64	; 0x40
 8004dc4:	2007      	movs	r0, #7
 8004dc6:	f7ff fc31 	bl	800462c <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8004dd4:	2120      	movs	r1, #32
 8004dd6:	2007      	movs	r0, #7
 8004dd8:	f7ff fc28 	bl	800462c <NRF24_write_register>
    }
  }
  return result;
 8004ddc:	7bbb      	ldrb	r3, [r7, #14]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <NRF24_writeAckPayload>:
  NRF24_DelayMicroSeconds(15);
  NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	4603      	mov	r3, r0
 8004dee:	6039      	str	r1, [r7, #0]
 8004df0:	71fb      	strb	r3, [r7, #7]
 8004df2:	4613      	mov	r3, r2
 8004df4:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 8004dfa:	2320      	movs	r3, #32
 8004dfc:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 8004dfe:	7afa      	ldrb	r2, [r7, #11]
 8004e00:	79bb      	ldrb	r3, [r7, #6]
 8004e02:	4293      	cmp	r3, r2
 8004e04:	bf28      	it	cs
 8004e06:	4613      	movcs	r3, r2
 8004e08:	72bb      	strb	r3, [r7, #10]
	
  NRF24_csn(0);
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	f7ff fb7e 	bl	800450c <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8004e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	b25b      	sxtb	r3, r3
 8004e1a:	f063 0357 	orn	r3, r3, #87	; 0x57
 8004e1e:	b25b      	sxtb	r3, r3
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	7aba      	ldrb	r2, [r7, #10]
 8004e24:	68f9      	ldr	r1, [r7, #12]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff fc22 	bl	8004670 <NRF24_write_registerN>
  NRF24_csn(1);
 8004e2c:	2001      	movs	r0, #1
 8004e2e:	f7ff fb6d 	bl	800450c <NRF24_csn>
}
 8004e32:	bf00      	nop
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8004e3e:	2170      	movs	r1, #112	; 0x70
 8004e40:	2007      	movs	r0, #7
 8004e42:	f7ff fbf3 	bl	800462c <NRF24_write_register>
}
 8004e46:	bf00      	nop
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8004e52:	2000      	movs	r0, #0
 8004e54:	f7ff fb5a 	bl	800450c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8004e58:	2350      	movs	r3, #80	; 0x50
 8004e5a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8004e5c:	2373      	movs	r3, #115	; 0x73
 8004e5e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8004e60:	1d39      	adds	r1, r7, #4
 8004e62:	2364      	movs	r3, #100	; 0x64
 8004e64:	2202      	movs	r2, #2
 8004e66:	4805      	ldr	r0, [pc, #20]	; (8004e7c <NRF24_ACTIVATE_cmd+0x30>)
 8004e68:	f7fe f868 	bl	8002f3c <HAL_SPI_Transmit>
	NRF24_csn(1);
 8004e6c:	2001      	movs	r0, #1
 8004e6e:	f7ff fb4d 	bl	800450c <NRF24_csn>
}
 8004e72:	bf00      	nop
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	200000ac 	.word	0x200000ac

08004e80 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8004e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e82:	b0a1      	sub	sp, #132	; 0x84
 8004e84:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8004e86:	f107 0308 	add.w	r3, r7, #8
 8004e8a:	4ab6      	ldr	r2, [pc, #728]	; (8005164 <printRadioSettings+0x2e4>)
 8004e8c:	461c      	mov	r4, r3
 8004e8e:	4615      	mov	r5, r2
 8004e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e9c:	682b      	ldr	r3, [r5, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	8022      	strh	r2, [r4, #0]
 8004ea2:	3402      	adds	r4, #2
 8004ea4:	0c1b      	lsrs	r3, r3, #16
 8004ea6:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004ea8:	f107 0308 	add.w	r3, r7, #8
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fb f94f 	bl	8000150 <strlen>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	f107 0108 	add.w	r1, r7, #8
 8004eba:	230a      	movs	r3, #10
 8004ebc:	48aa      	ldr	r0, [pc, #680]	; (8005168 <printRadioSettings+0x2e8>)
 8004ebe:	f7ff f90b 	bl	80040d8 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	f7ff fb62 	bl	800458c <NRF24_read_register>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8004ece:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d020      	beq.n	8004f1c <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8004eda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00b      	beq.n	8004efe <printRadioSettings+0x7e>
 8004ee6:	f107 0308 	add.w	r3, r7, #8
 8004eea:	4aa0      	ldr	r2, [pc, #640]	; (800516c <printRadioSettings+0x2ec>)
 8004eec:	461c      	mov	r4, r3
 8004eee:	4615      	mov	r5, r2
 8004ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ef4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ef8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004efc:	e017      	b.n	8004f2e <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8004efe:	f107 0308 	add.w	r3, r7, #8
 8004f02:	4a9b      	ldr	r2, [pc, #620]	; (8005170 <printRadioSettings+0x2f0>)
 8004f04:	461c      	mov	r4, r3
 8004f06:	4615      	mov	r5, r2
 8004f08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f10:	c403      	stmia	r4!, {r0, r1}
 8004f12:	8022      	strh	r2, [r4, #0]
 8004f14:	3402      	adds	r4, #2
 8004f16:	0c13      	lsrs	r3, r2, #16
 8004f18:	7023      	strb	r3, [r4, #0]
 8004f1a:	e008      	b.n	8004f2e <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8004f1c:	f107 0308 	add.w	r3, r7, #8
 8004f20:	4a94      	ldr	r2, [pc, #592]	; (8005174 <printRadioSettings+0x2f4>)
 8004f22:	461c      	mov	r4, r3
 8004f24:	4615      	mov	r5, r2
 8004f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f2a:	682b      	ldr	r3, [r5, #0]
 8004f2c:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004f2e:	f107 0308 	add.w	r3, r7, #8
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fb f90c 	bl	8000150 <strlen>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	f107 0108 	add.w	r1, r7, #8
 8004f40:	230a      	movs	r3, #10
 8004f42:	4889      	ldr	r0, [pc, #548]	; (8005168 <printRadioSettings+0x2e8>)
 8004f44:	f7ff f8c8 	bl	80040d8 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8004f48:	2001      	movs	r0, #1
 8004f4a:	f7ff fb1f 	bl	800458c <NRF24_read_register>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004f54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004f58:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bfcc      	ite	gt
 8004f60:	2301      	movgt	r3, #1
 8004f62:	2300      	movle	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004f68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004f6c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	bfcc      	ite	gt
 8004f74:	2301      	movgt	r3, #1
 8004f76:	2300      	movle	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004f7c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004f80:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	bfcc      	ite	gt
 8004f88:	2301      	movgt	r3, #1
 8004f8a:	2300      	movle	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004f90:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004f94:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	bfcc      	ite	gt
 8004f9c:	2301      	movgt	r3, #1
 8004f9e:	2300      	movle	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004fa4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004fa8:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bfcc      	ite	gt
 8004fb0:	2301      	movgt	r3, #1
 8004fb2:	2300      	movle	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004fb8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004fbc:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	bfcc      	ite	gt
 8004fc4:	2301      	movgt	r3, #1
 8004fc6:	2300      	movle	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	f107 0008 	add.w	r0, r7, #8
 8004fce:	9303      	str	r3, [sp, #12]
 8004fd0:	9402      	str	r4, [sp, #8]
 8004fd2:	9101      	str	r1, [sp, #4]
 8004fd4:	9200      	str	r2, [sp, #0]
 8004fd6:	4633      	mov	r3, r6
 8004fd8:	462a      	mov	r2, r5
 8004fda:	4967      	ldr	r1, [pc, #412]	; (8005178 <printRadioSettings+0x2f8>)
 8004fdc:	f001 fa86 	bl	80064ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004fe0:	f107 0308 	add.w	r3, r7, #8
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fb f8b3 	bl	8000150 <strlen>
 8004fea:	4603      	mov	r3, r0
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	f107 0108 	add.w	r1, r7, #8
 8004ff2:	230a      	movs	r3, #10
 8004ff4:	485c      	ldr	r0, [pc, #368]	; (8005168 <printRadioSettings+0x2e8>)
 8004ff6:	f7ff f86f 	bl	80040d8 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8004ffa:	2002      	movs	r0, #2
 8004ffc:	f7ff fac6 	bl	800458c <NRF24_read_register>
 8005000:	4603      	mov	r3, r0
 8005002:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005006:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800500a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800500e:	2b00      	cmp	r3, #0
 8005010:	bfcc      	ite	gt
 8005012:	2301      	movgt	r3, #1
 8005014:	2300      	movle	r3, #0
 8005016:	b2db      	uxtb	r3, r3
 8005018:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800501a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800501e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005022:	2b00      	cmp	r3, #0
 8005024:	bfcc      	ite	gt
 8005026:	2301      	movgt	r3, #1
 8005028:	2300      	movle	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800502e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005032:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005036:	2b00      	cmp	r3, #0
 8005038:	bfcc      	ite	gt
 800503a:	2301      	movgt	r3, #1
 800503c:	2300      	movle	r3, #0
 800503e:	b2db      	uxtb	r3, r3
 8005040:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005042:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005046:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800504a:	2b00      	cmp	r3, #0
 800504c:	bfcc      	ite	gt
 800504e:	2301      	movgt	r3, #1
 8005050:	2300      	movle	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005056:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800505a:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800505e:	2b00      	cmp	r3, #0
 8005060:	bfcc      	ite	gt
 8005062:	2301      	movgt	r3, #1
 8005064:	2300      	movle	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800506a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800506e:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005072:	2b00      	cmp	r3, #0
 8005074:	bfcc      	ite	gt
 8005076:	2301      	movgt	r3, #1
 8005078:	2300      	movle	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f107 0008 	add.w	r0, r7, #8
 8005080:	9303      	str	r3, [sp, #12]
 8005082:	9402      	str	r4, [sp, #8]
 8005084:	9101      	str	r1, [sp, #4]
 8005086:	9200      	str	r2, [sp, #0]
 8005088:	4633      	mov	r3, r6
 800508a:	462a      	mov	r2, r5
 800508c:	493b      	ldr	r1, [pc, #236]	; (800517c <printRadioSettings+0x2fc>)
 800508e:	f001 fa2d 	bl	80064ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005092:	f107 0308 	add.w	r3, r7, #8
 8005096:	4618      	mov	r0, r3
 8005098:	f7fb f85a 	bl	8000150 <strlen>
 800509c:	4603      	mov	r3, r0
 800509e:	b29a      	uxth	r2, r3
 80050a0:	f107 0108 	add.w	r1, r7, #8
 80050a4:	230a      	movs	r3, #10
 80050a6:	4830      	ldr	r0, [pc, #192]	; (8005168 <printRadioSettings+0x2e8>)
 80050a8:	f7ff f816 	bl	80040d8 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80050ac:	2003      	movs	r0, #3
 80050ae:	f7ff fa6d 	bl	800458c <NRF24_read_register>
 80050b2:	4603      	mov	r3, r0
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80050bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80050c0:	3302      	adds	r3, #2
 80050c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80050c6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80050ca:	f107 0308 	add.w	r3, r7, #8
 80050ce:	492c      	ldr	r1, [pc, #176]	; (8005180 <printRadioSettings+0x300>)
 80050d0:	4618      	mov	r0, r3
 80050d2:	f001 fa0b 	bl	80064ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80050d6:	f107 0308 	add.w	r3, r7, #8
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fb f838 	bl	8000150 <strlen>
 80050e0:	4603      	mov	r3, r0
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	f107 0108 	add.w	r1, r7, #8
 80050e8:	230a      	movs	r3, #10
 80050ea:	481f      	ldr	r0, [pc, #124]	; (8005168 <printRadioSettings+0x2e8>)
 80050ec:	f7fe fff4 	bl	80040d8 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80050f0:	2005      	movs	r0, #5
 80050f2:	f7ff fa4b 	bl	800458c <NRF24_read_register>
 80050f6:	4603      	mov	r3, r0
 80050f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80050fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005100:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005104:	f107 0308 	add.w	r3, r7, #8
 8005108:	491e      	ldr	r1, [pc, #120]	; (8005184 <printRadioSettings+0x304>)
 800510a:	4618      	mov	r0, r3
 800510c:	f001 f9ee 	bl	80064ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005110:	f107 0308 	add.w	r3, r7, #8
 8005114:	4618      	mov	r0, r3
 8005116:	f7fb f81b 	bl	8000150 <strlen>
 800511a:	4603      	mov	r3, r0
 800511c:	b29a      	uxth	r2, r3
 800511e:	f107 0108 	add.w	r1, r7, #8
 8005122:	230a      	movs	r3, #10
 8005124:	4810      	ldr	r0, [pc, #64]	; (8005168 <printRadioSettings+0x2e8>)
 8005126:	f7fe ffd7 	bl	80040d8 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 800512a:	2006      	movs	r0, #6
 800512c:	f7ff fa2e 	bl	800458c <NRF24_read_register>
 8005130:	4603      	mov	r3, r0
 8005132:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8005136:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d024      	beq.n	800518c <printRadioSettings+0x30c>
 8005142:	f107 0308 	add.w	r3, r7, #8
 8005146:	4a10      	ldr	r2, [pc, #64]	; (8005188 <printRadioSettings+0x308>)
 8005148:	461c      	mov	r4, r3
 800514a:	4615      	mov	r5, r2
 800514c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800514e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005150:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005154:	6020      	str	r0, [r4, #0]
 8005156:	3404      	adds	r4, #4
 8005158:	8021      	strh	r1, [r4, #0]
 800515a:	3402      	adds	r4, #2
 800515c:	0c0b      	lsrs	r3, r1, #16
 800515e:	7023      	strb	r3, [r4, #0]
 8005160:	e023      	b.n	80051aa <printRadioSettings+0x32a>
 8005162:	bf00      	nop
 8005164:	08006d6c 	.word	0x08006d6c
 8005168:	20000104 	.word	0x20000104
 800516c:	08006da0 	.word	0x08006da0
 8005170:	08006dbc 	.word	0x08006dbc
 8005174:	08006dd8 	.word	0x08006dd8
 8005178:	08006dec 	.word	0x08006dec
 800517c:	08006e30 	.word	0x08006e30
 8005180:	08006e7c 	.word	0x08006e7c
 8005184:	08006e98 	.word	0x08006e98
 8005188:	08006eac 	.word	0x08006eac
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800518c:	f107 0308 	add.w	r3, r7, #8
 8005190:	4a29      	ldr	r2, [pc, #164]	; (8005238 <printRadioSettings+0x3b8>)
 8005192:	461c      	mov	r4, r3
 8005194:	4615      	mov	r5, r2
 8005196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800519a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800519e:	6020      	str	r0, [r4, #0]
 80051a0:	3404      	adds	r4, #4
 80051a2:	8021      	strh	r1, [r4, #0]
 80051a4:	3402      	adds	r4, #2
 80051a6:	0c0b      	lsrs	r3, r1, #16
 80051a8:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80051aa:	f107 0308 	add.w	r3, r7, #8
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fa ffce 	bl	8000150 <strlen>
 80051b4:	4603      	mov	r3, r0
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	f107 0108 	add.w	r1, r7, #8
 80051bc:	230a      	movs	r3, #10
 80051be:	481f      	ldr	r0, [pc, #124]	; (800523c <printRadioSettings+0x3bc>)
 80051c0:	f7fe ff8a 	bl	80040d8 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80051c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80051c8:	f003 0306 	and.w	r3, r3, #6
 80051cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80051d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80051d4:	085b      	lsrs	r3, r3, #1
 80051d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80051da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <printRadioSettings+0x376>
 80051e2:	f107 0308 	add.w	r3, r7, #8
 80051e6:	4a16      	ldr	r2, [pc, #88]	; (8005240 <printRadioSettings+0x3c0>)
 80051e8:	461c      	mov	r4, r3
 80051ea:	4615      	mov	r5, r2
 80051ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051f0:	682b      	ldr	r3, [r5, #0]
 80051f2:	6023      	str	r3, [r4, #0]
 80051f4:	e037      	b.n	8005266 <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80051f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d109      	bne.n	8005212 <printRadioSettings+0x392>
 80051fe:	f107 0308 	add.w	r3, r7, #8
 8005202:	4a10      	ldr	r2, [pc, #64]	; (8005244 <printRadioSettings+0x3c4>)
 8005204:	461c      	mov	r4, r3
 8005206:	4615      	mov	r5, r2
 8005208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800520a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	6023      	str	r3, [r4, #0]
 8005210:	e029      	b.n	8005266 <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8005212:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005216:	2b02      	cmp	r3, #2
 8005218:	d118      	bne.n	800524c <printRadioSettings+0x3cc>
 800521a:	f107 0308 	add.w	r3, r7, #8
 800521e:	4a0a      	ldr	r2, [pc, #40]	; (8005248 <printRadioSettings+0x3c8>)
 8005220:	461c      	mov	r4, r3
 8005222:	4615      	mov	r5, r2
 8005224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	8022      	strh	r2, [r4, #0]
 800522e:	3402      	adds	r4, #2
 8005230:	0c1b      	lsrs	r3, r3, #16
 8005232:	7023      	strb	r3, [r4, #0]
 8005234:	e017      	b.n	8005266 <printRadioSettings+0x3e6>
 8005236:	bf00      	nop
 8005238:	08006ec4 	.word	0x08006ec4
 800523c:	20000104 	.word	0x20000104
 8005240:	08006edc 	.word	0x08006edc
 8005244:	08006ef0 	.word	0x08006ef0
 8005248:	08006f04 	.word	0x08006f04
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 800524c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005250:	2b03      	cmp	r3, #3
 8005252:	d108      	bne.n	8005266 <printRadioSettings+0x3e6>
 8005254:	f107 0308 	add.w	r3, r7, #8
 8005258:	4ad7      	ldr	r2, [pc, #860]	; (80055b8 <printRadioSettings+0x738>)
 800525a:	461c      	mov	r4, r3
 800525c:	4615      	mov	r5, r2
 800525e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005262:	682b      	ldr	r3, [r5, #0]
 8005264:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005266:	f107 0308 	add.w	r3, r7, #8
 800526a:	4618      	mov	r0, r3
 800526c:	f7fa ff70 	bl	8000150 <strlen>
 8005270:	4603      	mov	r3, r0
 8005272:	b29a      	uxth	r2, r3
 8005274:	f107 0108 	add.w	r1, r7, #8
 8005278:	230a      	movs	r3, #10
 800527a:	48d0      	ldr	r0, [pc, #832]	; (80055bc <printRadioSettings+0x73c>)
 800527c:	f7fe ff2c 	bl	80040d8 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8005280:	463b      	mov	r3, r7
 8005282:	2205      	movs	r2, #5
 8005284:	4619      	mov	r1, r3
 8005286:	200a      	movs	r0, #10
 8005288:	f7ff f9a8 	bl	80045dc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800528c:	793b      	ldrb	r3, [r7, #4]
 800528e:	461c      	mov	r4, r3
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	461d      	mov	r5, r3
 8005294:	78bb      	ldrb	r3, [r7, #2]
 8005296:	787a      	ldrb	r2, [r7, #1]
 8005298:	7839      	ldrb	r1, [r7, #0]
 800529a:	f107 0008 	add.w	r0, r7, #8
 800529e:	9102      	str	r1, [sp, #8]
 80052a0:	9201      	str	r2, [sp, #4]
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	462b      	mov	r3, r5
 80052a6:	4622      	mov	r2, r4
 80052a8:	49c5      	ldr	r1, [pc, #788]	; (80055c0 <printRadioSettings+0x740>)
 80052aa:	f001 f91f 	bl	80064ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80052ae:	f107 0308 	add.w	r3, r7, #8
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fa ff4c 	bl	8000150 <strlen>
 80052b8:	4603      	mov	r3, r0
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	f107 0108 	add.w	r1, r7, #8
 80052c0:	230a      	movs	r3, #10
 80052c2:	48be      	ldr	r0, [pc, #760]	; (80055bc <printRadioSettings+0x73c>)
 80052c4:	f7fe ff08 	bl	80040d8 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80052c8:	463b      	mov	r3, r7
 80052ca:	2205      	movs	r2, #5
 80052cc:	4619      	mov	r1, r3
 80052ce:	200b      	movs	r0, #11
 80052d0:	f7ff f984 	bl	80045dc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80052d4:	793b      	ldrb	r3, [r7, #4]
 80052d6:	461c      	mov	r4, r3
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	461d      	mov	r5, r3
 80052dc:	78bb      	ldrb	r3, [r7, #2]
 80052de:	787a      	ldrb	r2, [r7, #1]
 80052e0:	7839      	ldrb	r1, [r7, #0]
 80052e2:	f107 0008 	add.w	r0, r7, #8
 80052e6:	9102      	str	r1, [sp, #8]
 80052e8:	9201      	str	r2, [sp, #4]
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	462b      	mov	r3, r5
 80052ee:	4622      	mov	r2, r4
 80052f0:	49b4      	ldr	r1, [pc, #720]	; (80055c4 <printRadioSettings+0x744>)
 80052f2:	f001 f8fb 	bl	80064ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80052f6:	f107 0308 	add.w	r3, r7, #8
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fa ff28 	bl	8000150 <strlen>
 8005300:	4603      	mov	r3, r0
 8005302:	b29a      	uxth	r2, r3
 8005304:	f107 0108 	add.w	r1, r7, #8
 8005308:	230a      	movs	r3, #10
 800530a:	48ac      	ldr	r0, [pc, #688]	; (80055bc <printRadioSettings+0x73c>)
 800530c:	f7fe fee4 	bl	80040d8 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8005310:	463b      	mov	r3, r7
 8005312:	2201      	movs	r2, #1
 8005314:	4619      	mov	r1, r3
 8005316:	200c      	movs	r0, #12
 8005318:	f7ff f960 	bl	80045dc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800531c:	783b      	ldrb	r3, [r7, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	f107 0308 	add.w	r3, r7, #8
 8005324:	49a8      	ldr	r1, [pc, #672]	; (80055c8 <printRadioSettings+0x748>)
 8005326:	4618      	mov	r0, r3
 8005328:	f001 f8e0 	bl	80064ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800532c:	f107 0308 	add.w	r3, r7, #8
 8005330:	4618      	mov	r0, r3
 8005332:	f7fa ff0d 	bl	8000150 <strlen>
 8005336:	4603      	mov	r3, r0
 8005338:	b29a      	uxth	r2, r3
 800533a:	f107 0108 	add.w	r1, r7, #8
 800533e:	230a      	movs	r3, #10
 8005340:	489e      	ldr	r0, [pc, #632]	; (80055bc <printRadioSettings+0x73c>)
 8005342:	f7fe fec9 	bl	80040d8 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8005346:	463b      	mov	r3, r7
 8005348:	2201      	movs	r2, #1
 800534a:	4619      	mov	r1, r3
 800534c:	200d      	movs	r0, #13
 800534e:	f7ff f945 	bl	80045dc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8005352:	783b      	ldrb	r3, [r7, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	f107 0308 	add.w	r3, r7, #8
 800535a:	499c      	ldr	r1, [pc, #624]	; (80055cc <printRadioSettings+0x74c>)
 800535c:	4618      	mov	r0, r3
 800535e:	f001 f8c5 	bl	80064ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005362:	f107 0308 	add.w	r3, r7, #8
 8005366:	4618      	mov	r0, r3
 8005368:	f7fa fef2 	bl	8000150 <strlen>
 800536c:	4603      	mov	r3, r0
 800536e:	b29a      	uxth	r2, r3
 8005370:	f107 0108 	add.w	r1, r7, #8
 8005374:	230a      	movs	r3, #10
 8005376:	4891      	ldr	r0, [pc, #580]	; (80055bc <printRadioSettings+0x73c>)
 8005378:	f7fe feae 	bl	80040d8 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800537c:	463b      	mov	r3, r7
 800537e:	2201      	movs	r2, #1
 8005380:	4619      	mov	r1, r3
 8005382:	200e      	movs	r0, #14
 8005384:	f7ff f92a 	bl	80045dc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8005388:	783b      	ldrb	r3, [r7, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	f107 0308 	add.w	r3, r7, #8
 8005390:	498f      	ldr	r1, [pc, #572]	; (80055d0 <printRadioSettings+0x750>)
 8005392:	4618      	mov	r0, r3
 8005394:	f001 f8aa 	bl	80064ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005398:	f107 0308 	add.w	r3, r7, #8
 800539c:	4618      	mov	r0, r3
 800539e:	f7fa fed7 	bl	8000150 <strlen>
 80053a2:	4603      	mov	r3, r0
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	f107 0108 	add.w	r1, r7, #8
 80053aa:	230a      	movs	r3, #10
 80053ac:	4883      	ldr	r0, [pc, #524]	; (80055bc <printRadioSettings+0x73c>)
 80053ae:	f7fe fe93 	bl	80040d8 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80053b2:	463b      	mov	r3, r7
 80053b4:	2201      	movs	r2, #1
 80053b6:	4619      	mov	r1, r3
 80053b8:	200f      	movs	r0, #15
 80053ba:	f7ff f90f 	bl	80045dc <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80053be:	783b      	ldrb	r3, [r7, #0]
 80053c0:	461a      	mov	r2, r3
 80053c2:	f107 0308 	add.w	r3, r7, #8
 80053c6:	4983      	ldr	r1, [pc, #524]	; (80055d4 <printRadioSettings+0x754>)
 80053c8:	4618      	mov	r0, r3
 80053ca:	f001 f88f 	bl	80064ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80053ce:	f107 0308 	add.w	r3, r7, #8
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fa febc 	bl	8000150 <strlen>
 80053d8:	4603      	mov	r3, r0
 80053da:	b29a      	uxth	r2, r3
 80053dc:	f107 0108 	add.w	r1, r7, #8
 80053e0:	230a      	movs	r3, #10
 80053e2:	4876      	ldr	r0, [pc, #472]	; (80055bc <printRadioSettings+0x73c>)
 80053e4:	f7fe fe78 	bl	80040d8 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80053e8:	463b      	mov	r3, r7
 80053ea:	2205      	movs	r2, #5
 80053ec:	4619      	mov	r1, r3
 80053ee:	2010      	movs	r0, #16
 80053f0:	f7ff f8f4 	bl	80045dc <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80053f4:	793b      	ldrb	r3, [r7, #4]
 80053f6:	461c      	mov	r4, r3
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	461d      	mov	r5, r3
 80053fc:	78bb      	ldrb	r3, [r7, #2]
 80053fe:	787a      	ldrb	r2, [r7, #1]
 8005400:	7839      	ldrb	r1, [r7, #0]
 8005402:	f107 0008 	add.w	r0, r7, #8
 8005406:	9102      	str	r1, [sp, #8]
 8005408:	9201      	str	r2, [sp, #4]
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	462b      	mov	r3, r5
 800540e:	4622      	mov	r2, r4
 8005410:	4971      	ldr	r1, [pc, #452]	; (80055d8 <printRadioSettings+0x758>)
 8005412:	f001 f86b 	bl	80064ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005416:	f107 0308 	add.w	r3, r7, #8
 800541a:	4618      	mov	r0, r3
 800541c:	f7fa fe98 	bl	8000150 <strlen>
 8005420:	4603      	mov	r3, r0
 8005422:	b29a      	uxth	r2, r3
 8005424:	f107 0108 	add.w	r1, r7, #8
 8005428:	230a      	movs	r3, #10
 800542a:	4864      	ldr	r0, [pc, #400]	; (80055bc <printRadioSettings+0x73c>)
 800542c:	f7fe fe54 	bl	80040d8 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8005430:	2011      	movs	r0, #17
 8005432:	f7ff f8ab 	bl	800458c <NRF24_read_register>
 8005436:	4603      	mov	r3, r0
 8005438:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800543c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005440:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005444:	f107 0308 	add.w	r3, r7, #8
 8005448:	4964      	ldr	r1, [pc, #400]	; (80055dc <printRadioSettings+0x75c>)
 800544a:	4618      	mov	r0, r3
 800544c:	f001 f84e 	bl	80064ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005450:	f107 0308 	add.w	r3, r7, #8
 8005454:	4618      	mov	r0, r3
 8005456:	f7fa fe7b 	bl	8000150 <strlen>
 800545a:	4603      	mov	r3, r0
 800545c:	b29a      	uxth	r2, r3
 800545e:	f107 0108 	add.w	r1, r7, #8
 8005462:	230a      	movs	r3, #10
 8005464:	4855      	ldr	r0, [pc, #340]	; (80055bc <printRadioSettings+0x73c>)
 8005466:	f7fe fe37 	bl	80040d8 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 800546a:	2012      	movs	r0, #18
 800546c:	f7ff f88e 	bl	800458c <NRF24_read_register>
 8005470:	4603      	mov	r3, r0
 8005472:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8005476:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800547a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800547e:	f107 0308 	add.w	r3, r7, #8
 8005482:	4957      	ldr	r1, [pc, #348]	; (80055e0 <printRadioSettings+0x760>)
 8005484:	4618      	mov	r0, r3
 8005486:	f001 f831 	bl	80064ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800548a:	f107 0308 	add.w	r3, r7, #8
 800548e:	4618      	mov	r0, r3
 8005490:	f7fa fe5e 	bl	8000150 <strlen>
 8005494:	4603      	mov	r3, r0
 8005496:	b29a      	uxth	r2, r3
 8005498:	f107 0108 	add.w	r1, r7, #8
 800549c:	230a      	movs	r3, #10
 800549e:	4847      	ldr	r0, [pc, #284]	; (80055bc <printRadioSettings+0x73c>)
 80054a0:	f7fe fe1a 	bl	80040d8 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80054a4:	2013      	movs	r0, #19
 80054a6:	f7ff f871 	bl	800458c <NRF24_read_register>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80054b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80054b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054b8:	f107 0308 	add.w	r3, r7, #8
 80054bc:	4949      	ldr	r1, [pc, #292]	; (80055e4 <printRadioSettings+0x764>)
 80054be:	4618      	mov	r0, r3
 80054c0:	f001 f814 	bl	80064ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80054c4:	f107 0308 	add.w	r3, r7, #8
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fa fe41 	bl	8000150 <strlen>
 80054ce:	4603      	mov	r3, r0
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	f107 0108 	add.w	r1, r7, #8
 80054d6:	230a      	movs	r3, #10
 80054d8:	4838      	ldr	r0, [pc, #224]	; (80055bc <printRadioSettings+0x73c>)
 80054da:	f7fe fdfd 	bl	80040d8 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 80054de:	2014      	movs	r0, #20
 80054e0:	f7ff f854 	bl	800458c <NRF24_read_register>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80054ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80054ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054f2:	f107 0308 	add.w	r3, r7, #8
 80054f6:	493c      	ldr	r1, [pc, #240]	; (80055e8 <printRadioSettings+0x768>)
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fff7 	bl	80064ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80054fe:	f107 0308 	add.w	r3, r7, #8
 8005502:	4618      	mov	r0, r3
 8005504:	f7fa fe24 	bl	8000150 <strlen>
 8005508:	4603      	mov	r3, r0
 800550a:	b29a      	uxth	r2, r3
 800550c:	f107 0108 	add.w	r1, r7, #8
 8005510:	230a      	movs	r3, #10
 8005512:	482a      	ldr	r0, [pc, #168]	; (80055bc <printRadioSettings+0x73c>)
 8005514:	f7fe fde0 	bl	80040d8 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8005518:	2015      	movs	r0, #21
 800551a:	f7ff f837 	bl	800458c <NRF24_read_register>
 800551e:	4603      	mov	r3, r0
 8005520:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8005524:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005528:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800552c:	f107 0308 	add.w	r3, r7, #8
 8005530:	492e      	ldr	r1, [pc, #184]	; (80055ec <printRadioSettings+0x76c>)
 8005532:	4618      	mov	r0, r3
 8005534:	f000 ffda 	bl	80064ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005538:	f107 0308 	add.w	r3, r7, #8
 800553c:	4618      	mov	r0, r3
 800553e:	f7fa fe07 	bl	8000150 <strlen>
 8005542:	4603      	mov	r3, r0
 8005544:	b29a      	uxth	r2, r3
 8005546:	f107 0108 	add.w	r1, r7, #8
 800554a:	230a      	movs	r3, #10
 800554c:	481b      	ldr	r0, [pc, #108]	; (80055bc <printRadioSettings+0x73c>)
 800554e:	f7fe fdc3 	bl	80040d8 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8005552:	2016      	movs	r0, #22
 8005554:	f7ff f81a 	bl	800458c <NRF24_read_register>
 8005558:	4603      	mov	r3, r0
 800555a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800555e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005562:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005566:	f107 0308 	add.w	r3, r7, #8
 800556a:	4921      	ldr	r1, [pc, #132]	; (80055f0 <printRadioSettings+0x770>)
 800556c:	4618      	mov	r0, r3
 800556e:	f000 ffbd 	bl	80064ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005572:	f107 0308 	add.w	r3, r7, #8
 8005576:	4618      	mov	r0, r3
 8005578:	f7fa fdea 	bl	8000150 <strlen>
 800557c:	4603      	mov	r3, r0
 800557e:	b29a      	uxth	r2, r3
 8005580:	f107 0108 	add.w	r1, r7, #8
 8005584:	230a      	movs	r3, #10
 8005586:	480d      	ldr	r0, [pc, #52]	; (80055bc <printRadioSettings+0x73c>)
 8005588:	f7fe fda6 	bl	80040d8 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800558c:	201c      	movs	r0, #28
 800558e:	f7fe fffd 	bl	800458c <NRF24_read_register>
 8005592:	4603      	mov	r3, r0
 8005594:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005598:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800559c:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	bfcc      	ite	gt
 80055a4:	2301      	movgt	r3, #1
 80055a6:	2300      	movle	r3, #0
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80055ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	e01e      	b.n	80055f4 <printRadioSettings+0x774>
 80055b6:	bf00      	nop
 80055b8:	08006f18 	.word	0x08006f18
 80055bc:	20000104 	.word	0x20000104
 80055c0:	08006f2c 	.word	0x08006f2c
 80055c4:	08006f5c 	.word	0x08006f5c
 80055c8:	08006f8c 	.word	0x08006f8c
 80055cc:	08006fb4 	.word	0x08006fb4
 80055d0:	08006fdc 	.word	0x08006fdc
 80055d4:	08007004 	.word	0x08007004
 80055d8:	0800702c 	.word	0x0800702c
 80055dc:	08007058 	.word	0x08007058
 80055e0:	08007074 	.word	0x08007074
 80055e4:	08007090 	.word	0x08007090
 80055e8:	080070ac 	.word	0x080070ac
 80055ec:	080070c8 	.word	0x080070c8
 80055f0:	080070e4 	.word	0x080070e4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bfcc      	ite	gt
 80055f8:	2301      	movgt	r3, #1
 80055fa:	2300      	movle	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005600:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005604:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005608:	2b00      	cmp	r3, #0
 800560a:	bfcc      	ite	gt
 800560c:	2301      	movgt	r3, #1
 800560e:	2300      	movle	r3, #0
 8005610:	b2db      	uxtb	r3, r3
 8005612:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005614:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005618:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800561c:	2b00      	cmp	r3, #0
 800561e:	bfcc      	ite	gt
 8005620:	2301      	movgt	r3, #1
 8005622:	2300      	movle	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005628:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800562c:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005630:	2b00      	cmp	r3, #0
 8005632:	bfcc      	ite	gt
 8005634:	2301      	movgt	r3, #1
 8005636:	2300      	movle	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800563c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005640:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005644:	2b00      	cmp	r3, #0
 8005646:	bfcc      	ite	gt
 8005648:	2301      	movgt	r3, #1
 800564a:	2300      	movle	r3, #0
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f107 0008 	add.w	r0, r7, #8
 8005652:	9303      	str	r3, [sp, #12]
 8005654:	9402      	str	r4, [sp, #8]
 8005656:	9101      	str	r1, [sp, #4]
 8005658:	9200      	str	r2, [sp, #0]
 800565a:	4633      	mov	r3, r6
 800565c:	462a      	mov	r2, r5
 800565e:	494a      	ldr	r1, [pc, #296]	; (8005788 <printRadioSettings+0x908>)
 8005660:	f000 ff44 	bl	80064ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005664:	f107 0308 	add.w	r3, r7, #8
 8005668:	4618      	mov	r0, r3
 800566a:	f7fa fd71 	bl	8000150 <strlen>
 800566e:	4603      	mov	r3, r0
 8005670:	b29a      	uxth	r2, r3
 8005672:	f107 0108 	add.w	r1, r7, #8
 8005676:	230a      	movs	r3, #10
 8005678:	4844      	ldr	r0, [pc, #272]	; (800578c <printRadioSettings+0x90c>)
 800567a:	f7fe fd2d 	bl	80040d8 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800567e:	201d      	movs	r0, #29
 8005680:	f7fe ff84 	bl	800458c <NRF24_read_register>
 8005684:	4603      	mov	r3, r0
 8005686:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800568a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00c      	beq.n	80056b0 <printRadioSettings+0x830>
 8005696:	f107 0308 	add.w	r3, r7, #8
 800569a:	4a3d      	ldr	r2, [pc, #244]	; (8005790 <printRadioSettings+0x910>)
 800569c:	461c      	mov	r4, r3
 800569e:	4615      	mov	r5, r2
 80056a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80056a8:	6020      	str	r0, [r4, #0]
 80056aa:	3404      	adds	r4, #4
 80056ac:	8021      	strh	r1, [r4, #0]
 80056ae:	e00e      	b.n	80056ce <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80056b0:	f107 0308 	add.w	r3, r7, #8
 80056b4:	4a37      	ldr	r2, [pc, #220]	; (8005794 <printRadioSettings+0x914>)
 80056b6:	461c      	mov	r4, r3
 80056b8:	4615      	mov	r5, r2
 80056ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80056c2:	6020      	str	r0, [r4, #0]
 80056c4:	3404      	adds	r4, #4
 80056c6:	8021      	strh	r1, [r4, #0]
 80056c8:	3402      	adds	r4, #2
 80056ca:	0c0b      	lsrs	r3, r1, #16
 80056cc:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80056ce:	f107 0308 	add.w	r3, r7, #8
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fa fd3c 	bl	8000150 <strlen>
 80056d8:	4603      	mov	r3, r0
 80056da:	b29a      	uxth	r2, r3
 80056dc:	f107 0108 	add.w	r1, r7, #8
 80056e0:	230a      	movs	r3, #10
 80056e2:	482a      	ldr	r0, [pc, #168]	; (800578c <printRadioSettings+0x90c>)
 80056e4:	f7fe fcf8 	bl	80040d8 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80056e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00b      	beq.n	800570c <printRadioSettings+0x88c>
 80056f4:	f107 0308 	add.w	r3, r7, #8
 80056f8:	4a27      	ldr	r2, [pc, #156]	; (8005798 <printRadioSettings+0x918>)
 80056fa:	461c      	mov	r4, r3
 80056fc:	4615      	mov	r5, r2
 80056fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005702:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005706:	c403      	stmia	r4!, {r0, r1}
 8005708:	8022      	strh	r2, [r4, #0]
 800570a:	e00d      	b.n	8005728 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 800570c:	f107 0308 	add.w	r3, r7, #8
 8005710:	4a22      	ldr	r2, [pc, #136]	; (800579c <printRadioSettings+0x91c>)
 8005712:	461c      	mov	r4, r3
 8005714:	4615      	mov	r5, r2
 8005716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800571a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800571e:	c403      	stmia	r4!, {r0, r1}
 8005720:	8022      	strh	r2, [r4, #0]
 8005722:	3402      	adds	r4, #2
 8005724:	0c13      	lsrs	r3, r2, #16
 8005726:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005728:	f107 0308 	add.w	r3, r7, #8
 800572c:	4618      	mov	r0, r3
 800572e:	f7fa fd0f 	bl	8000150 <strlen>
 8005732:	4603      	mov	r3, r0
 8005734:	b29a      	uxth	r2, r3
 8005736:	f107 0108 	add.w	r1, r7, #8
 800573a:	230a      	movs	r3, #10
 800573c:	4813      	ldr	r0, [pc, #76]	; (800578c <printRadioSettings+0x90c>)
 800573e:	f7fe fccb 	bl	80040d8 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8005742:	f107 0308 	add.w	r3, r7, #8
 8005746:	4a16      	ldr	r2, [pc, #88]	; (80057a0 <printRadioSettings+0x920>)
 8005748:	461c      	mov	r4, r3
 800574a:	4615      	mov	r5, r2
 800574c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800574e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005758:	682b      	ldr	r3, [r5, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	8022      	strh	r2, [r4, #0]
 800575e:	3402      	adds	r4, #2
 8005760:	0c1b      	lsrs	r3, r3, #16
 8005762:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005764:	f107 0308 	add.w	r3, r7, #8
 8005768:	4618      	mov	r0, r3
 800576a:	f7fa fcf1 	bl	8000150 <strlen>
 800576e:	4603      	mov	r3, r0
 8005770:	b29a      	uxth	r2, r3
 8005772:	f107 0108 	add.w	r1, r7, #8
 8005776:	230a      	movs	r3, #10
 8005778:	4804      	ldr	r0, [pc, #16]	; (800578c <printRadioSettings+0x90c>)
 800577a:	f7fe fcad 	bl	80040d8 <HAL_UART_Transmit>
}
 800577e:	bf00      	nop
 8005780:	3774      	adds	r7, #116	; 0x74
 8005782:	46bd      	mov	sp, r7
 8005784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005786:	bf00      	nop
 8005788:	08007100 	.word	0x08007100
 800578c:	20000104 	.word	0x20000104
 8005790:	0800714c 	.word	0x0800714c
 8005794:	08007164 	.word	0x08007164
 8005798:	0800717c 	.word	0x0800717c
 800579c:	08007198 	.word	0x08007198
 80057a0:	08006d6c 	.word	0x08006d6c
 80057a4:	00000000 	.word	0x00000000

080057a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80057a8:	b590      	push	{r4, r7, lr}
 80057aa:	b09b      	sub	sp, #108	; 0x6c
 80057ac:	af16      	add	r7, sp, #88	; 0x58
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80057ae:	f7fb f8c1 	bl	8000934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80057b2:	f000 f951 	bl	8005a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80057b6:	f000 fb15 	bl	8005de4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80057ba:	f000 fa9b 	bl	8005cf4 <MX_TIM2_Init>
  MX_SPI1_Init();
 80057be:	f000 fa63 	bl	8005c88 <MX_SPI1_Init>
  MX_CAN_Init();
 80057c2:	f000 f9e3 	bl	8005b8c <MX_CAN_Init>
  MX_ADC1_Init();
 80057c6:	f000 f9a3 	bl	8005b10 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80057ca:	f000 fae1 	bl	8005d90 <MX_USART1_UART_Init>

  HAL_TIM_Base_Start_IT(&htim2);
 80057ce:	4892      	ldr	r0, [pc, #584]	; (8005a18 <main+0x270>)
 80057d0:	f7fe f8b2 	bl	8003938 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start (&hadc1);
 80057d4:	4891      	ldr	r0, [pc, #580]	; (8005a1c <main+0x274>)
 80057d6:	f7fb fa09 	bl	8000bec <HAL_ADC_Start>

  /* USER CODE BEGIN 2 */
  NRF24_begin(GPIOA,GPIO_PIN_3,GPIO_PIN_4, hspi1); //CS CE
 80057da:	4c91      	ldr	r4, [pc, #580]	; (8005a20 <main+0x278>)
 80057dc:	4668      	mov	r0, sp
 80057de:	1d23      	adds	r3, r4, #4
 80057e0:	2254      	movs	r2, #84	; 0x54
 80057e2:	4619      	mov	r1, r3
 80057e4:	f000 fe6e 	bl	80064c4 <memcpy>
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	2210      	movs	r2, #16
 80057ec:	2108      	movs	r1, #8
 80057ee:	488d      	ldr	r0, [pc, #564]	; (8005a24 <main+0x27c>)
 80057f0:	f7fe ffb4 	bl	800475c <NRF24_begin>

  //*** TRANSMIT - ACK ***//
  NRF24_setAutoAck(true);
 80057f4:	2001      	movs	r0, #1
 80057f6:	f7ff f9fb 	bl	8004bf0 <NRF24_setAutoAck>
  NRF24_setChannel(103);
 80057fa:	2067      	movs	r0, #103	; 0x67
 80057fc:	f7ff f943 	bl	8004a86 <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 8005800:	2020      	movs	r0, #32
 8005802:	f7ff f955 	bl	8004ab0 <NRF24_setPayloadSize>
  NRF24_openReadingPipe(1,RxpipeAddrs);
 8005806:	4b88      	ldr	r3, [pc, #544]	; (8005a28 <main+0x280>)
 8005808:	cb18      	ldmia	r3, {r3, r4}
 800580a:	461a      	mov	r2, r3
 800580c:	4623      	mov	r3, r4
 800580e:	2001      	movs	r0, #1
 8005810:	f7ff f8d0 	bl	80049b4 <NRF24_openReadingPipe>

  NRF24_enableDynamicPayloads();
 8005814:	f7ff f9a2 	bl	8004b5c <NRF24_enableDynamicPayloads>
  NRF24_enableAckPayload();
 8005818:	f7ff f972 	bl	8004b00 <NRF24_enableAckPayload>

  NRF24_startListening();
 800581c:	f7ff f87e 	bl	800491c <NRF24_startListening>


  /* USER CODE END 2 */


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); //liga a energia
 8005820:	2200      	movs	r2, #0
 8005822:	2102      	movs	r1, #2
 8005824:	487f      	ldr	r0, [pc, #508]	; (8005a24 <main+0x27c>)
 8005826:	f7fc fdc8 	bl	80023ba <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800582a:	2201      	movs	r2, #1
 800582c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005830:	487e      	ldr	r0, [pc, #504]	; (8005a2c <main+0x284>)
 8005832:	f7fc fdc2 	bl	80023ba <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8005836:	20fa      	movs	r0, #250	; 0xfa
 8005838:	f7fb f8de 	bl	80009f8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800583c:	2200      	movs	r2, #0
 800583e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005842:	487a      	ldr	r0, [pc, #488]	; (8005a2c <main+0x284>)
 8005844:	f7fc fdb9 	bl	80023ba <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8005848:	2064      	movs	r0, #100	; 0x64
 800584a:	f7fb f8d5 	bl	80009f8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800584e:	2201      	movs	r2, #1
 8005850:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005854:	4875      	ldr	r0, [pc, #468]	; (8005a2c <main+0x284>)
 8005856:	f7fc fdb0 	bl	80023ba <HAL_GPIO_WritePin>
  HAL_Delay(250);
 800585a:	20fa      	movs	r0, #250	; 0xfa
 800585c:	f7fb f8cc 	bl	80009f8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8005860:	2200      	movs	r2, #0
 8005862:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005866:	4871      	ldr	r0, [pc, #452]	; (8005a2c <main+0x284>)
 8005868:	f7fc fda7 	bl	80023ba <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800586c:	2064      	movs	r0, #100	; 0x64
 800586e:	f7fb f8c3 	bl	80009f8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8005872:	2201      	movs	r2, #1
 8005874:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005878:	486c      	ldr	r0, [pc, #432]	; (8005a2c <main+0x284>)
 800587a:	f7fc fd9e 	bl	80023ba <HAL_GPIO_WritePin>
  HAL_Delay(250);
 800587e:	20fa      	movs	r0, #250	; 0xfa
 8005880:	f7fb f8ba 	bl	80009f8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8005884:	2200      	movs	r2, #0
 8005886:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800588a:	4868      	ldr	r0, [pc, #416]	; (8005a2c <main+0x284>)
 800588c:	f7fc fd95 	bl	80023ba <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	HAL_ADC_PollForConversion (&hadc1, 1000);
 8005890:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005894:	4861      	ldr	r0, [pc, #388]	; (8005a1c <main+0x274>)
 8005896:	f7fb fa57 	bl	8000d48 <HAL_ADC_PollForConversion>

	for (int i = n-1; i>0 ; i--){
 800589a:	2331      	movs	r3, #49	; 0x31
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	e00b      	b.n	80058b8 <main+0x110>
    		media[i] = media [i-1];
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	4a62      	ldr	r2, [pc, #392]	; (8005a30 <main+0x288>)
 80058a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80058aa:	4961      	ldr	r1, [pc, #388]	; (8005a30 <main+0x288>)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = n-1; i>0 ; i--){
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	dcf0      	bgt.n	80058a0 <main+0xf8>
    	}

	u.var32 = HAL_ADC_GetValue (&hadc1);
 80058be:	4857      	ldr	r0, [pc, #348]	; (8005a1c <main+0x274>)
 80058c0:	f7fb fb3c 	bl	8000f3c <HAL_ADC_GetValue>
 80058c4:	4602      	mov	r2, r0
 80058c6:	4b5b      	ldr	r3, [pc, #364]	; (8005a34 <main+0x28c>)
 80058c8:	601a      	str	r2, [r3, #0]
	media[0] = -3.8*u.var32 + 11570.52;
 80058ca:	4b5a      	ldr	r3, [pc, #360]	; (8005a34 <main+0x28c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fa fd88 	bl	80003e4 <__aeabi_ui2d>
 80058d4:	a34c      	add	r3, pc, #304	; (adr r3, 8005a08 <main+0x260>)
 80058d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058da:	f7fa fdf9 	bl	80004d0 <__aeabi_dmul>
 80058de:	4603      	mov	r3, r0
 80058e0:	460c      	mov	r4, r1
 80058e2:	4618      	mov	r0, r3
 80058e4:	4621      	mov	r1, r4
 80058e6:	a34a      	add	r3, pc, #296	; (adr r3, 8005a10 <main+0x268>)
 80058e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ec:	f7fa fc3e 	bl	800016c <__adddf3>
 80058f0:	4603      	mov	r3, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	4618      	mov	r0, r3
 80058f6:	4621      	mov	r1, r4
 80058f8:	f7fa fffc 	bl	80008f4 <__aeabi_d2uiz>
 80058fc:	4602      	mov	r2, r0
 80058fe:	4b4c      	ldr	r3, [pc, #304]	; (8005a30 <main+0x288>)
 8005900:	601a      	str	r2, [r3, #0]

	int acc = 0;
 8005902:	2300      	movs	r3, #0
 8005904:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<n; i++){
 8005906:	2300      	movs	r3, #0
 8005908:	607b      	str	r3, [r7, #4]
 800590a:	e009      	b.n	8005920 <main+0x178>
		acc += media[i];
 800590c:	4a48      	ldr	r2, [pc, #288]	; (8005a30 <main+0x288>)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4413      	add	r3, r2
 8005918:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<n; i++){
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3301      	adds	r3, #1
 800591e:	607b      	str	r3, [r7, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b31      	cmp	r3, #49	; 0x31
 8005924:	ddf2      	ble.n	800590c <main+0x164>
	}
	u.var32 = acc/n;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	4a43      	ldr	r2, [pc, #268]	; (8005a38 <main+0x290>)
 800592a:	fb82 1203 	smull	r1, r2, r2, r3
 800592e:	1112      	asrs	r2, r2, #4
 8005930:	17db      	asrs	r3, r3, #31
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	461a      	mov	r2, r3
 8005936:	4b3f      	ldr	r3, [pc, #252]	; (8005a34 <main+0x28c>)
 8005938:	601a      	str	r2, [r3, #0]


	myAckPayload[0] = u.var8[0];
 800593a:	4b3e      	ldr	r3, [pc, #248]	; (8005a34 <main+0x28c>)
 800593c:	781a      	ldrb	r2, [r3, #0]
 800593e:	4b3f      	ldr	r3, [pc, #252]	; (8005a3c <main+0x294>)
 8005940:	701a      	strb	r2, [r3, #0]
	myAckPayload[1] = u.var8[1];
 8005942:	4b3c      	ldr	r3, [pc, #240]	; (8005a34 <main+0x28c>)
 8005944:	785a      	ldrb	r2, [r3, #1]
 8005946:	4b3d      	ldr	r3, [pc, #244]	; (8005a3c <main+0x294>)
 8005948:	705a      	strb	r2, [r3, #1]
	myAckPayload[2] = u.var8[2];
 800594a:	4b3a      	ldr	r3, [pc, #232]	; (8005a34 <main+0x28c>)
 800594c:	789a      	ldrb	r2, [r3, #2]
 800594e:	4b3b      	ldr	r3, [pc, #236]	; (8005a3c <main+0x294>)
 8005950:	709a      	strb	r2, [r3, #2]
	myAckPayload[3] = u.var8[3];
 8005952:	4b38      	ldr	r3, [pc, #224]	; (8005a34 <main+0x28c>)
 8005954:	78da      	ldrb	r2, [r3, #3]
 8005956:	4b39      	ldr	r3, [pc, #228]	; (8005a3c <main+0x294>)
 8005958:	70da      	strb	r2, [r3, #3]
	myAckPayload[4] = 0;
 800595a:	4b38      	ldr	r3, [pc, #224]	; (8005a3c <main+0x294>)
 800595c:	2200      	movs	r2, #0
 800595e:	711a      	strb	r2, [r3, #4]
	myAckPayload[5] = 0;
 8005960:	4b36      	ldr	r3, [pc, #216]	; (8005a3c <main+0x294>)
 8005962:	2200      	movs	r2, #0
 8005964:	715a      	strb	r2, [r3, #5]
	myAckPayload[6] = 0;
 8005966:	4b35      	ldr	r3, [pc, #212]	; (8005a3c <main+0x294>)
 8005968:	2200      	movs	r2, #0
 800596a:	719a      	strb	r2, [r3, #6]
	myAckPayload[7] = 0;
 800596c:	4b33      	ldr	r3, [pc, #204]	; (8005a3c <main+0x294>)
 800596e:	2200      	movs	r2, #0
 8005970:	71da      	strb	r2, [r3, #7]


	if (NRF24_available()){
 8005972:	f7fe fff7 	bl	8004964 <NRF24_available>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00d      	beq.n	8005998 <main+0x1f0>
		NRF24_read(myRxData, 8);
 800597c:	2108      	movs	r1, #8
 800597e:	4830      	ldr	r0, [pc, #192]	; (8005a40 <main+0x298>)
 8005980:	f7fe fff8 	bl	8004974 <NRF24_read>
		NRF24_writeAckPayload(1, myAckPayload, 8);
 8005984:	2208      	movs	r2, #8
 8005986:	492d      	ldr	r1, [pc, #180]	; (8005a3c <main+0x294>)
 8005988:	2001      	movs	r0, #1
 800598a:	f7ff fa2c 	bl	8004de6 <NRF24_writeAckPayload>

		HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800598e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005992:	482c      	ldr	r0, [pc, #176]	; (8005a44 <main+0x29c>)
 8005994:	f7fc fd29 	bl	80023ea <HAL_GPIO_TogglePin>
	}

	TxHeader.StdId = 0x003; // responde com id 0x00B
 8005998:	4b2b      	ldr	r3, [pc, #172]	; (8005a48 <main+0x2a0>)
 800599a:	2203      	movs	r2, #3
 800599c:	601a      	str	r2, [r3, #0]
	TxData[0] = myRxData[0];
 800599e:	4b28      	ldr	r3, [pc, #160]	; (8005a40 <main+0x298>)
 80059a0:	781a      	ldrb	r2, [r3, #0]
 80059a2:	4b2a      	ldr	r3, [pc, #168]	; (8005a4c <main+0x2a4>)
 80059a4:	701a      	strb	r2, [r3, #0]
	TxData[1] = myRxData[1];
 80059a6:	4b26      	ldr	r3, [pc, #152]	; (8005a40 <main+0x298>)
 80059a8:	785a      	ldrb	r2, [r3, #1]
 80059aa:	4b28      	ldr	r3, [pc, #160]	; (8005a4c <main+0x2a4>)
 80059ac:	705a      	strb	r2, [r3, #1]
	TxData[2] = myRxData[2];
 80059ae:	4b24      	ldr	r3, [pc, #144]	; (8005a40 <main+0x298>)
 80059b0:	789a      	ldrb	r2, [r3, #2]
 80059b2:	4b26      	ldr	r3, [pc, #152]	; (8005a4c <main+0x2a4>)
 80059b4:	709a      	strb	r2, [r3, #2]
	TxData[3] = myRxData[3];
 80059b6:	4b22      	ldr	r3, [pc, #136]	; (8005a40 <main+0x298>)
 80059b8:	78da      	ldrb	r2, [r3, #3]
 80059ba:	4b24      	ldr	r3, [pc, #144]	; (8005a4c <main+0x2a4>)
 80059bc:	70da      	strb	r2, [r3, #3]
	TxData[4] = myRxData[4];
 80059be:	4b20      	ldr	r3, [pc, #128]	; (8005a40 <main+0x298>)
 80059c0:	791a      	ldrb	r2, [r3, #4]
 80059c2:	4b22      	ldr	r3, [pc, #136]	; (8005a4c <main+0x2a4>)
 80059c4:	711a      	strb	r2, [r3, #4]
	TxData[5] = myRxData[5];
 80059c6:	4b1e      	ldr	r3, [pc, #120]	; (8005a40 <main+0x298>)
 80059c8:	795a      	ldrb	r2, [r3, #5]
 80059ca:	4b20      	ldr	r3, [pc, #128]	; (8005a4c <main+0x2a4>)
 80059cc:	715a      	strb	r2, [r3, #5]
	TxData[6] = myRxData[6];
 80059ce:	4b1c      	ldr	r3, [pc, #112]	; (8005a40 <main+0x298>)
 80059d0:	799a      	ldrb	r2, [r3, #6]
 80059d2:	4b1e      	ldr	r3, [pc, #120]	; (8005a4c <main+0x2a4>)
 80059d4:	719a      	strb	r2, [r3, #6]
	TxData[7] = myRxData[7];
 80059d6:	4b1a      	ldr	r3, [pc, #104]	; (8005a40 <main+0x298>)
 80059d8:	79da      	ldrb	r2, [r3, #7]
 80059da:	4b1c      	ldr	r3, [pc, #112]	; (8005a4c <main+0x2a4>)
 80059dc:	71da      	strb	r2, [r3, #7]

	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80059de:	4b1c      	ldr	r3, [pc, #112]	; (8005a50 <main+0x2a8>)
 80059e0:	4a1a      	ldr	r2, [pc, #104]	; (8005a4c <main+0x2a4>)
 80059e2:	4919      	ldr	r1, [pc, #100]	; (8005a48 <main+0x2a0>)
 80059e4:	481b      	ldr	r0, [pc, #108]	; (8005a54 <main+0x2ac>)
 80059e6:	f7fb fe40 	bl	800166a <HAL_CAN_AddTxMessage>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <main+0x24c>
		Error_Handler();
 80059f0:	f000 faf4 	bl	8005fdc <Error_Handler>
	}

	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 80059f4:	2180      	movs	r1, #128	; 0x80
 80059f6:	480d      	ldr	r0, [pc, #52]	; (8005a2c <main+0x284>)
 80059f8:	f7fc fcf7 	bl	80023ea <HAL_GPIO_TogglePin>

	HAL_Delay(50);
 80059fc:	2032      	movs	r0, #50	; 0x32
 80059fe:	f7fa fffb 	bl	80009f8 <HAL_Delay>
  {
 8005a02:	e745      	b.n	8005890 <main+0xe8>
 8005a04:	f3af 8000 	nop.w
 8005a08:	66666666 	.word	0x66666666
 8005a0c:	c00e6666 	.word	0xc00e6666
 8005a10:	8f5c28f6 	.word	0x8f5c28f6
 8005a14:	40c69942 	.word	0x40c69942
 8005a18:	20000368 	.word	0x20000368
 8005a1c:	200001c4 	.word	0x200001c4
 8005a20:	20000308 	.word	0x20000308
 8005a24:	40010800 	.word	0x40010800
 8005a28:	20000008 	.word	0x20000008
 8005a2c:	40010c00 	.word	0x40010c00
 8005a30:	20000234 	.word	0x20000234
 8005a34:	200003a8 	.word	0x200003a8
 8005a38:	51eb851f 	.word	0x51eb851f
 8005a3c:	2000018c 	.word	0x2000018c
 8005a40:	200001bc 	.word	0x200001bc
 8005a44:	40011000 	.word	0x40011000
 8005a48:	20000144 	.word	0x20000144
 8005a4c:	200002fc 	.word	0x200002fc
 8005a50:	20000304 	.word	0x20000304
 8005a54:	20000194 	.word	0x20000194

08005a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b094      	sub	sp, #80	; 0x50
 8005a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a62:	2228      	movs	r2, #40	; 0x28
 8005a64:	2100      	movs	r1, #0
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fd37 	bl	80064da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a6c:	f107 0314 	add.w	r3, r7, #20
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	605a      	str	r2, [r3, #4]
 8005a76:	609a      	str	r2, [r3, #8]
 8005a78:	60da      	str	r2, [r3, #12]
 8005a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a7c:	1d3b      	adds	r3, r7, #4
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	605a      	str	r2, [r3, #4]
 8005a84:	609a      	str	r2, [r3, #8]
 8005a86:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005a92:	2300      	movs	r3, #0
 8005a94:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a96:	2301      	movs	r3, #1
 8005a98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005a9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005aa4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fc fcac 	bl	800240c <HAL_RCC_OscConfig>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8005aba:	f000 fa8f 	bl	8005fdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005abe:	230f      	movs	r3, #15
 8005ac0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ace:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005ad4:	f107 0314 	add.w	r3, r7, #20
 8005ad8:	2102      	movs	r1, #2
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fc fefa 	bl	80028d4 <HAL_RCC_ClockConfig>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <SystemClock_Config+0x92>
  {
    Error_Handler();
 8005ae6:	f000 fa79 	bl	8005fdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005aea:	2302      	movs	r3, #2
 8005aec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8005aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005af2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005af4:	1d3b      	adds	r3, r7, #4
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fd f8aa 	bl	8002c50 <HAL_RCCEx_PeriphCLKConfig>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005b02:	f000 fa6b 	bl	8005fdc <Error_Handler>
  }
}
 8005b06:	bf00      	nop
 8005b08:	3750      	adds	r7, #80	; 0x50
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005b16:	1d3b      	adds	r3, r7, #4
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8005b20:	4b18      	ldr	r3, [pc, #96]	; (8005b84 <MX_ADC1_Init+0x74>)
 8005b22:	4a19      	ldr	r2, [pc, #100]	; (8005b88 <MX_ADC1_Init+0x78>)
 8005b24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005b26:	4b17      	ldr	r3, [pc, #92]	; (8005b84 <MX_ADC1_Init+0x74>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005b2c:	4b15      	ldr	r3, [pc, #84]	; (8005b84 <MX_ADC1_Init+0x74>)
 8005b2e:	2201      	movs	r2, #1
 8005b30:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005b32:	4b14      	ldr	r3, [pc, #80]	; (8005b84 <MX_ADC1_Init+0x74>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005b38:	4b12      	ldr	r3, [pc, #72]	; (8005b84 <MX_ADC1_Init+0x74>)
 8005b3a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005b3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005b40:	4b10      	ldr	r3, [pc, #64]	; (8005b84 <MX_ADC1_Init+0x74>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8005b46:	4b0f      	ldr	r3, [pc, #60]	; (8005b84 <MX_ADC1_Init+0x74>)
 8005b48:	2201      	movs	r2, #1
 8005b4a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005b4c:	480d      	ldr	r0, [pc, #52]	; (8005b84 <MX_ADC1_Init+0x74>)
 8005b4e:	f7fa ff75 	bl	8000a3c <HAL_ADC_Init>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8005b58:	f000 fa40 	bl	8005fdc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005b60:	2301      	movs	r3, #1
 8005b62:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005b64:	2300      	movs	r3, #0
 8005b66:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b68:	1d3b      	adds	r3, r7, #4
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4805      	ldr	r0, [pc, #20]	; (8005b84 <MX_ADC1_Init+0x74>)
 8005b6e:	f7fb f9f1 	bl	8000f54 <HAL_ADC_ConfigChannel>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8005b78:	f000 fa30 	bl	8005fdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005b7c:	bf00      	nop
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	200001c4 	.word	0x200001c4
 8005b88:	40012400 	.word	0x40012400

08005b8c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08a      	sub	sp, #40	; 0x28
 8005b90:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8005b92:	4b3a      	ldr	r3, [pc, #232]	; (8005c7c <MX_CAN_Init+0xf0>)
 8005b94:	4a3a      	ldr	r2, [pc, #232]	; (8005c80 <MX_CAN_Init+0xf4>)
 8005b96:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8005b98:	4b38      	ldr	r3, [pc, #224]	; (8005c7c <MX_CAN_Init+0xf0>)
 8005b9a:	2209      	movs	r2, #9
 8005b9c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8005b9e:	4b37      	ldr	r3, [pc, #220]	; (8005c7c <MX_CAN_Init+0xf0>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005ba4:	4b35      	ldr	r3, [pc, #212]	; (8005c7c <MX_CAN_Init+0xf0>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8005baa:	4b34      	ldr	r3, [pc, #208]	; (8005c7c <MX_CAN_Init+0xf0>)
 8005bac:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8005bb0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8005bb2:	4b32      	ldr	r3, [pc, #200]	; (8005c7c <MX_CAN_Init+0xf0>)
 8005bb4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005bb8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8005bba:	4b30      	ldr	r3, [pc, #192]	; (8005c7c <MX_CAN_Init+0xf0>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8005bc0:	4b2e      	ldr	r3, [pc, #184]	; (8005c7c <MX_CAN_Init+0xf0>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8005bc6:	4b2d      	ldr	r3, [pc, #180]	; (8005c7c <MX_CAN_Init+0xf0>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8005bcc:	4b2b      	ldr	r3, [pc, #172]	; (8005c7c <MX_CAN_Init+0xf0>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8005bd2:	4b2a      	ldr	r3, [pc, #168]	; (8005c7c <MX_CAN_Init+0xf0>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8005bd8:	4b28      	ldr	r3, [pc, #160]	; (8005c7c <MX_CAN_Init+0xf0>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8005bde:	4827      	ldr	r0, [pc, #156]	; (8005c7c <MX_CAN_Init+0xf0>)
 8005be0:	f7fb fb3c 	bl	800125c <HAL_CAN_Init>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8005bea:	f000 f9f7 	bl	8005fdc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8005bee:	2102      	movs	r1, #2
 8005bf0:	4822      	ldr	r0, [pc, #136]	; (8005c7c <MX_CAN_Init+0xf0>)
 8005bf2:	f7fb ff22 	bl	8001a3a <HAL_CAN_ActivateNotification>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <MX_CAN_Init+0x74>
  {
	Error_Handler();
 8005bfc:	f000 f9ee 	bl	8005fdc <Error_Handler>
  }

  /* Configure the CAN Filter */
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 8005c00:	2300      	movs	r3, #0
 8005c02:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh     = 0x000<<5; //0x000
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow      = 0x0000;
 8005c10:	2300      	movs	r3, #0
 8005c12:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x700<<5; // mascara que filtra
 8005c14:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005c18:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow  = 0x0000;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8005c22:	2301      	movs	r3, #1
 8005c24:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8005c26:	230e      	movs	r3, #14
 8005c28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4813      	ldr	r0, [pc, #76]	; (8005c7c <MX_CAN_Init+0xf0>)
 8005c30:	f7fb fc0e 	bl	8001450 <HAL_CAN_ConfigFilter>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <MX_CAN_Init+0xb2>
  {
    /* Filter configuration Error */
    Error_Handler();
 8005c3a:	f000 f9cf 	bl	8005fdc <Error_Handler>
  }

  /* Configure Transmission process */
  TxHeader.StdId = 0x001;
 8005c3e:	4b11      	ldr	r3, [pc, #68]	; (8005c84 <MX_CAN_Init+0xf8>)
 8005c40:	2201      	movs	r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x001;
 8005c44:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <MX_CAN_Init+0xf8>)
 8005c46:	2201      	movs	r2, #1
 8005c48:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 8005c4a:	4b0e      	ldr	r3, [pc, #56]	; (8005c84 <MX_CAN_Init+0xf8>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8005c50:	4b0c      	ldr	r3, [pc, #48]	; (8005c84 <MX_CAN_Init+0xf8>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 8005c56:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <MX_CAN_Init+0xf8>)
 8005c58:	2208      	movs	r2, #8
 8005c5a:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8005c5c:	4b09      	ldr	r3, [pc, #36]	; (8005c84 <MX_CAN_Init+0xf8>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	751a      	strb	r2, [r3, #20]


  /* Start the CAN peripheral */
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8005c62:	4806      	ldr	r0, [pc, #24]	; (8005c7c <MX_CAN_Init+0xf0>)
 8005c64:	f7fb fcbd 	bl	80015e2 <HAL_CAN_Start>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <MX_CAN_Init+0xe6>
  {
    /* Start Error */
    Error_Handler();
 8005c6e:	f000 f9b5 	bl	8005fdc <Error_Handler>
  }

  /* USER CODE END CAN_Init 2 */

}
 8005c72:	bf00      	nop
 8005c74:	3728      	adds	r7, #40	; 0x28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20000194 	.word	0x20000194
 8005c80:	40006400 	.word	0x40006400
 8005c84:	20000144 	.word	0x20000144

08005c88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005c8c:	4b17      	ldr	r3, [pc, #92]	; (8005cec <MX_SPI1_Init+0x64>)
 8005c8e:	4a18      	ldr	r2, [pc, #96]	; (8005cf0 <MX_SPI1_Init+0x68>)
 8005c90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005c92:	4b16      	ldr	r3, [pc, #88]	; (8005cec <MX_SPI1_Init+0x64>)
 8005c94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005c98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005c9a:	4b14      	ldr	r3, [pc, #80]	; (8005cec <MX_SPI1_Init+0x64>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005ca0:	4b12      	ldr	r3, [pc, #72]	; (8005cec <MX_SPI1_Init+0x64>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ca6:	4b11      	ldr	r3, [pc, #68]	; (8005cec <MX_SPI1_Init+0x64>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005cac:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <MX_SPI1_Init+0x64>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005cb2:	4b0e      	ldr	r3, [pc, #56]	; (8005cec <MX_SPI1_Init+0x64>)
 8005cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005cba:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <MX_SPI1_Init+0x64>)
 8005cbc:	2228      	movs	r2, #40	; 0x28
 8005cbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005cc0:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <MX_SPI1_Init+0x64>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005cc6:	4b09      	ldr	r3, [pc, #36]	; (8005cec <MX_SPI1_Init+0x64>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ccc:	4b07      	ldr	r3, [pc, #28]	; (8005cec <MX_SPI1_Init+0x64>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005cd2:	4b06      	ldr	r3, [pc, #24]	; (8005cec <MX_SPI1_Init+0x64>)
 8005cd4:	220a      	movs	r2, #10
 8005cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005cd8:	4804      	ldr	r0, [pc, #16]	; (8005cec <MX_SPI1_Init+0x64>)
 8005cda:	f7fd fd9e 	bl	800381a <HAL_SPI_Init>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005ce4:	f000 f97a 	bl	8005fdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005ce8:	bf00      	nop
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	20000308 	.word	0x20000308
 8005cf0:	40013000 	.word	0x40013000

08005cf4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005cfa:	f107 0308 	add.w	r3, r7, #8
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	605a      	str	r2, [r3, #4]
 8005d04:	609a      	str	r2, [r3, #8]
 8005d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d08:	463b      	mov	r3, r7
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005d10:	4b1e      	ldr	r3, [pc, #120]	; (8005d8c <MX_TIM2_Init+0x98>)
 8005d12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8005d18:	4b1c      	ldr	r3, [pc, #112]	; (8005d8c <MX_TIM2_Init+0x98>)
 8005d1a:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8005d1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d20:	4b1a      	ldr	r3, [pc, #104]	; (8005d8c <MX_TIM2_Init+0x98>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8005d26:	4b19      	ldr	r3, [pc, #100]	; (8005d8c <MX_TIM2_Init+0x98>)
 8005d28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005d2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d2e:	4b17      	ldr	r3, [pc, #92]	; (8005d8c <MX_TIM2_Init+0x98>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d34:	4b15      	ldr	r3, [pc, #84]	; (8005d8c <MX_TIM2_Init+0x98>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005d3a:	4814      	ldr	r0, [pc, #80]	; (8005d8c <MX_TIM2_Init+0x98>)
 8005d3c:	f7fd fdd1 	bl	80038e2 <HAL_TIM_Base_Init>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005d46:	f000 f949 	bl	8005fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005d50:	f107 0308 	add.w	r3, r7, #8
 8005d54:	4619      	mov	r1, r3
 8005d56:	480d      	ldr	r0, [pc, #52]	; (8005d8c <MX_TIM2_Init+0x98>)
 8005d58:	f7fd ff10 	bl	8003b7c <HAL_TIM_ConfigClockSource>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005d62:	f000 f93b 	bl	8005fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d66:	2300      	movs	r3, #0
 8005d68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005d6e:	463b      	mov	r3, r7
 8005d70:	4619      	mov	r1, r3
 8005d72:	4806      	ldr	r0, [pc, #24]	; (8005d8c <MX_TIM2_Init+0x98>)
 8005d74:	f7fe f90d 	bl	8003f92 <HAL_TIMEx_MasterConfigSynchronization>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005d7e:	f000 f92d 	bl	8005fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005d82:	bf00      	nop
 8005d84:	3718      	adds	r7, #24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20000368 	.word	0x20000368

08005d90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005d94:	4b11      	ldr	r3, [pc, #68]	; (8005ddc <MX_USART1_UART_Init+0x4c>)
 8005d96:	4a12      	ldr	r2, [pc, #72]	; (8005de0 <MX_USART1_UART_Init+0x50>)
 8005d98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005d9a:	4b10      	ldr	r3, [pc, #64]	; (8005ddc <MX_USART1_UART_Init+0x4c>)
 8005d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005da0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005da2:	4b0e      	ldr	r3, [pc, #56]	; (8005ddc <MX_USART1_UART_Init+0x4c>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005da8:	4b0c      	ldr	r3, [pc, #48]	; (8005ddc <MX_USART1_UART_Init+0x4c>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005dae:	4b0b      	ldr	r3, [pc, #44]	; (8005ddc <MX_USART1_UART_Init+0x4c>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005db4:	4b09      	ldr	r3, [pc, #36]	; (8005ddc <MX_USART1_UART_Init+0x4c>)
 8005db6:	220c      	movs	r2, #12
 8005db8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005dba:	4b08      	ldr	r3, [pc, #32]	; (8005ddc <MX_USART1_UART_Init+0x4c>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005dc0:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <MX_USART1_UART_Init+0x4c>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005dc6:	4805      	ldr	r0, [pc, #20]	; (8005ddc <MX_USART1_UART_Init+0x4c>)
 8005dc8:	f7fe f939 	bl	800403e <HAL_UART_Init>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005dd2:	f000 f903 	bl	8005fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005dd6:	bf00      	nop
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	200001f4 	.word	0x200001f4
 8005de0:	40013800 	.word	0x40013800

08005de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dea:	f107 0310 	add.w	r3, r7, #16
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	605a      	str	r2, [r3, #4]
 8005df4:	609a      	str	r2, [r3, #8]
 8005df6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005df8:	4a47      	ldr	r2, [pc, #284]	; (8005f18 <MX_GPIO_Init+0x134>)
 8005dfa:	4b47      	ldr	r3, [pc, #284]	; (8005f18 <MX_GPIO_Init+0x134>)
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	f043 0310 	orr.w	r3, r3, #16
 8005e02:	6193      	str	r3, [r2, #24]
 8005e04:	4b44      	ldr	r3, [pc, #272]	; (8005f18 <MX_GPIO_Init+0x134>)
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	f003 0310 	and.w	r3, r3, #16
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e10:	4a41      	ldr	r2, [pc, #260]	; (8005f18 <MX_GPIO_Init+0x134>)
 8005e12:	4b41      	ldr	r3, [pc, #260]	; (8005f18 <MX_GPIO_Init+0x134>)
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	f043 0320 	orr.w	r3, r3, #32
 8005e1a:	6193      	str	r3, [r2, #24]
 8005e1c:	4b3e      	ldr	r3, [pc, #248]	; (8005f18 <MX_GPIO_Init+0x134>)
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	60bb      	str	r3, [r7, #8]
 8005e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e28:	4a3b      	ldr	r2, [pc, #236]	; (8005f18 <MX_GPIO_Init+0x134>)
 8005e2a:	4b3b      	ldr	r3, [pc, #236]	; (8005f18 <MX_GPIO_Init+0x134>)
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	f043 0304 	orr.w	r3, r3, #4
 8005e32:	6193      	str	r3, [r2, #24]
 8005e34:	4b38      	ldr	r3, [pc, #224]	; (8005f18 <MX_GPIO_Init+0x134>)
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	607b      	str	r3, [r7, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e40:	4a35      	ldr	r2, [pc, #212]	; (8005f18 <MX_GPIO_Init+0x134>)
 8005e42:	4b35      	ldr	r3, [pc, #212]	; (8005f18 <MX_GPIO_Init+0x134>)
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	f043 0308 	orr.w	r3, r3, #8
 8005e4a:	6193      	str	r3, [r2, #24]
 8005e4c:	4b32      	ldr	r3, [pc, #200]	; (8005f18 <MX_GPIO_Init+0x134>)
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	603b      	str	r3, [r7, #0]
 8005e56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e5e:	482f      	ldr	r0, [pc, #188]	; (8005f1c <MX_GPIO_Init+0x138>)
 8005e60:	f7fc faab 	bl	80023ba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8005e64:	2200      	movs	r2, #0
 8005e66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005e6a:	482d      	ldr	r0, [pc, #180]	; (8005f20 <MX_GPIO_Init+0x13c>)
 8005e6c:	f7fc faa5 	bl	80023ba <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8005e70:	2200      	movs	r2, #0
 8005e72:	2118      	movs	r1, #24
 8005e74:	482b      	ldr	r0, [pc, #172]	; (8005f24 <MX_GPIO_Init+0x140>)
 8005e76:	f7fc faa0 	bl	80023ba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	2102      	movs	r1, #2
 8005e7e:	4829      	ldr	r0, [pc, #164]	; (8005f24 <MX_GPIO_Init+0x140>)
 8005e80:	f7fc fa9b 	bl	80023ba <HAL_GPIO_WritePin>


  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e92:	2302      	movs	r3, #2
 8005e94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e96:	f107 0310 	add.w	r3, r7, #16
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	481f      	ldr	r0, [pc, #124]	; (8005f1c <MX_GPIO_Init+0x138>)
 8005e9e:	f7fc f917 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8005ea2:	231a      	movs	r3, #26
 8005ea4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eae:	2302      	movs	r3, #2
 8005eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eb2:	f107 0310 	add.w	r3, r7, #16
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	481a      	ldr	r0, [pc, #104]	; (8005f24 <MX_GPIO_Init+0x140>)
 8005eba:	f7fc f909 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005ebe:	2304      	movs	r3, #4
 8005ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eca:	f107 0310 	add.w	r3, r7, #16
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4814      	ldr	r0, [pc, #80]	; (8005f24 <MX_GPIO_Init+0x140>)
 8005ed2:	f7fc f8fd 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005ed6:	2380      	movs	r3, #128	; 0x80
 8005ed8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005eda:	2301      	movs	r3, #1
 8005edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ee6:	f107 0310 	add.w	r3, r7, #16
 8005eea:	4619      	mov	r1, r3
 8005eec:	480c      	ldr	r0, [pc, #48]	; (8005f20 <MX_GPIO_Init+0x13c>)
 8005eee:	f7fc f8ef 	bl	80020d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005ef2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ef6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f00:	2302      	movs	r3, #2
 8005f02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f04:	f107 0310 	add.w	r3, r7, #16
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4805      	ldr	r0, [pc, #20]	; (8005f20 <MX_GPIO_Init+0x13c>)
 8005f0c:	f7fc f8e0 	bl	80020d0 <HAL_GPIO_Init>

}
 8005f10:	bf00      	nop
 8005f12:	3720      	adds	r7, #32
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	40011000 	.word	0x40011000
 8005f20:	40010c00 	.word	0x40010c00
 8005f24:	40010800 	.word	0x40010800

08005f28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM2){
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f38:	d12c      	bne.n	8005f94 <HAL_TIM_PeriodElapsedCallback+0x6c>


        if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_2)){
 8005f3a:	2104      	movs	r1, #4
 8005f3c:	4817      	ldr	r0, [pc, #92]	; (8005f9c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8005f3e:	f7fc fa25 	bl	800238c <HAL_GPIO_ReadPin>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01c      	beq.n	8005f82 <HAL_TIM_PeriodElapsedCallback+0x5a>
          cont++;
 8005f48:	4b15      	ldr	r3, [pc, #84]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	4a14      	ldr	r2, [pc, #80]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005f50:	6013      	str	r3, [r2, #0]
    	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8005f52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f56:	4813      	ldr	r0, [pc, #76]	; (8005fa4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8005f58:	f7fc fa47 	bl	80023ea <HAL_GPIO_TogglePin>



	    	if(cont>= 4){
 8005f5c:	4b10      	ldr	r3, [pc, #64]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	dd17      	ble.n	8005f94 <HAL_TIM_PeriodElapsedCallback+0x6c>
	    	  cont=0;
 8005f64:	4b0e      	ldr	r3, [pc, #56]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]
		      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005f70:	480d      	ldr	r0, [pc, #52]	; (8005fa8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8005f72:	f7fc fa22 	bl	80023ba <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8005f76:	2201      	movs	r2, #1
 8005f78:	2102      	movs	r1, #2
 8005f7a:	4808      	ldr	r0, [pc, #32]	; (8005f9c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8005f7c:	f7fc fa1d 	bl	80023ba <HAL_GPIO_WritePin>
    	else {
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
    	  cont=0;
    	}
    }
}
 8005f80:	e008      	b.n	8005f94 <HAL_TIM_PeriodElapsedCallback+0x6c>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8005f82:	2200      	movs	r2, #0
 8005f84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005f88:	4807      	ldr	r0, [pc, #28]	; (8005fa8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8005f8a:	f7fc fa16 	bl	80023ba <HAL_GPIO_WritePin>
    	  cont=0;
 8005f8e:	4b04      	ldr	r3, [pc, #16]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]
}
 8005f94:	bf00      	nop
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	40010800 	.word	0x40010800
 8005fa0:	20000178 	.word	0x20000178
 8005fa4:	40011000 	.word	0x40011000
 8005fa8:	40010c00 	.word	0x40010c00

08005fac <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8005fb4:	4b07      	ldr	r3, [pc, #28]	; (8005fd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8005fb6:	4a08      	ldr	r2, [pc, #32]	; (8005fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8005fb8:	2100      	movs	r1, #0
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7fb fc2b 	bl	8001816 <HAL_CAN_GetRxMessage>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {

    Error_Handler();
 8005fc6:	f000 f809 	bl	8005fdc <Error_Handler>
  }
}
 8005fca:	bf00      	nop
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000360 	.word	0x20000360
 8005fd8:	2000015c 	.word	0x2000015c

08005fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005fe0:	bf00      	nop
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005fee:	4a0e      	ldr	r2, [pc, #56]	; (8006028 <HAL_MspInit+0x40>)
 8005ff0:	4b0d      	ldr	r3, [pc, #52]	; (8006028 <HAL_MspInit+0x40>)
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	f043 0301 	orr.w	r3, r3, #1
 8005ff8:	6193      	str	r3, [r2, #24]
 8005ffa:	4b0b      	ldr	r3, [pc, #44]	; (8006028 <HAL_MspInit+0x40>)
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	607b      	str	r3, [r7, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006006:	4a08      	ldr	r2, [pc, #32]	; (8006028 <HAL_MspInit+0x40>)
 8006008:	4b07      	ldr	r3, [pc, #28]	; (8006028 <HAL_MspInit+0x40>)
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006010:	61d3      	str	r3, [r2, #28]
 8006012:	4b05      	ldr	r3, [pc, #20]	; (8006028 <HAL_MspInit+0x40>)
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800601a:	603b      	str	r3, [r7, #0]
 800601c:	683b      	ldr	r3, [r7, #0]
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800601e:	bf00      	nop
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	bc80      	pop	{r7}
 8006026:	4770      	bx	lr
 8006028:	40021000 	.word	0x40021000

0800602c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006034:	f107 0310 	add.w	r3, r7, #16
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	605a      	str	r2, [r3, #4]
 800603e:	609a      	str	r2, [r3, #8]
 8006040:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a14      	ldr	r2, [pc, #80]	; (8006098 <HAL_ADC_MspInit+0x6c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d121      	bne.n	8006090 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800604c:	4a13      	ldr	r2, [pc, #76]	; (800609c <HAL_ADC_MspInit+0x70>)
 800604e:	4b13      	ldr	r3, [pc, #76]	; (800609c <HAL_ADC_MspInit+0x70>)
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006056:	6193      	str	r3, [r2, #24]
 8006058:	4b10      	ldr	r3, [pc, #64]	; (800609c <HAL_ADC_MspInit+0x70>)
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006064:	4a0d      	ldr	r2, [pc, #52]	; (800609c <HAL_ADC_MspInit+0x70>)
 8006066:	4b0d      	ldr	r3, [pc, #52]	; (800609c <HAL_ADC_MspInit+0x70>)
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	f043 0304 	orr.w	r3, r3, #4
 800606e:	6193      	str	r3, [r2, #24]
 8006070:	4b0a      	ldr	r3, [pc, #40]	; (800609c <HAL_ADC_MspInit+0x70>)
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	60bb      	str	r3, [r7, #8]
 800607a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800607c:	2301      	movs	r3, #1
 800607e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006080:	2303      	movs	r3, #3
 8006082:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006084:	f107 0310 	add.w	r3, r7, #16
 8006088:	4619      	mov	r1, r3
 800608a:	4805      	ldr	r0, [pc, #20]	; (80060a0 <HAL_ADC_MspInit+0x74>)
 800608c:	f7fc f820 	bl	80020d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006090:	bf00      	nop
 8006092:	3720      	adds	r7, #32
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	40012400 	.word	0x40012400
 800609c:	40021000 	.word	0x40021000
 80060a0:	40010800 	.word	0x40010800

080060a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08a      	sub	sp, #40	; 0x28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060ac:	f107 0314 	add.w	r3, r7, #20
 80060b0:	2200      	movs	r2, #0
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	605a      	str	r2, [r3, #4]
 80060b6:	609a      	str	r2, [r3, #8]
 80060b8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a29      	ldr	r2, [pc, #164]	; (8006164 <HAL_CAN_MspInit+0xc0>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d14b      	bne.n	800615c <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80060c4:	4a28      	ldr	r2, [pc, #160]	; (8006168 <HAL_CAN_MspInit+0xc4>)
 80060c6:	4b28      	ldr	r3, [pc, #160]	; (8006168 <HAL_CAN_MspInit+0xc4>)
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060ce:	61d3      	str	r3, [r2, #28]
 80060d0:	4b25      	ldr	r3, [pc, #148]	; (8006168 <HAL_CAN_MspInit+0xc4>)
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d8:	613b      	str	r3, [r7, #16]
 80060da:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060dc:	4a22      	ldr	r2, [pc, #136]	; (8006168 <HAL_CAN_MspInit+0xc4>)
 80060de:	4b22      	ldr	r3, [pc, #136]	; (8006168 <HAL_CAN_MspInit+0xc4>)
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	f043 0308 	orr.w	r3, r3, #8
 80060e6:	6193      	str	r3, [r2, #24]
 80060e8:	4b1f      	ldr	r3, [pc, #124]	; (8006168 <HAL_CAN_MspInit+0xc4>)
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	f003 0308 	and.w	r3, r3, #8
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80060f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060fa:	2300      	movs	r3, #0
 80060fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060fe:	2300      	movs	r3, #0
 8006100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006102:	f107 0314 	add.w	r3, r7, #20
 8006106:	4619      	mov	r1, r3
 8006108:	4818      	ldr	r0, [pc, #96]	; (800616c <HAL_CAN_MspInit+0xc8>)
 800610a:	f7fb ffe1 	bl	80020d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800610e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006114:	2302      	movs	r3, #2
 8006116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006118:	2303      	movs	r3, #3
 800611a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800611c:	f107 0314 	add.w	r3, r7, #20
 8006120:	4619      	mov	r1, r3
 8006122:	4812      	ldr	r0, [pc, #72]	; (800616c <HAL_CAN_MspInit+0xc8>)
 8006124:	f7fb ffd4 	bl	80020d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8006128:	4b11      	ldr	r3, [pc, #68]	; (8006170 <HAL_CAN_MspInit+0xcc>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
 8006146:	4a0a      	ldr	r2, [pc, #40]	; (8006170 <HAL_CAN_MspInit+0xcc>)
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800614c:	2200      	movs	r2, #0
 800614e:	2100      	movs	r1, #0
 8006150:	2014      	movs	r0, #20
 8006152:	f7fb ff86 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006156:	2014      	movs	r0, #20
 8006158:	f7fb ff9f 	bl	800209a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800615c:	bf00      	nop
 800615e:	3728      	adds	r7, #40	; 0x28
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	40006400 	.word	0x40006400
 8006168:	40021000 	.word	0x40021000
 800616c:	40010c00 	.word	0x40010c00
 8006170:	40010000 	.word	0x40010000

08006174 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b088      	sub	sp, #32
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800617c:	f107 0310 	add.w	r3, r7, #16
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	605a      	str	r2, [r3, #4]
 8006186:	609a      	str	r2, [r3, #8]
 8006188:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1b      	ldr	r2, [pc, #108]	; (80061fc <HAL_SPI_MspInit+0x88>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d12f      	bne.n	80061f4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006194:	4a1a      	ldr	r2, [pc, #104]	; (8006200 <HAL_SPI_MspInit+0x8c>)
 8006196:	4b1a      	ldr	r3, [pc, #104]	; (8006200 <HAL_SPI_MspInit+0x8c>)
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800619e:	6193      	str	r3, [r2, #24]
 80061a0:	4b17      	ldr	r3, [pc, #92]	; (8006200 <HAL_SPI_MspInit+0x8c>)
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061a8:	60fb      	str	r3, [r7, #12]
 80061aa:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ac:	4a14      	ldr	r2, [pc, #80]	; (8006200 <HAL_SPI_MspInit+0x8c>)
 80061ae:	4b14      	ldr	r3, [pc, #80]	; (8006200 <HAL_SPI_MspInit+0x8c>)
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	f043 0304 	orr.w	r3, r3, #4
 80061b6:	6193      	str	r3, [r2, #24]
 80061b8:	4b11      	ldr	r3, [pc, #68]	; (8006200 <HAL_SPI_MspInit+0x8c>)
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	60bb      	str	r3, [r7, #8]
 80061c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80061c4:	23a0      	movs	r3, #160	; 0xa0
 80061c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061c8:	2302      	movs	r3, #2
 80061ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80061cc:	2303      	movs	r3, #3
 80061ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061d0:	f107 0310 	add.w	r3, r7, #16
 80061d4:	4619      	mov	r1, r3
 80061d6:	480b      	ldr	r0, [pc, #44]	; (8006204 <HAL_SPI_MspInit+0x90>)
 80061d8:	f7fb ff7a 	bl	80020d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80061dc:	2340      	movs	r3, #64	; 0x40
 80061de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061e0:	2300      	movs	r3, #0
 80061e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e4:	2300      	movs	r3, #0
 80061e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061e8:	f107 0310 	add.w	r3, r7, #16
 80061ec:	4619      	mov	r1, r3
 80061ee:	4805      	ldr	r0, [pc, #20]	; (8006204 <HAL_SPI_MspInit+0x90>)
 80061f0:	f7fb ff6e 	bl	80020d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80061f4:	bf00      	nop
 80061f6:	3720      	adds	r7, #32
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	40013000 	.word	0x40013000
 8006200:	40021000 	.word	0x40021000
 8006204:	40010800 	.word	0x40010800

08006208 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006218:	d113      	bne.n	8006242 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800621a:	4a0c      	ldr	r2, [pc, #48]	; (800624c <HAL_TIM_Base_MspInit+0x44>)
 800621c:	4b0b      	ldr	r3, [pc, #44]	; (800624c <HAL_TIM_Base_MspInit+0x44>)
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	f043 0301 	orr.w	r3, r3, #1
 8006224:	61d3      	str	r3, [r2, #28]
 8006226:	4b09      	ldr	r3, [pc, #36]	; (800624c <HAL_TIM_Base_MspInit+0x44>)
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006232:	2200      	movs	r2, #0
 8006234:	2100      	movs	r1, #0
 8006236:	201c      	movs	r0, #28
 8006238:	f7fb ff13 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800623c:	201c      	movs	r0, #28
 800623e:	f7fb ff2c 	bl	800209a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006242:	bf00      	nop
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	40021000 	.word	0x40021000

08006250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b088      	sub	sp, #32
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006258:	f107 0310 	add.w	r3, r7, #16
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	605a      	str	r2, [r3, #4]
 8006262:	609a      	str	r2, [r3, #8]
 8006264:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a1c      	ldr	r2, [pc, #112]	; (80062dc <HAL_UART_MspInit+0x8c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d131      	bne.n	80062d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006270:	4a1b      	ldr	r2, [pc, #108]	; (80062e0 <HAL_UART_MspInit+0x90>)
 8006272:	4b1b      	ldr	r3, [pc, #108]	; (80062e0 <HAL_UART_MspInit+0x90>)
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800627a:	6193      	str	r3, [r2, #24]
 800627c:	4b18      	ldr	r3, [pc, #96]	; (80062e0 <HAL_UART_MspInit+0x90>)
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006288:	4a15      	ldr	r2, [pc, #84]	; (80062e0 <HAL_UART_MspInit+0x90>)
 800628a:	4b15      	ldr	r3, [pc, #84]	; (80062e0 <HAL_UART_MspInit+0x90>)
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	f043 0304 	orr.w	r3, r3, #4
 8006292:	6193      	str	r3, [r2, #24]
 8006294:	4b12      	ldr	r3, [pc, #72]	; (80062e0 <HAL_UART_MspInit+0x90>)
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	f003 0304 	and.w	r3, r3, #4
 800629c:	60bb      	str	r3, [r7, #8]
 800629e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80062a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062a6:	2302      	movs	r3, #2
 80062a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80062aa:	2303      	movs	r3, #3
 80062ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062ae:	f107 0310 	add.w	r3, r7, #16
 80062b2:	4619      	mov	r1, r3
 80062b4:	480b      	ldr	r0, [pc, #44]	; (80062e4 <HAL_UART_MspInit+0x94>)
 80062b6:	f7fb ff0b 	bl	80020d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80062ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062c0:	2300      	movs	r3, #0
 80062c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062c4:	2300      	movs	r3, #0
 80062c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062c8:	f107 0310 	add.w	r3, r7, #16
 80062cc:	4619      	mov	r1, r3
 80062ce:	4805      	ldr	r0, [pc, #20]	; (80062e4 <HAL_UART_MspInit+0x94>)
 80062d0:	f7fb fefe 	bl	80020d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80062d4:	bf00      	nop
 80062d6:	3720      	adds	r7, #32
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	40013800 	.word	0x40013800
 80062e0:	40021000 	.word	0x40021000
 80062e4:	40010800 	.word	0x40010800

080062e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80062ec:	bf00      	nop
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bc80      	pop	{r7}
 80062f2:	4770      	bx	lr

080062f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80062f8:	e7fe      	b.n	80062f8 <HardFault_Handler+0x4>

080062fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80062fa:	b480      	push	{r7}
 80062fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80062fe:	e7fe      	b.n	80062fe <MemManage_Handler+0x4>

08006300 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006304:	e7fe      	b.n	8006304 <BusFault_Handler+0x4>

08006306 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006306:	b480      	push	{r7}
 8006308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800630a:	e7fe      	b.n	800630a <UsageFault_Handler+0x4>

0800630c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006310:	bf00      	nop
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr

08006318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006318:	b480      	push	{r7}
 800631a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800631c:	bf00      	nop
 800631e:	46bd      	mov	sp, r7
 8006320:	bc80      	pop	{r7}
 8006322:	4770      	bx	lr

08006324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006324:	b480      	push	{r7}
 8006326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006328:	bf00      	nop
 800632a:	46bd      	mov	sp, r7
 800632c:	bc80      	pop	{r7}
 800632e:	4770      	bx	lr

08006330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006334:	f7fa fb44 	bl	80009c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006338:	bf00      	nop
 800633a:	bd80      	pop	{r7, pc}

0800633c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8006340:	4802      	ldr	r0, [pc, #8]	; (800634c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8006342:	f7fb fb9f 	bl	8001a84 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8006346:	bf00      	nop
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20000194 	.word	0x20000194

08006350 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006354:	4802      	ldr	r0, [pc, #8]	; (8006360 <TIM2_IRQHandler+0x10>)
 8006356:	f7fd fb09 	bl	800396c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800635a:	bf00      	nop
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	20000368 	.word	0x20000368

08006364 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800636c:	4b11      	ldr	r3, [pc, #68]	; (80063b4 <_sbrk+0x50>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d102      	bne.n	800637a <_sbrk+0x16>
		heap_end = &end;
 8006374:	4b0f      	ldr	r3, [pc, #60]	; (80063b4 <_sbrk+0x50>)
 8006376:	4a10      	ldr	r2, [pc, #64]	; (80063b8 <_sbrk+0x54>)
 8006378:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800637a:	4b0e      	ldr	r3, [pc, #56]	; (80063b4 <_sbrk+0x50>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006380:	4b0c      	ldr	r3, [pc, #48]	; (80063b4 <_sbrk+0x50>)
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4413      	add	r3, r2
 8006388:	466a      	mov	r2, sp
 800638a:	4293      	cmp	r3, r2
 800638c:	d907      	bls.n	800639e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800638e:	f000 f86f 	bl	8006470 <__errno>
 8006392:	4602      	mov	r2, r0
 8006394:	230c      	movs	r3, #12
 8006396:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800639c:	e006      	b.n	80063ac <_sbrk+0x48>
	}

	heap_end += incr;
 800639e:	4b05      	ldr	r3, [pc, #20]	; (80063b4 <_sbrk+0x50>)
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4413      	add	r3, r2
 80063a6:	4a03      	ldr	r2, [pc, #12]	; (80063b4 <_sbrk+0x50>)
 80063a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80063aa:	68fb      	ldr	r3, [r7, #12]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	2000017c 	.word	0x2000017c
 80063b8:	200003b0 	.word	0x200003b0

080063bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80063c0:	4a15      	ldr	r2, [pc, #84]	; (8006418 <SystemInit+0x5c>)
 80063c2:	4b15      	ldr	r3, [pc, #84]	; (8006418 <SystemInit+0x5c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f043 0301 	orr.w	r3, r3, #1
 80063ca:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80063cc:	4912      	ldr	r1, [pc, #72]	; (8006418 <SystemInit+0x5c>)
 80063ce:	4b12      	ldr	r3, [pc, #72]	; (8006418 <SystemInit+0x5c>)
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	4b12      	ldr	r3, [pc, #72]	; (800641c <SystemInit+0x60>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80063d8:	4a0f      	ldr	r2, [pc, #60]	; (8006418 <SystemInit+0x5c>)
 80063da:	4b0f      	ldr	r3, [pc, #60]	; (8006418 <SystemInit+0x5c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80063e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063e6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80063e8:	4a0b      	ldr	r2, [pc, #44]	; (8006418 <SystemInit+0x5c>)
 80063ea:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <SystemInit+0x5c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063f2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80063f4:	4a08      	ldr	r2, [pc, #32]	; (8006418 <SystemInit+0x5c>)
 80063f6:	4b08      	ldr	r3, [pc, #32]	; (8006418 <SystemInit+0x5c>)
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80063fe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006400:	4b05      	ldr	r3, [pc, #20]	; (8006418 <SystemInit+0x5c>)
 8006402:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006406:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006408:	4b05      	ldr	r3, [pc, #20]	; (8006420 <SystemInit+0x64>)
 800640a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800640e:	609a      	str	r2, [r3, #8]
#endif 
}
 8006410:	bf00      	nop
 8006412:	46bd      	mov	sp, r7
 8006414:	bc80      	pop	{r7}
 8006416:	4770      	bx	lr
 8006418:	40021000 	.word	0x40021000
 800641c:	f8ff0000 	.word	0xf8ff0000
 8006420:	e000ed00 	.word	0xe000ed00

08006424 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006424:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006426:	e003      	b.n	8006430 <LoopCopyDataInit>

08006428 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006428:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800642a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800642c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800642e:	3104      	adds	r1, #4

08006430 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006430:	480a      	ldr	r0, [pc, #40]	; (800645c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006432:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006434:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006436:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006438:	d3f6      	bcc.n	8006428 <CopyDataInit>
  ldr r2, =_sbss
 800643a:	4a0a      	ldr	r2, [pc, #40]	; (8006464 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800643c:	e002      	b.n	8006444 <LoopFillZerobss>

0800643e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800643e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006440:	f842 3b04 	str.w	r3, [r2], #4

08006444 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006444:	4b08      	ldr	r3, [pc, #32]	; (8006468 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006446:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006448:	d3f9      	bcc.n	800643e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800644a:	f7ff ffb7 	bl	80063bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800644e:	f000 f815 	bl	800647c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006452:	f7ff f9a9 	bl	80057a8 <main>
  bx lr
 8006456:	4770      	bx	lr
  ldr r3, =_sidata
 8006458:	08007314 	.word	0x08007314
  ldr r0, =_sdata
 800645c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006460:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8006464:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8006468:	200003b0 	.word	0x200003b0

0800646c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800646c:	e7fe      	b.n	800646c <ADC1_2_IRQHandler>
	...

08006470 <__errno>:
 8006470:	4b01      	ldr	r3, [pc, #4]	; (8006478 <__errno+0x8>)
 8006472:	6818      	ldr	r0, [r3, #0]
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	20000014 	.word	0x20000014

0800647c <__libc_init_array>:
 800647c:	b570      	push	{r4, r5, r6, lr}
 800647e:	2500      	movs	r5, #0
 8006480:	4e0c      	ldr	r6, [pc, #48]	; (80064b4 <__libc_init_array+0x38>)
 8006482:	4c0d      	ldr	r4, [pc, #52]	; (80064b8 <__libc_init_array+0x3c>)
 8006484:	1ba4      	subs	r4, r4, r6
 8006486:	10a4      	asrs	r4, r4, #2
 8006488:	42a5      	cmp	r5, r4
 800648a:	d109      	bne.n	80064a0 <__libc_init_array+0x24>
 800648c:	f000 fc4e 	bl	8006d2c <_init>
 8006490:	2500      	movs	r5, #0
 8006492:	4e0a      	ldr	r6, [pc, #40]	; (80064bc <__libc_init_array+0x40>)
 8006494:	4c0a      	ldr	r4, [pc, #40]	; (80064c0 <__libc_init_array+0x44>)
 8006496:	1ba4      	subs	r4, r4, r6
 8006498:	10a4      	asrs	r4, r4, #2
 800649a:	42a5      	cmp	r5, r4
 800649c:	d105      	bne.n	80064aa <__libc_init_array+0x2e>
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064a4:	4798      	blx	r3
 80064a6:	3501      	adds	r5, #1
 80064a8:	e7ee      	b.n	8006488 <__libc_init_array+0xc>
 80064aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064ae:	4798      	blx	r3
 80064b0:	3501      	adds	r5, #1
 80064b2:	e7f2      	b.n	800649a <__libc_init_array+0x1e>
 80064b4:	0800730c 	.word	0x0800730c
 80064b8:	0800730c 	.word	0x0800730c
 80064bc:	0800730c 	.word	0x0800730c
 80064c0:	08007310 	.word	0x08007310

080064c4 <memcpy>:
 80064c4:	b510      	push	{r4, lr}
 80064c6:	1e43      	subs	r3, r0, #1
 80064c8:	440a      	add	r2, r1
 80064ca:	4291      	cmp	r1, r2
 80064cc:	d100      	bne.n	80064d0 <memcpy+0xc>
 80064ce:	bd10      	pop	{r4, pc}
 80064d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064d8:	e7f7      	b.n	80064ca <memcpy+0x6>

080064da <memset>:
 80064da:	4603      	mov	r3, r0
 80064dc:	4402      	add	r2, r0
 80064de:	4293      	cmp	r3, r2
 80064e0:	d100      	bne.n	80064e4 <memset+0xa>
 80064e2:	4770      	bx	lr
 80064e4:	f803 1b01 	strb.w	r1, [r3], #1
 80064e8:	e7f9      	b.n	80064de <memset+0x4>
	...

080064ec <siprintf>:
 80064ec:	b40e      	push	{r1, r2, r3}
 80064ee:	f44f 7102 	mov.w	r1, #520	; 0x208
 80064f2:	b500      	push	{lr}
 80064f4:	b09c      	sub	sp, #112	; 0x70
 80064f6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80064fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064fe:	9104      	str	r1, [sp, #16]
 8006500:	9107      	str	r1, [sp, #28]
 8006502:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006506:	ab1d      	add	r3, sp, #116	; 0x74
 8006508:	9002      	str	r0, [sp, #8]
 800650a:	9006      	str	r0, [sp, #24]
 800650c:	4808      	ldr	r0, [pc, #32]	; (8006530 <siprintf+0x44>)
 800650e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006512:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006516:	6800      	ldr	r0, [r0, #0]
 8006518:	a902      	add	r1, sp, #8
 800651a:	9301      	str	r3, [sp, #4]
 800651c:	f000 f866 	bl	80065ec <_svfiprintf_r>
 8006520:	2200      	movs	r2, #0
 8006522:	9b02      	ldr	r3, [sp, #8]
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	b01c      	add	sp, #112	; 0x70
 8006528:	f85d eb04 	ldr.w	lr, [sp], #4
 800652c:	b003      	add	sp, #12
 800652e:	4770      	bx	lr
 8006530:	20000014 	.word	0x20000014

08006534 <__ssputs_r>:
 8006534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006538:	688e      	ldr	r6, [r1, #8]
 800653a:	4682      	mov	sl, r0
 800653c:	429e      	cmp	r6, r3
 800653e:	460c      	mov	r4, r1
 8006540:	4691      	mov	r9, r2
 8006542:	4698      	mov	r8, r3
 8006544:	d835      	bhi.n	80065b2 <__ssputs_r+0x7e>
 8006546:	898a      	ldrh	r2, [r1, #12]
 8006548:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800654c:	d031      	beq.n	80065b2 <__ssputs_r+0x7e>
 800654e:	2302      	movs	r3, #2
 8006550:	6825      	ldr	r5, [r4, #0]
 8006552:	6909      	ldr	r1, [r1, #16]
 8006554:	1a6f      	subs	r7, r5, r1
 8006556:	6965      	ldr	r5, [r4, #20]
 8006558:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800655c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006560:	f108 0301 	add.w	r3, r8, #1
 8006564:	443b      	add	r3, r7
 8006566:	429d      	cmp	r5, r3
 8006568:	bf38      	it	cc
 800656a:	461d      	movcc	r5, r3
 800656c:	0553      	lsls	r3, r2, #21
 800656e:	d531      	bpl.n	80065d4 <__ssputs_r+0xa0>
 8006570:	4629      	mov	r1, r5
 8006572:	f000 fb3b 	bl	8006bec <_malloc_r>
 8006576:	4606      	mov	r6, r0
 8006578:	b950      	cbnz	r0, 8006590 <__ssputs_r+0x5c>
 800657a:	230c      	movs	r3, #12
 800657c:	f8ca 3000 	str.w	r3, [sl]
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800658a:	81a3      	strh	r3, [r4, #12]
 800658c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006590:	463a      	mov	r2, r7
 8006592:	6921      	ldr	r1, [r4, #16]
 8006594:	f7ff ff96 	bl	80064c4 <memcpy>
 8006598:	89a3      	ldrh	r3, [r4, #12]
 800659a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800659e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a2:	81a3      	strh	r3, [r4, #12]
 80065a4:	6126      	str	r6, [r4, #16]
 80065a6:	443e      	add	r6, r7
 80065a8:	6026      	str	r6, [r4, #0]
 80065aa:	4646      	mov	r6, r8
 80065ac:	6165      	str	r5, [r4, #20]
 80065ae:	1bed      	subs	r5, r5, r7
 80065b0:	60a5      	str	r5, [r4, #8]
 80065b2:	4546      	cmp	r6, r8
 80065b4:	bf28      	it	cs
 80065b6:	4646      	movcs	r6, r8
 80065b8:	4649      	mov	r1, r9
 80065ba:	4632      	mov	r2, r6
 80065bc:	6820      	ldr	r0, [r4, #0]
 80065be:	f000 faaf 	bl	8006b20 <memmove>
 80065c2:	68a3      	ldr	r3, [r4, #8]
 80065c4:	2000      	movs	r0, #0
 80065c6:	1b9b      	subs	r3, r3, r6
 80065c8:	60a3      	str	r3, [r4, #8]
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	441e      	add	r6, r3
 80065ce:	6026      	str	r6, [r4, #0]
 80065d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d4:	462a      	mov	r2, r5
 80065d6:	f000 fb67 	bl	8006ca8 <_realloc_r>
 80065da:	4606      	mov	r6, r0
 80065dc:	2800      	cmp	r0, #0
 80065de:	d1e1      	bne.n	80065a4 <__ssputs_r+0x70>
 80065e0:	6921      	ldr	r1, [r4, #16]
 80065e2:	4650      	mov	r0, sl
 80065e4:	f000 fab6 	bl	8006b54 <_free_r>
 80065e8:	e7c7      	b.n	800657a <__ssputs_r+0x46>
	...

080065ec <_svfiprintf_r>:
 80065ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f0:	b09d      	sub	sp, #116	; 0x74
 80065f2:	9303      	str	r3, [sp, #12]
 80065f4:	898b      	ldrh	r3, [r1, #12]
 80065f6:	4680      	mov	r8, r0
 80065f8:	061c      	lsls	r4, r3, #24
 80065fa:	460d      	mov	r5, r1
 80065fc:	4616      	mov	r6, r2
 80065fe:	d50f      	bpl.n	8006620 <_svfiprintf_r+0x34>
 8006600:	690b      	ldr	r3, [r1, #16]
 8006602:	b96b      	cbnz	r3, 8006620 <_svfiprintf_r+0x34>
 8006604:	2140      	movs	r1, #64	; 0x40
 8006606:	f000 faf1 	bl	8006bec <_malloc_r>
 800660a:	6028      	str	r0, [r5, #0]
 800660c:	6128      	str	r0, [r5, #16]
 800660e:	b928      	cbnz	r0, 800661c <_svfiprintf_r+0x30>
 8006610:	230c      	movs	r3, #12
 8006612:	f8c8 3000 	str.w	r3, [r8]
 8006616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800661a:	e0c4      	b.n	80067a6 <_svfiprintf_r+0x1ba>
 800661c:	2340      	movs	r3, #64	; 0x40
 800661e:	616b      	str	r3, [r5, #20]
 8006620:	2300      	movs	r3, #0
 8006622:	9309      	str	r3, [sp, #36]	; 0x24
 8006624:	2320      	movs	r3, #32
 8006626:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800662a:	2330      	movs	r3, #48	; 0x30
 800662c:	f04f 0b01 	mov.w	fp, #1
 8006630:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006634:	4637      	mov	r7, r6
 8006636:	463c      	mov	r4, r7
 8006638:	f814 3b01 	ldrb.w	r3, [r4], #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d13c      	bne.n	80066ba <_svfiprintf_r+0xce>
 8006640:	ebb7 0a06 	subs.w	sl, r7, r6
 8006644:	d00b      	beq.n	800665e <_svfiprintf_r+0x72>
 8006646:	4653      	mov	r3, sl
 8006648:	4632      	mov	r2, r6
 800664a:	4629      	mov	r1, r5
 800664c:	4640      	mov	r0, r8
 800664e:	f7ff ff71 	bl	8006534 <__ssputs_r>
 8006652:	3001      	adds	r0, #1
 8006654:	f000 80a2 	beq.w	800679c <_svfiprintf_r+0x1b0>
 8006658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800665a:	4453      	add	r3, sl
 800665c:	9309      	str	r3, [sp, #36]	; 0x24
 800665e:	783b      	ldrb	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 809b 	beq.w	800679c <_svfiprintf_r+0x1b0>
 8006666:	2300      	movs	r3, #0
 8006668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800666c:	9304      	str	r3, [sp, #16]
 800666e:	9307      	str	r3, [sp, #28]
 8006670:	9205      	str	r2, [sp, #20]
 8006672:	9306      	str	r3, [sp, #24]
 8006674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006678:	931a      	str	r3, [sp, #104]	; 0x68
 800667a:	2205      	movs	r2, #5
 800667c:	7821      	ldrb	r1, [r4, #0]
 800667e:	4850      	ldr	r0, [pc, #320]	; (80067c0 <_svfiprintf_r+0x1d4>)
 8006680:	f000 fa40 	bl	8006b04 <memchr>
 8006684:	1c67      	adds	r7, r4, #1
 8006686:	9b04      	ldr	r3, [sp, #16]
 8006688:	b9d8      	cbnz	r0, 80066c2 <_svfiprintf_r+0xd6>
 800668a:	06d9      	lsls	r1, r3, #27
 800668c:	bf44      	itt	mi
 800668e:	2220      	movmi	r2, #32
 8006690:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006694:	071a      	lsls	r2, r3, #28
 8006696:	bf44      	itt	mi
 8006698:	222b      	movmi	r2, #43	; 0x2b
 800669a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800669e:	7822      	ldrb	r2, [r4, #0]
 80066a0:	2a2a      	cmp	r2, #42	; 0x2a
 80066a2:	d016      	beq.n	80066d2 <_svfiprintf_r+0xe6>
 80066a4:	2100      	movs	r1, #0
 80066a6:	200a      	movs	r0, #10
 80066a8:	9a07      	ldr	r2, [sp, #28]
 80066aa:	4627      	mov	r7, r4
 80066ac:	783b      	ldrb	r3, [r7, #0]
 80066ae:	3401      	adds	r4, #1
 80066b0:	3b30      	subs	r3, #48	; 0x30
 80066b2:	2b09      	cmp	r3, #9
 80066b4:	d950      	bls.n	8006758 <_svfiprintf_r+0x16c>
 80066b6:	b1c9      	cbz	r1, 80066ec <_svfiprintf_r+0x100>
 80066b8:	e011      	b.n	80066de <_svfiprintf_r+0xf2>
 80066ba:	2b25      	cmp	r3, #37	; 0x25
 80066bc:	d0c0      	beq.n	8006640 <_svfiprintf_r+0x54>
 80066be:	4627      	mov	r7, r4
 80066c0:	e7b9      	b.n	8006636 <_svfiprintf_r+0x4a>
 80066c2:	4a3f      	ldr	r2, [pc, #252]	; (80067c0 <_svfiprintf_r+0x1d4>)
 80066c4:	463c      	mov	r4, r7
 80066c6:	1a80      	subs	r0, r0, r2
 80066c8:	fa0b f000 	lsl.w	r0, fp, r0
 80066cc:	4318      	orrs	r0, r3
 80066ce:	9004      	str	r0, [sp, #16]
 80066d0:	e7d3      	b.n	800667a <_svfiprintf_r+0x8e>
 80066d2:	9a03      	ldr	r2, [sp, #12]
 80066d4:	1d11      	adds	r1, r2, #4
 80066d6:	6812      	ldr	r2, [r2, #0]
 80066d8:	9103      	str	r1, [sp, #12]
 80066da:	2a00      	cmp	r2, #0
 80066dc:	db01      	blt.n	80066e2 <_svfiprintf_r+0xf6>
 80066de:	9207      	str	r2, [sp, #28]
 80066e0:	e004      	b.n	80066ec <_svfiprintf_r+0x100>
 80066e2:	4252      	negs	r2, r2
 80066e4:	f043 0302 	orr.w	r3, r3, #2
 80066e8:	9207      	str	r2, [sp, #28]
 80066ea:	9304      	str	r3, [sp, #16]
 80066ec:	783b      	ldrb	r3, [r7, #0]
 80066ee:	2b2e      	cmp	r3, #46	; 0x2e
 80066f0:	d10d      	bne.n	800670e <_svfiprintf_r+0x122>
 80066f2:	787b      	ldrb	r3, [r7, #1]
 80066f4:	1c79      	adds	r1, r7, #1
 80066f6:	2b2a      	cmp	r3, #42	; 0x2a
 80066f8:	d132      	bne.n	8006760 <_svfiprintf_r+0x174>
 80066fa:	9b03      	ldr	r3, [sp, #12]
 80066fc:	3702      	adds	r7, #2
 80066fe:	1d1a      	adds	r2, r3, #4
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	9203      	str	r2, [sp, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	bfb8      	it	lt
 8006708:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800670c:	9305      	str	r3, [sp, #20]
 800670e:	4c2d      	ldr	r4, [pc, #180]	; (80067c4 <_svfiprintf_r+0x1d8>)
 8006710:	2203      	movs	r2, #3
 8006712:	7839      	ldrb	r1, [r7, #0]
 8006714:	4620      	mov	r0, r4
 8006716:	f000 f9f5 	bl	8006b04 <memchr>
 800671a:	b138      	cbz	r0, 800672c <_svfiprintf_r+0x140>
 800671c:	2340      	movs	r3, #64	; 0x40
 800671e:	1b00      	subs	r0, r0, r4
 8006720:	fa03 f000 	lsl.w	r0, r3, r0
 8006724:	9b04      	ldr	r3, [sp, #16]
 8006726:	3701      	adds	r7, #1
 8006728:	4303      	orrs	r3, r0
 800672a:	9304      	str	r3, [sp, #16]
 800672c:	7839      	ldrb	r1, [r7, #0]
 800672e:	2206      	movs	r2, #6
 8006730:	4825      	ldr	r0, [pc, #148]	; (80067c8 <_svfiprintf_r+0x1dc>)
 8006732:	1c7e      	adds	r6, r7, #1
 8006734:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006738:	f000 f9e4 	bl	8006b04 <memchr>
 800673c:	2800      	cmp	r0, #0
 800673e:	d035      	beq.n	80067ac <_svfiprintf_r+0x1c0>
 8006740:	4b22      	ldr	r3, [pc, #136]	; (80067cc <_svfiprintf_r+0x1e0>)
 8006742:	b9fb      	cbnz	r3, 8006784 <_svfiprintf_r+0x198>
 8006744:	9b03      	ldr	r3, [sp, #12]
 8006746:	3307      	adds	r3, #7
 8006748:	f023 0307 	bic.w	r3, r3, #7
 800674c:	3308      	adds	r3, #8
 800674e:	9303      	str	r3, [sp, #12]
 8006750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006752:	444b      	add	r3, r9
 8006754:	9309      	str	r3, [sp, #36]	; 0x24
 8006756:	e76d      	b.n	8006634 <_svfiprintf_r+0x48>
 8006758:	fb00 3202 	mla	r2, r0, r2, r3
 800675c:	2101      	movs	r1, #1
 800675e:	e7a4      	b.n	80066aa <_svfiprintf_r+0xbe>
 8006760:	2300      	movs	r3, #0
 8006762:	240a      	movs	r4, #10
 8006764:	4618      	mov	r0, r3
 8006766:	9305      	str	r3, [sp, #20]
 8006768:	460f      	mov	r7, r1
 800676a:	783a      	ldrb	r2, [r7, #0]
 800676c:	3101      	adds	r1, #1
 800676e:	3a30      	subs	r2, #48	; 0x30
 8006770:	2a09      	cmp	r2, #9
 8006772:	d903      	bls.n	800677c <_svfiprintf_r+0x190>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d0ca      	beq.n	800670e <_svfiprintf_r+0x122>
 8006778:	9005      	str	r0, [sp, #20]
 800677a:	e7c8      	b.n	800670e <_svfiprintf_r+0x122>
 800677c:	fb04 2000 	mla	r0, r4, r0, r2
 8006780:	2301      	movs	r3, #1
 8006782:	e7f1      	b.n	8006768 <_svfiprintf_r+0x17c>
 8006784:	ab03      	add	r3, sp, #12
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	462a      	mov	r2, r5
 800678a:	4b11      	ldr	r3, [pc, #68]	; (80067d0 <_svfiprintf_r+0x1e4>)
 800678c:	a904      	add	r1, sp, #16
 800678e:	4640      	mov	r0, r8
 8006790:	f3af 8000 	nop.w
 8006794:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006798:	4681      	mov	r9, r0
 800679a:	d1d9      	bne.n	8006750 <_svfiprintf_r+0x164>
 800679c:	89ab      	ldrh	r3, [r5, #12]
 800679e:	065b      	lsls	r3, r3, #25
 80067a0:	f53f af39 	bmi.w	8006616 <_svfiprintf_r+0x2a>
 80067a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067a6:	b01d      	add	sp, #116	; 0x74
 80067a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ac:	ab03      	add	r3, sp, #12
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	462a      	mov	r2, r5
 80067b2:	4b07      	ldr	r3, [pc, #28]	; (80067d0 <_svfiprintf_r+0x1e4>)
 80067b4:	a904      	add	r1, sp, #16
 80067b6:	4640      	mov	r0, r8
 80067b8:	f000 f884 	bl	80068c4 <_printf_i>
 80067bc:	e7ea      	b.n	8006794 <_svfiprintf_r+0x1a8>
 80067be:	bf00      	nop
 80067c0:	080072d8 	.word	0x080072d8
 80067c4:	080072de 	.word	0x080072de
 80067c8:	080072e2 	.word	0x080072e2
 80067cc:	00000000 	.word	0x00000000
 80067d0:	08006535 	.word	0x08006535

080067d4 <_printf_common>:
 80067d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	4691      	mov	r9, r2
 80067da:	461f      	mov	r7, r3
 80067dc:	688a      	ldr	r2, [r1, #8]
 80067de:	690b      	ldr	r3, [r1, #16]
 80067e0:	4606      	mov	r6, r0
 80067e2:	4293      	cmp	r3, r2
 80067e4:	bfb8      	it	lt
 80067e6:	4613      	movlt	r3, r2
 80067e8:	f8c9 3000 	str.w	r3, [r9]
 80067ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067f0:	460c      	mov	r4, r1
 80067f2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067f6:	b112      	cbz	r2, 80067fe <_printf_common+0x2a>
 80067f8:	3301      	adds	r3, #1
 80067fa:	f8c9 3000 	str.w	r3, [r9]
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	0699      	lsls	r1, r3, #26
 8006802:	bf42      	ittt	mi
 8006804:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006808:	3302      	addmi	r3, #2
 800680a:	f8c9 3000 	strmi.w	r3, [r9]
 800680e:	6825      	ldr	r5, [r4, #0]
 8006810:	f015 0506 	ands.w	r5, r5, #6
 8006814:	d107      	bne.n	8006826 <_printf_common+0x52>
 8006816:	f104 0a19 	add.w	sl, r4, #25
 800681a:	68e3      	ldr	r3, [r4, #12]
 800681c:	f8d9 2000 	ldr.w	r2, [r9]
 8006820:	1a9b      	subs	r3, r3, r2
 8006822:	429d      	cmp	r5, r3
 8006824:	db2a      	blt.n	800687c <_printf_common+0xa8>
 8006826:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800682a:	6822      	ldr	r2, [r4, #0]
 800682c:	3300      	adds	r3, #0
 800682e:	bf18      	it	ne
 8006830:	2301      	movne	r3, #1
 8006832:	0692      	lsls	r2, r2, #26
 8006834:	d42f      	bmi.n	8006896 <_printf_common+0xc2>
 8006836:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800683a:	4639      	mov	r1, r7
 800683c:	4630      	mov	r0, r6
 800683e:	47c0      	blx	r8
 8006840:	3001      	adds	r0, #1
 8006842:	d022      	beq.n	800688a <_printf_common+0xb6>
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	68e5      	ldr	r5, [r4, #12]
 8006848:	f003 0306 	and.w	r3, r3, #6
 800684c:	2b04      	cmp	r3, #4
 800684e:	bf18      	it	ne
 8006850:	2500      	movne	r5, #0
 8006852:	f8d9 2000 	ldr.w	r2, [r9]
 8006856:	f04f 0900 	mov.w	r9, #0
 800685a:	bf08      	it	eq
 800685c:	1aad      	subeq	r5, r5, r2
 800685e:	68a3      	ldr	r3, [r4, #8]
 8006860:	6922      	ldr	r2, [r4, #16]
 8006862:	bf08      	it	eq
 8006864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006868:	4293      	cmp	r3, r2
 800686a:	bfc4      	itt	gt
 800686c:	1a9b      	subgt	r3, r3, r2
 800686e:	18ed      	addgt	r5, r5, r3
 8006870:	341a      	adds	r4, #26
 8006872:	454d      	cmp	r5, r9
 8006874:	d11b      	bne.n	80068ae <_printf_common+0xda>
 8006876:	2000      	movs	r0, #0
 8006878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800687c:	2301      	movs	r3, #1
 800687e:	4652      	mov	r2, sl
 8006880:	4639      	mov	r1, r7
 8006882:	4630      	mov	r0, r6
 8006884:	47c0      	blx	r8
 8006886:	3001      	adds	r0, #1
 8006888:	d103      	bne.n	8006892 <_printf_common+0xbe>
 800688a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800688e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006892:	3501      	adds	r5, #1
 8006894:	e7c1      	b.n	800681a <_printf_common+0x46>
 8006896:	2030      	movs	r0, #48	; 0x30
 8006898:	18e1      	adds	r1, r4, r3
 800689a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800689e:	1c5a      	adds	r2, r3, #1
 80068a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068a4:	4422      	add	r2, r4
 80068a6:	3302      	adds	r3, #2
 80068a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068ac:	e7c3      	b.n	8006836 <_printf_common+0x62>
 80068ae:	2301      	movs	r3, #1
 80068b0:	4622      	mov	r2, r4
 80068b2:	4639      	mov	r1, r7
 80068b4:	4630      	mov	r0, r6
 80068b6:	47c0      	blx	r8
 80068b8:	3001      	adds	r0, #1
 80068ba:	d0e6      	beq.n	800688a <_printf_common+0xb6>
 80068bc:	f109 0901 	add.w	r9, r9, #1
 80068c0:	e7d7      	b.n	8006872 <_printf_common+0x9e>
	...

080068c4 <_printf_i>:
 80068c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068c8:	4617      	mov	r7, r2
 80068ca:	7e0a      	ldrb	r2, [r1, #24]
 80068cc:	b085      	sub	sp, #20
 80068ce:	2a6e      	cmp	r2, #110	; 0x6e
 80068d0:	4698      	mov	r8, r3
 80068d2:	4606      	mov	r6, r0
 80068d4:	460c      	mov	r4, r1
 80068d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068d8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80068dc:	f000 80bc 	beq.w	8006a58 <_printf_i+0x194>
 80068e0:	d81a      	bhi.n	8006918 <_printf_i+0x54>
 80068e2:	2a63      	cmp	r2, #99	; 0x63
 80068e4:	d02e      	beq.n	8006944 <_printf_i+0x80>
 80068e6:	d80a      	bhi.n	80068fe <_printf_i+0x3a>
 80068e8:	2a00      	cmp	r2, #0
 80068ea:	f000 80c8 	beq.w	8006a7e <_printf_i+0x1ba>
 80068ee:	2a58      	cmp	r2, #88	; 0x58
 80068f0:	f000 808a 	beq.w	8006a08 <_printf_i+0x144>
 80068f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068f8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80068fc:	e02a      	b.n	8006954 <_printf_i+0x90>
 80068fe:	2a64      	cmp	r2, #100	; 0x64
 8006900:	d001      	beq.n	8006906 <_printf_i+0x42>
 8006902:	2a69      	cmp	r2, #105	; 0x69
 8006904:	d1f6      	bne.n	80068f4 <_printf_i+0x30>
 8006906:	6821      	ldr	r1, [r4, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800690e:	d023      	beq.n	8006958 <_printf_i+0x94>
 8006910:	1d11      	adds	r1, r2, #4
 8006912:	6019      	str	r1, [r3, #0]
 8006914:	6813      	ldr	r3, [r2, #0]
 8006916:	e027      	b.n	8006968 <_printf_i+0xa4>
 8006918:	2a73      	cmp	r2, #115	; 0x73
 800691a:	f000 80b4 	beq.w	8006a86 <_printf_i+0x1c2>
 800691e:	d808      	bhi.n	8006932 <_printf_i+0x6e>
 8006920:	2a6f      	cmp	r2, #111	; 0x6f
 8006922:	d02a      	beq.n	800697a <_printf_i+0xb6>
 8006924:	2a70      	cmp	r2, #112	; 0x70
 8006926:	d1e5      	bne.n	80068f4 <_printf_i+0x30>
 8006928:	680a      	ldr	r2, [r1, #0]
 800692a:	f042 0220 	orr.w	r2, r2, #32
 800692e:	600a      	str	r2, [r1, #0]
 8006930:	e003      	b.n	800693a <_printf_i+0x76>
 8006932:	2a75      	cmp	r2, #117	; 0x75
 8006934:	d021      	beq.n	800697a <_printf_i+0xb6>
 8006936:	2a78      	cmp	r2, #120	; 0x78
 8006938:	d1dc      	bne.n	80068f4 <_printf_i+0x30>
 800693a:	2278      	movs	r2, #120	; 0x78
 800693c:	496f      	ldr	r1, [pc, #444]	; (8006afc <_printf_i+0x238>)
 800693e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006942:	e064      	b.n	8006a0e <_printf_i+0x14a>
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800694a:	1d11      	adds	r1, r2, #4
 800694c:	6019      	str	r1, [r3, #0]
 800694e:	6813      	ldr	r3, [r2, #0]
 8006950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006954:	2301      	movs	r3, #1
 8006956:	e0a3      	b.n	8006aa0 <_printf_i+0x1dc>
 8006958:	f011 0f40 	tst.w	r1, #64	; 0x40
 800695c:	f102 0104 	add.w	r1, r2, #4
 8006960:	6019      	str	r1, [r3, #0]
 8006962:	d0d7      	beq.n	8006914 <_printf_i+0x50>
 8006964:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006968:	2b00      	cmp	r3, #0
 800696a:	da03      	bge.n	8006974 <_printf_i+0xb0>
 800696c:	222d      	movs	r2, #45	; 0x2d
 800696e:	425b      	negs	r3, r3
 8006970:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006974:	4962      	ldr	r1, [pc, #392]	; (8006b00 <_printf_i+0x23c>)
 8006976:	220a      	movs	r2, #10
 8006978:	e017      	b.n	80069aa <_printf_i+0xe6>
 800697a:	6820      	ldr	r0, [r4, #0]
 800697c:	6819      	ldr	r1, [r3, #0]
 800697e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006982:	d003      	beq.n	800698c <_printf_i+0xc8>
 8006984:	1d08      	adds	r0, r1, #4
 8006986:	6018      	str	r0, [r3, #0]
 8006988:	680b      	ldr	r3, [r1, #0]
 800698a:	e006      	b.n	800699a <_printf_i+0xd6>
 800698c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006990:	f101 0004 	add.w	r0, r1, #4
 8006994:	6018      	str	r0, [r3, #0]
 8006996:	d0f7      	beq.n	8006988 <_printf_i+0xc4>
 8006998:	880b      	ldrh	r3, [r1, #0]
 800699a:	2a6f      	cmp	r2, #111	; 0x6f
 800699c:	bf14      	ite	ne
 800699e:	220a      	movne	r2, #10
 80069a0:	2208      	moveq	r2, #8
 80069a2:	4957      	ldr	r1, [pc, #348]	; (8006b00 <_printf_i+0x23c>)
 80069a4:	2000      	movs	r0, #0
 80069a6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80069aa:	6865      	ldr	r5, [r4, #4]
 80069ac:	2d00      	cmp	r5, #0
 80069ae:	60a5      	str	r5, [r4, #8]
 80069b0:	f2c0 809c 	blt.w	8006aec <_printf_i+0x228>
 80069b4:	6820      	ldr	r0, [r4, #0]
 80069b6:	f020 0004 	bic.w	r0, r0, #4
 80069ba:	6020      	str	r0, [r4, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d13f      	bne.n	8006a40 <_printf_i+0x17c>
 80069c0:	2d00      	cmp	r5, #0
 80069c2:	f040 8095 	bne.w	8006af0 <_printf_i+0x22c>
 80069c6:	4675      	mov	r5, lr
 80069c8:	2a08      	cmp	r2, #8
 80069ca:	d10b      	bne.n	80069e4 <_printf_i+0x120>
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	07da      	lsls	r2, r3, #31
 80069d0:	d508      	bpl.n	80069e4 <_printf_i+0x120>
 80069d2:	6923      	ldr	r3, [r4, #16]
 80069d4:	6862      	ldr	r2, [r4, #4]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	bfde      	ittt	le
 80069da:	2330      	movle	r3, #48	; 0x30
 80069dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069e0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80069e4:	ebae 0305 	sub.w	r3, lr, r5
 80069e8:	6123      	str	r3, [r4, #16]
 80069ea:	f8cd 8000 	str.w	r8, [sp]
 80069ee:	463b      	mov	r3, r7
 80069f0:	aa03      	add	r2, sp, #12
 80069f2:	4621      	mov	r1, r4
 80069f4:	4630      	mov	r0, r6
 80069f6:	f7ff feed 	bl	80067d4 <_printf_common>
 80069fa:	3001      	adds	r0, #1
 80069fc:	d155      	bne.n	8006aaa <_printf_i+0x1e6>
 80069fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a02:	b005      	add	sp, #20
 8006a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a08:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006a0c:	493c      	ldr	r1, [pc, #240]	; (8006b00 <_printf_i+0x23c>)
 8006a0e:	6822      	ldr	r2, [r4, #0]
 8006a10:	6818      	ldr	r0, [r3, #0]
 8006a12:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006a16:	f100 0504 	add.w	r5, r0, #4
 8006a1a:	601d      	str	r5, [r3, #0]
 8006a1c:	d001      	beq.n	8006a22 <_printf_i+0x15e>
 8006a1e:	6803      	ldr	r3, [r0, #0]
 8006a20:	e002      	b.n	8006a28 <_printf_i+0x164>
 8006a22:	0655      	lsls	r5, r2, #25
 8006a24:	d5fb      	bpl.n	8006a1e <_printf_i+0x15a>
 8006a26:	8803      	ldrh	r3, [r0, #0]
 8006a28:	07d0      	lsls	r0, r2, #31
 8006a2a:	bf44      	itt	mi
 8006a2c:	f042 0220 	orrmi.w	r2, r2, #32
 8006a30:	6022      	strmi	r2, [r4, #0]
 8006a32:	b91b      	cbnz	r3, 8006a3c <_printf_i+0x178>
 8006a34:	6822      	ldr	r2, [r4, #0]
 8006a36:	f022 0220 	bic.w	r2, r2, #32
 8006a3a:	6022      	str	r2, [r4, #0]
 8006a3c:	2210      	movs	r2, #16
 8006a3e:	e7b1      	b.n	80069a4 <_printf_i+0xe0>
 8006a40:	4675      	mov	r5, lr
 8006a42:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a46:	fb02 3310 	mls	r3, r2, r0, r3
 8006a4a:	5ccb      	ldrb	r3, [r1, r3]
 8006a4c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006a50:	4603      	mov	r3, r0
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d1f5      	bne.n	8006a42 <_printf_i+0x17e>
 8006a56:	e7b7      	b.n	80069c8 <_printf_i+0x104>
 8006a58:	6808      	ldr	r0, [r1, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006a60:	6949      	ldr	r1, [r1, #20]
 8006a62:	d004      	beq.n	8006a6e <_printf_i+0x1aa>
 8006a64:	1d10      	adds	r0, r2, #4
 8006a66:	6018      	str	r0, [r3, #0]
 8006a68:	6813      	ldr	r3, [r2, #0]
 8006a6a:	6019      	str	r1, [r3, #0]
 8006a6c:	e007      	b.n	8006a7e <_printf_i+0x1ba>
 8006a6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a72:	f102 0004 	add.w	r0, r2, #4
 8006a76:	6018      	str	r0, [r3, #0]
 8006a78:	6813      	ldr	r3, [r2, #0]
 8006a7a:	d0f6      	beq.n	8006a6a <_printf_i+0x1a6>
 8006a7c:	8019      	strh	r1, [r3, #0]
 8006a7e:	2300      	movs	r3, #0
 8006a80:	4675      	mov	r5, lr
 8006a82:	6123      	str	r3, [r4, #16]
 8006a84:	e7b1      	b.n	80069ea <_printf_i+0x126>
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	1d11      	adds	r1, r2, #4
 8006a8a:	6019      	str	r1, [r3, #0]
 8006a8c:	6815      	ldr	r5, [r2, #0]
 8006a8e:	2100      	movs	r1, #0
 8006a90:	6862      	ldr	r2, [r4, #4]
 8006a92:	4628      	mov	r0, r5
 8006a94:	f000 f836 	bl	8006b04 <memchr>
 8006a98:	b108      	cbz	r0, 8006a9e <_printf_i+0x1da>
 8006a9a:	1b40      	subs	r0, r0, r5
 8006a9c:	6060      	str	r0, [r4, #4]
 8006a9e:	6863      	ldr	r3, [r4, #4]
 8006aa0:	6123      	str	r3, [r4, #16]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aa8:	e79f      	b.n	80069ea <_printf_i+0x126>
 8006aaa:	6923      	ldr	r3, [r4, #16]
 8006aac:	462a      	mov	r2, r5
 8006aae:	4639      	mov	r1, r7
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	47c0      	blx	r8
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	d0a2      	beq.n	80069fe <_printf_i+0x13a>
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	079b      	lsls	r3, r3, #30
 8006abc:	d507      	bpl.n	8006ace <_printf_i+0x20a>
 8006abe:	2500      	movs	r5, #0
 8006ac0:	f104 0919 	add.w	r9, r4, #25
 8006ac4:	68e3      	ldr	r3, [r4, #12]
 8006ac6:	9a03      	ldr	r2, [sp, #12]
 8006ac8:	1a9b      	subs	r3, r3, r2
 8006aca:	429d      	cmp	r5, r3
 8006acc:	db05      	blt.n	8006ada <_printf_i+0x216>
 8006ace:	68e0      	ldr	r0, [r4, #12]
 8006ad0:	9b03      	ldr	r3, [sp, #12]
 8006ad2:	4298      	cmp	r0, r3
 8006ad4:	bfb8      	it	lt
 8006ad6:	4618      	movlt	r0, r3
 8006ad8:	e793      	b.n	8006a02 <_printf_i+0x13e>
 8006ada:	2301      	movs	r3, #1
 8006adc:	464a      	mov	r2, r9
 8006ade:	4639      	mov	r1, r7
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	47c0      	blx	r8
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	d08a      	beq.n	80069fe <_printf_i+0x13a>
 8006ae8:	3501      	adds	r5, #1
 8006aea:	e7eb      	b.n	8006ac4 <_printf_i+0x200>
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1a7      	bne.n	8006a40 <_printf_i+0x17c>
 8006af0:	780b      	ldrb	r3, [r1, #0]
 8006af2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006af6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006afa:	e765      	b.n	80069c8 <_printf_i+0x104>
 8006afc:	080072fa 	.word	0x080072fa
 8006b00:	080072e9 	.word	0x080072e9

08006b04 <memchr>:
 8006b04:	b510      	push	{r4, lr}
 8006b06:	b2c9      	uxtb	r1, r1
 8006b08:	4402      	add	r2, r0
 8006b0a:	4290      	cmp	r0, r2
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	d101      	bne.n	8006b14 <memchr+0x10>
 8006b10:	2000      	movs	r0, #0
 8006b12:	bd10      	pop	{r4, pc}
 8006b14:	781c      	ldrb	r4, [r3, #0]
 8006b16:	3001      	adds	r0, #1
 8006b18:	428c      	cmp	r4, r1
 8006b1a:	d1f6      	bne.n	8006b0a <memchr+0x6>
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	bd10      	pop	{r4, pc}

08006b20 <memmove>:
 8006b20:	4288      	cmp	r0, r1
 8006b22:	b510      	push	{r4, lr}
 8006b24:	eb01 0302 	add.w	r3, r1, r2
 8006b28:	d803      	bhi.n	8006b32 <memmove+0x12>
 8006b2a:	1e42      	subs	r2, r0, #1
 8006b2c:	4299      	cmp	r1, r3
 8006b2e:	d10c      	bne.n	8006b4a <memmove+0x2a>
 8006b30:	bd10      	pop	{r4, pc}
 8006b32:	4298      	cmp	r0, r3
 8006b34:	d2f9      	bcs.n	8006b2a <memmove+0xa>
 8006b36:	1881      	adds	r1, r0, r2
 8006b38:	1ad2      	subs	r2, r2, r3
 8006b3a:	42d3      	cmn	r3, r2
 8006b3c:	d100      	bne.n	8006b40 <memmove+0x20>
 8006b3e:	bd10      	pop	{r4, pc}
 8006b40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b44:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006b48:	e7f7      	b.n	8006b3a <memmove+0x1a>
 8006b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b4e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006b52:	e7eb      	b.n	8006b2c <memmove+0xc>

08006b54 <_free_r>:
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	4605      	mov	r5, r0
 8006b58:	2900      	cmp	r1, #0
 8006b5a:	d043      	beq.n	8006be4 <_free_r+0x90>
 8006b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b60:	1f0c      	subs	r4, r1, #4
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	bfb8      	it	lt
 8006b66:	18e4      	addlt	r4, r4, r3
 8006b68:	f000 f8d4 	bl	8006d14 <__malloc_lock>
 8006b6c:	4a1e      	ldr	r2, [pc, #120]	; (8006be8 <_free_r+0x94>)
 8006b6e:	6813      	ldr	r3, [r2, #0]
 8006b70:	4610      	mov	r0, r2
 8006b72:	b933      	cbnz	r3, 8006b82 <_free_r+0x2e>
 8006b74:	6063      	str	r3, [r4, #4]
 8006b76:	6014      	str	r4, [r2, #0]
 8006b78:	4628      	mov	r0, r5
 8006b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b7e:	f000 b8ca 	b.w	8006d16 <__malloc_unlock>
 8006b82:	42a3      	cmp	r3, r4
 8006b84:	d90b      	bls.n	8006b9e <_free_r+0x4a>
 8006b86:	6821      	ldr	r1, [r4, #0]
 8006b88:	1862      	adds	r2, r4, r1
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	bf01      	itttt	eq
 8006b8e:	681a      	ldreq	r2, [r3, #0]
 8006b90:	685b      	ldreq	r3, [r3, #4]
 8006b92:	1852      	addeq	r2, r2, r1
 8006b94:	6022      	streq	r2, [r4, #0]
 8006b96:	6063      	str	r3, [r4, #4]
 8006b98:	6004      	str	r4, [r0, #0]
 8006b9a:	e7ed      	b.n	8006b78 <_free_r+0x24>
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	b10a      	cbz	r2, 8006ba6 <_free_r+0x52>
 8006ba2:	42a2      	cmp	r2, r4
 8006ba4:	d9fa      	bls.n	8006b9c <_free_r+0x48>
 8006ba6:	6819      	ldr	r1, [r3, #0]
 8006ba8:	1858      	adds	r0, r3, r1
 8006baa:	42a0      	cmp	r0, r4
 8006bac:	d10b      	bne.n	8006bc6 <_free_r+0x72>
 8006bae:	6820      	ldr	r0, [r4, #0]
 8006bb0:	4401      	add	r1, r0
 8006bb2:	1858      	adds	r0, r3, r1
 8006bb4:	4282      	cmp	r2, r0
 8006bb6:	6019      	str	r1, [r3, #0]
 8006bb8:	d1de      	bne.n	8006b78 <_free_r+0x24>
 8006bba:	6810      	ldr	r0, [r2, #0]
 8006bbc:	6852      	ldr	r2, [r2, #4]
 8006bbe:	4401      	add	r1, r0
 8006bc0:	6019      	str	r1, [r3, #0]
 8006bc2:	605a      	str	r2, [r3, #4]
 8006bc4:	e7d8      	b.n	8006b78 <_free_r+0x24>
 8006bc6:	d902      	bls.n	8006bce <_free_r+0x7a>
 8006bc8:	230c      	movs	r3, #12
 8006bca:	602b      	str	r3, [r5, #0]
 8006bcc:	e7d4      	b.n	8006b78 <_free_r+0x24>
 8006bce:	6820      	ldr	r0, [r4, #0]
 8006bd0:	1821      	adds	r1, r4, r0
 8006bd2:	428a      	cmp	r2, r1
 8006bd4:	bf01      	itttt	eq
 8006bd6:	6811      	ldreq	r1, [r2, #0]
 8006bd8:	6852      	ldreq	r2, [r2, #4]
 8006bda:	1809      	addeq	r1, r1, r0
 8006bdc:	6021      	streq	r1, [r4, #0]
 8006bde:	6062      	str	r2, [r4, #4]
 8006be0:	605c      	str	r4, [r3, #4]
 8006be2:	e7c9      	b.n	8006b78 <_free_r+0x24>
 8006be4:	bd38      	pop	{r3, r4, r5, pc}
 8006be6:	bf00      	nop
 8006be8:	20000180 	.word	0x20000180

08006bec <_malloc_r>:
 8006bec:	b570      	push	{r4, r5, r6, lr}
 8006bee:	1ccd      	adds	r5, r1, #3
 8006bf0:	f025 0503 	bic.w	r5, r5, #3
 8006bf4:	3508      	adds	r5, #8
 8006bf6:	2d0c      	cmp	r5, #12
 8006bf8:	bf38      	it	cc
 8006bfa:	250c      	movcc	r5, #12
 8006bfc:	2d00      	cmp	r5, #0
 8006bfe:	4606      	mov	r6, r0
 8006c00:	db01      	blt.n	8006c06 <_malloc_r+0x1a>
 8006c02:	42a9      	cmp	r1, r5
 8006c04:	d903      	bls.n	8006c0e <_malloc_r+0x22>
 8006c06:	230c      	movs	r3, #12
 8006c08:	6033      	str	r3, [r6, #0]
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	bd70      	pop	{r4, r5, r6, pc}
 8006c0e:	f000 f881 	bl	8006d14 <__malloc_lock>
 8006c12:	4a23      	ldr	r2, [pc, #140]	; (8006ca0 <_malloc_r+0xb4>)
 8006c14:	6814      	ldr	r4, [r2, #0]
 8006c16:	4621      	mov	r1, r4
 8006c18:	b991      	cbnz	r1, 8006c40 <_malloc_r+0x54>
 8006c1a:	4c22      	ldr	r4, [pc, #136]	; (8006ca4 <_malloc_r+0xb8>)
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	b91b      	cbnz	r3, 8006c28 <_malloc_r+0x3c>
 8006c20:	4630      	mov	r0, r6
 8006c22:	f000 f867 	bl	8006cf4 <_sbrk_r>
 8006c26:	6020      	str	r0, [r4, #0]
 8006c28:	4629      	mov	r1, r5
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	f000 f862 	bl	8006cf4 <_sbrk_r>
 8006c30:	1c43      	adds	r3, r0, #1
 8006c32:	d126      	bne.n	8006c82 <_malloc_r+0x96>
 8006c34:	230c      	movs	r3, #12
 8006c36:	4630      	mov	r0, r6
 8006c38:	6033      	str	r3, [r6, #0]
 8006c3a:	f000 f86c 	bl	8006d16 <__malloc_unlock>
 8006c3e:	e7e4      	b.n	8006c0a <_malloc_r+0x1e>
 8006c40:	680b      	ldr	r3, [r1, #0]
 8006c42:	1b5b      	subs	r3, r3, r5
 8006c44:	d41a      	bmi.n	8006c7c <_malloc_r+0x90>
 8006c46:	2b0b      	cmp	r3, #11
 8006c48:	d90f      	bls.n	8006c6a <_malloc_r+0x7e>
 8006c4a:	600b      	str	r3, [r1, #0]
 8006c4c:	18cc      	adds	r4, r1, r3
 8006c4e:	50cd      	str	r5, [r1, r3]
 8006c50:	4630      	mov	r0, r6
 8006c52:	f000 f860 	bl	8006d16 <__malloc_unlock>
 8006c56:	f104 000b 	add.w	r0, r4, #11
 8006c5a:	1d23      	adds	r3, r4, #4
 8006c5c:	f020 0007 	bic.w	r0, r0, #7
 8006c60:	1ac3      	subs	r3, r0, r3
 8006c62:	d01b      	beq.n	8006c9c <_malloc_r+0xb0>
 8006c64:	425a      	negs	r2, r3
 8006c66:	50e2      	str	r2, [r4, r3]
 8006c68:	bd70      	pop	{r4, r5, r6, pc}
 8006c6a:	428c      	cmp	r4, r1
 8006c6c:	bf0b      	itete	eq
 8006c6e:	6863      	ldreq	r3, [r4, #4]
 8006c70:	684b      	ldrne	r3, [r1, #4]
 8006c72:	6013      	streq	r3, [r2, #0]
 8006c74:	6063      	strne	r3, [r4, #4]
 8006c76:	bf18      	it	ne
 8006c78:	460c      	movne	r4, r1
 8006c7a:	e7e9      	b.n	8006c50 <_malloc_r+0x64>
 8006c7c:	460c      	mov	r4, r1
 8006c7e:	6849      	ldr	r1, [r1, #4]
 8006c80:	e7ca      	b.n	8006c18 <_malloc_r+0x2c>
 8006c82:	1cc4      	adds	r4, r0, #3
 8006c84:	f024 0403 	bic.w	r4, r4, #3
 8006c88:	42a0      	cmp	r0, r4
 8006c8a:	d005      	beq.n	8006c98 <_malloc_r+0xac>
 8006c8c:	1a21      	subs	r1, r4, r0
 8006c8e:	4630      	mov	r0, r6
 8006c90:	f000 f830 	bl	8006cf4 <_sbrk_r>
 8006c94:	3001      	adds	r0, #1
 8006c96:	d0cd      	beq.n	8006c34 <_malloc_r+0x48>
 8006c98:	6025      	str	r5, [r4, #0]
 8006c9a:	e7d9      	b.n	8006c50 <_malloc_r+0x64>
 8006c9c:	bd70      	pop	{r4, r5, r6, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20000180 	.word	0x20000180
 8006ca4:	20000184 	.word	0x20000184

08006ca8 <_realloc_r>:
 8006ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006caa:	4607      	mov	r7, r0
 8006cac:	4614      	mov	r4, r2
 8006cae:	460e      	mov	r6, r1
 8006cb0:	b921      	cbnz	r1, 8006cbc <_realloc_r+0x14>
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006cb8:	f7ff bf98 	b.w	8006bec <_malloc_r>
 8006cbc:	b922      	cbnz	r2, 8006cc8 <_realloc_r+0x20>
 8006cbe:	f7ff ff49 	bl	8006b54 <_free_r>
 8006cc2:	4625      	mov	r5, r4
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cc8:	f000 f826 	bl	8006d18 <_malloc_usable_size_r>
 8006ccc:	4284      	cmp	r4, r0
 8006cce:	d90f      	bls.n	8006cf0 <_realloc_r+0x48>
 8006cd0:	4621      	mov	r1, r4
 8006cd2:	4638      	mov	r0, r7
 8006cd4:	f7ff ff8a 	bl	8006bec <_malloc_r>
 8006cd8:	4605      	mov	r5, r0
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d0f2      	beq.n	8006cc4 <_realloc_r+0x1c>
 8006cde:	4631      	mov	r1, r6
 8006ce0:	4622      	mov	r2, r4
 8006ce2:	f7ff fbef 	bl	80064c4 <memcpy>
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	4638      	mov	r0, r7
 8006cea:	f7ff ff33 	bl	8006b54 <_free_r>
 8006cee:	e7e9      	b.n	8006cc4 <_realloc_r+0x1c>
 8006cf0:	4635      	mov	r5, r6
 8006cf2:	e7e7      	b.n	8006cc4 <_realloc_r+0x1c>

08006cf4 <_sbrk_r>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	4c05      	ldr	r4, [pc, #20]	; (8006d10 <_sbrk_r+0x1c>)
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	4608      	mov	r0, r1
 8006cfe:	6023      	str	r3, [r4, #0]
 8006d00:	f7ff fb30 	bl	8006364 <_sbrk>
 8006d04:	1c43      	adds	r3, r0, #1
 8006d06:	d102      	bne.n	8006d0e <_sbrk_r+0x1a>
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	b103      	cbz	r3, 8006d0e <_sbrk_r+0x1a>
 8006d0c:	602b      	str	r3, [r5, #0]
 8006d0e:	bd38      	pop	{r3, r4, r5, pc}
 8006d10:	200003ac 	.word	0x200003ac

08006d14 <__malloc_lock>:
 8006d14:	4770      	bx	lr

08006d16 <__malloc_unlock>:
 8006d16:	4770      	bx	lr

08006d18 <_malloc_usable_size_r>:
 8006d18:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	f1a0 0004 	sub.w	r0, r0, #4
 8006d22:	bfbc      	itt	lt
 8006d24:	580b      	ldrlt	r3, [r1, r0]
 8006d26:	18c0      	addlt	r0, r0, r3
 8006d28:	4770      	bx	lr
	...

08006d2c <_init>:
 8006d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2e:	bf00      	nop
 8006d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d32:	bc08      	pop	{r3}
 8006d34:	469e      	mov	lr, r3
 8006d36:	4770      	bx	lr

08006d38 <_fini>:
 8006d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3a:	bf00      	nop
 8006d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d3e:	bc08      	pop	{r3}
 8006d40:	469e      	mov	lr, r3
 8006d42:	4770      	bx	lr
