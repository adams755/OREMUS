
Modulo_Navegador_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080031c0  080031c0  000131c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080031fc  080031fc  000131fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003200  08003200  00013200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08003204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001e0  2000000c  08003210  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001ec  08003210  000201ec  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013691  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000021ba  00000000  00000000  000336c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e50  00000000  00000000  00035880  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d78  00000000  00000000  000366d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000637f  00000000  00000000  00037448  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004443  00000000  00000000  0003d7c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00041c0a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003d24  00000000  00000000  00041c88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080031a8 	.word	0x080031a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080031a8 	.word	0x080031a8

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fe67 	bl	8000e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fdbc 	bl	8002ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fe7f 	bl	8000e9a <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 fe47 	bl	8000e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000040 	.word	0x20000040

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000040 	.word	0x20000040

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad2      	subs	r2, r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d3f7      	bcc.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d101      	bne.n	8000266 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000262:	2301      	movs	r3, #1
 8000264:	e0ec      	b.n	8000440 <HAL_CAN_Init+0x1ec>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	2b00      	cmp	r3, #0
 8000270:	d102      	bne.n	8000278 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000272:	6878      	ldr	r0, [r7, #4]
 8000274:	f002 fd58 	bl	8002d28 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	6812      	ldr	r2, [r2, #0]
 8000280:	6812      	ldr	r2, [r2, #0]
 8000282:	f022 0202 	bic.w	r2, r2, #2
 8000286:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000288:	f7ff ffb8 	bl	80001fc <HAL_GetTick>
 800028c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800028e:	e012      	b.n	80002b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000290:	f7ff ffb4 	bl	80001fc <HAL_GetTick>
 8000294:	4602      	mov	r2, r0
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	1ad3      	subs	r3, r2, r3
 800029a:	2b0a      	cmp	r3, #10
 800029c:	d90b      	bls.n	80002b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2205      	movs	r2, #5
 80002ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002b2:	2301      	movs	r3, #1
 80002b4:	e0c4      	b.n	8000440 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	f003 0302 	and.w	r3, r3, #2
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1e5      	bne.n	8000290 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	6812      	ldr	r2, [r2, #0]
 80002cc:	6812      	ldr	r2, [r2, #0]
 80002ce:	f042 0201 	orr.w	r2, r2, #1
 80002d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80002d4:	f7ff ff92 	bl	80001fc <HAL_GetTick>
 80002d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80002da:	e012      	b.n	8000302 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002dc:	f7ff ff8e 	bl	80001fc <HAL_GetTick>
 80002e0:	4602      	mov	r2, r0
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	2b0a      	cmp	r3, #10
 80002e8:	d90b      	bls.n	8000302 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2205      	movs	r2, #5
 80002fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002fe:	2301      	movs	r3, #1
 8000300:	e09e      	b.n	8000440 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	f003 0301 	and.w	r3, r3, #1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d0e5      	beq.n	80002dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	7e1b      	ldrb	r3, [r3, #24]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d108      	bne.n	800032a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	6812      	ldr	r2, [r2, #0]
 8000320:	6812      	ldr	r2, [r2, #0]
 8000322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	e007      	b.n	800033a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	6812      	ldr	r2, [r2, #0]
 8000332:	6812      	ldr	r2, [r2, #0]
 8000334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000338:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	7e5b      	ldrb	r3, [r3, #25]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d108      	bne.n	8000354 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	6812      	ldr	r2, [r2, #0]
 800034a:	6812      	ldr	r2, [r2, #0]
 800034c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	e007      	b.n	8000364 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	6812      	ldr	r2, [r2, #0]
 800035c:	6812      	ldr	r2, [r2, #0]
 800035e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000362:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	7e9b      	ldrb	r3, [r3, #26]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d108      	bne.n	800037e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	6812      	ldr	r2, [r2, #0]
 8000374:	6812      	ldr	r2, [r2, #0]
 8000376:	f042 0220 	orr.w	r2, r2, #32
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	e007      	b.n	800038e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	6812      	ldr	r2, [r2, #0]
 8000386:	6812      	ldr	r2, [r2, #0]
 8000388:	f022 0220 	bic.w	r2, r2, #32
 800038c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	7edb      	ldrb	r3, [r3, #27]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d108      	bne.n	80003a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	6812      	ldr	r2, [r2, #0]
 800039e:	6812      	ldr	r2, [r2, #0]
 80003a0:	f022 0210 	bic.w	r2, r2, #16
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	e007      	b.n	80003b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	6812      	ldr	r2, [r2, #0]
 80003b0:	6812      	ldr	r2, [r2, #0]
 80003b2:	f042 0210 	orr.w	r2, r2, #16
 80003b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	7f1b      	ldrb	r3, [r3, #28]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d108      	bne.n	80003d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	6812      	ldr	r2, [r2, #0]
 80003c8:	6812      	ldr	r2, [r2, #0]
 80003ca:	f042 0208 	orr.w	r2, r2, #8
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	e007      	b.n	80003e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	6812      	ldr	r2, [r2, #0]
 80003da:	6812      	ldr	r2, [r2, #0]
 80003dc:	f022 0208 	bic.w	r2, r2, #8
 80003e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	7f5b      	ldrb	r3, [r3, #29]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d108      	bne.n	80003fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	6812      	ldr	r2, [r2, #0]
 80003f2:	6812      	ldr	r2, [r2, #0]
 80003f4:	f042 0204 	orr.w	r2, r2, #4
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	e007      	b.n	800040c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	6812      	ldr	r2, [r2, #0]
 8000404:	6812      	ldr	r2, [r2, #0]
 8000406:	f022 0204 	bic.w	r2, r2, #4
 800040a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	6891      	ldr	r1, [r2, #8]
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	68d2      	ldr	r2, [r2, #12]
 8000418:	4311      	orrs	r1, r2
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	6912      	ldr	r2, [r2, #16]
 800041e:	4311      	orrs	r1, r2
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	6952      	ldr	r2, [r2, #20]
 8000424:	4311      	orrs	r1, r2
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	6852      	ldr	r2, [r2, #4]
 800042a:	3a01      	subs	r2, #1
 800042c:	430a      	orrs	r2, r1
 800042e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2200      	movs	r2, #0
 8000434:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800043e:	2300      	movs	r3, #0
}
 8000440:	4618      	mov	r0, r3
 8000442:	3710      	adds	r7, #16
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000448:	b480      	push	{r7}
 800044a:	b087      	sub	sp, #28
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800045e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000460:	7cfb      	ldrb	r3, [r7, #19]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d003      	beq.n	800046e <HAL_CAN_ConfigFilter+0x26>
 8000466:	7cfb      	ldrb	r3, [r7, #19]
 8000468:	2b02      	cmp	r3, #2
 800046a:	f040 80aa 	bne.w	80005c2 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000474:	f043 0201 	orr.w	r2, r3, #1
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f003 031f 	and.w	r3, r3, #31
 8000486:	2201      	movs	r2, #1
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	43db      	mvns	r3, r3
 8000498:	401a      	ands	r2, r3
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	69db      	ldr	r3, [r3, #28]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d123      	bne.n	80004f0 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	43db      	mvns	r3, r3
 80004b2:	401a      	ands	r2, r3
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80004ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	3248      	adds	r2, #72	; 0x48
 80004d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80004d8:	683a      	ldr	r2, [r7, #0]
 80004da:	6892      	ldr	r2, [r2, #8]
 80004dc:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80004de:	683a      	ldr	r2, [r7, #0]
 80004e0:	6812      	ldr	r2, [r2, #0]
 80004e2:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80004e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80004e6:	6979      	ldr	r1, [r7, #20]
 80004e8:	3348      	adds	r3, #72	; 0x48
 80004ea:	00db      	lsls	r3, r3, #3
 80004ec:	440b      	add	r3, r1
 80004ee:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	69db      	ldr	r3, [r3, #28]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d122      	bne.n	800053e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	431a      	orrs	r2, r3
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000518:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	3248      	adds	r2, #72	; 0x48
 800051e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000526:	683a      	ldr	r2, [r7, #0]
 8000528:	6892      	ldr	r2, [r2, #8]
 800052a:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800052c:	683a      	ldr	r2, [r7, #0]
 800052e:	68d2      	ldr	r2, [r2, #12]
 8000530:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000532:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000534:	6979      	ldr	r1, [r7, #20]
 8000536:	3348      	adds	r3, #72	; 0x48
 8000538:	00db      	lsls	r3, r3, #3
 800053a:	440b      	add	r3, r1
 800053c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d109      	bne.n	800055a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	43db      	mvns	r3, r3
 8000550:	401a      	ands	r2, r3
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000558:	e007      	b.n	800056a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	431a      	orrs	r2, r3
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	691b      	ldr	r3, [r3, #16]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d109      	bne.n	8000586 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	43db      	mvns	r3, r3
 800057c:	401a      	ands	r2, r3
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000584:	e007      	b.n	8000596 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	431a      	orrs	r2, r3
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	6a1b      	ldr	r3, [r3, #32]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d107      	bne.n	80005ae <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	431a      	orrs	r2, r3
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005b4:	f023 0201 	bic.w	r2, r3, #1
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80005be:	2300      	movs	r3, #0
 80005c0:	e006      	b.n	80005d0 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
  }
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	371c      	adds	r7, #28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr

080005da <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b084      	sub	sp, #16
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d12e      	bne.n	800064c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2202      	movs	r2, #2
 80005f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	6812      	ldr	r2, [r2, #0]
 80005fe:	6812      	ldr	r2, [r2, #0]
 8000600:	f022 0201 	bic.w	r2, r2, #1
 8000604:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000606:	f7ff fdf9 	bl	80001fc <HAL_GetTick>
 800060a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800060c:	e012      	b.n	8000634 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800060e:	f7ff fdf5 	bl	80001fc <HAL_GetTick>
 8000612:	4602      	mov	r2, r0
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	2b0a      	cmp	r3, #10
 800061a:	d90b      	bls.n	8000634 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000620:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2205      	movs	r2, #5
 800062c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000630:	2301      	movs	r3, #1
 8000632:	e012      	b.n	800065a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1e5      	bne.n	800060e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2200      	movs	r2, #0
 8000646:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000648:	2300      	movs	r3, #0
 800064a:	e006      	b.n	800065a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000650:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000658:	2301      	movs	r3, #1
  }
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000662:	b480      	push	{r7}
 8000664:	b089      	sub	sp, #36	; 0x24
 8000666:	af00      	add	r7, sp, #0
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	607a      	str	r2, [r7, #4]
 800066e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000676:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000680:	7ffb      	ldrb	r3, [r7, #31]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d003      	beq.n	800068e <HAL_CAN_AddTxMessage+0x2c>
 8000686:	7ffb      	ldrb	r3, [r7, #31]
 8000688:	2b02      	cmp	r3, #2
 800068a:	f040 80b4 	bne.w	80007f6 <HAL_CAN_AddTxMessage+0x194>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000694:	2b00      	cmp	r3, #0
 8000696:	d10a      	bne.n	80006ae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d105      	bne.n	80006ae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80006a2:	69bb      	ldr	r3, [r7, #24]
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	f000 809c 	beq.w	80007e6 <HAL_CAN_AddTxMessage+0x184>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	0e1b      	lsrs	r3, r3, #24
 80006b2:	f003 0303 	and.w	r3, r3, #3
 80006b6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d907      	bls.n	80006ce <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
 80006cc:	e09a      	b.n	8000804 <HAL_CAN_AddTxMessage+0x1a2>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80006ce:	2201      	movs	r2, #1
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	409a      	lsls	r2, r3
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d10d      	bne.n	80006fc <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	6819      	ldr	r1, [r3, #0]
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80006ee:	431a      	orrs	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	3318      	adds	r3, #24
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	440b      	add	r3, r1
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	e00f      	b.n	800071c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6819      	ldr	r1, [r3, #0]
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800070a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	68db      	ldr	r3, [r3, #12]
                                                           pHeader->IDE |
 8000710:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	3318      	adds	r3, #24
 8000716:	011b      	lsls	r3, r3, #4
 8000718:	440b      	add	r3, r1
 800071a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	6819      	ldr	r1, [r3, #0]
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	691a      	ldr	r2, [r3, #16]
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	3318      	adds	r3, #24
 8000728:	011b      	lsls	r3, r3, #4
 800072a:	440b      	add	r3, r1
 800072c:	3304      	adds	r3, #4
 800072e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	7d1b      	ldrb	r3, [r3, #20]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d111      	bne.n	800075c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	6819      	ldr	r1, [r3, #0]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	3318      	adds	r3, #24
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	4413      	add	r3, r2
 8000748:	3304      	adds	r3, #4
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	3318      	adds	r3, #24
 8000754:	011b      	lsls	r3, r3, #4
 8000756:	440b      	add	r3, r1
 8000758:	3304      	adds	r3, #4
 800075a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	6819      	ldr	r1, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3307      	adds	r3, #7
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	061a      	lsls	r2, r3, #24
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3306      	adds	r3, #6
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	041b      	lsls	r3, r3, #16
 8000770:	431a      	orrs	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	3305      	adds	r3, #5
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	4313      	orrs	r3, r2
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	3204      	adds	r2, #4
 8000780:	7812      	ldrb	r2, [r2, #0]
 8000782:	431a      	orrs	r2, r3
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	011b      	lsls	r3, r3, #4
 8000788:	440b      	add	r3, r1
 800078a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800078e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	6819      	ldr	r1, [r3, #0]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3303      	adds	r3, #3
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	061a      	lsls	r2, r3, #24
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3302      	adds	r3, #2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	041b      	lsls	r3, r3, #16
 80007a4:	431a      	orrs	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	3301      	adds	r3, #1
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	4313      	orrs	r3, r2
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	7812      	ldrb	r2, [r2, #0]
 80007b4:	431a      	orrs	r2, r3
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	440b      	add	r3, r1
 80007bc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80007c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	6819      	ldr	r1, [r3, #0]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	3318      	adds	r3, #24
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	4413      	add	r3, r2
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f043 0201 	orr.w	r2, r3, #1
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	3318      	adds	r3, #24
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	440b      	add	r3, r1
 80007e0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e00e      	b.n	8000804 <HAL_CAN_AddTxMessage+0x1a2>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e006      	b.n	8000804 <HAL_CAN_AddTxMessage+0x1a2>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
  }
}
 8000804:	4618      	mov	r0, r3
 8000806:	3724      	adds	r7, #36	; 0x24
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr

0800080e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800080e:	b480      	push	{r7}
 8000810:	b085      	sub	sp, #20
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
 8000816:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800081e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d002      	beq.n	800082c <HAL_CAN_ActivateNotification+0x1e>
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	2b02      	cmp	r3, #2
 800082a:	d109      	bne.n	8000840 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	6812      	ldr	r2, [r2, #0]
 8000834:	6951      	ldr	r1, [r2, #20]
 8000836:	683a      	ldr	r2, [r7, #0]
 8000838:	430a      	orrs	r2, r1
 800083a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800083c:	2300      	movs	r3, #0
 800083e:	e006      	b.n	800084e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000844:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800084c:	2301      	movs	r3, #1
  }
}
 800084e:	4618      	mov	r0, r3
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	691b      	ldr	r3, [r3, #16]
 800088a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000894:	6a3b      	ldr	r3, [r7, #32]
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	2b00      	cmp	r3, #0
 800089c:	d07c      	beq.n	8000998 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d023      	beq.n	80008f0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2201      	movs	r2, #1
 80008ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d003      	beq.n	80008c2 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f000 f97d 	bl	8000bba <HAL_CAN_TxMailbox0CompleteCallback>
 80008c0:	e016      	b.n	80008f0 <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80008c2:	69bb      	ldr	r3, [r7, #24]
 80008c4:	f003 0304 	and.w	r3, r3, #4
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d004      	beq.n	80008d6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80008cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
 80008d4:	e00c      	b.n	80008f0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	f003 0308 	and.w	r3, r3, #8
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d004      	beq.n	80008ea <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
 80008e8:	e002      	b.n	80008f0 <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f000 f980 	bl	8000bf0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d024      	beq.n	8000944 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000902:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800090a:	2b00      	cmp	r3, #0
 800090c:	d003      	beq.n	8000916 <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f000 f95c 	bl	8000bcc <HAL_CAN_TxMailbox1CompleteCallback>
 8000914:	e016      	b.n	8000944 <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800091c:	2b00      	cmp	r3, #0
 800091e:	d004      	beq.n	800092a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000922:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
 8000928:	e00c      	b.n	8000944 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000930:	2b00      	cmp	r3, #0
 8000932:	d004      	beq.n	800093e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
 800093c:	e002      	b.n	8000944 <HAL_CAN_IRQHandler+0xec>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 f95f 	bl	8000c02 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800094a:	2b00      	cmp	r3, #0
 800094c:	d024      	beq.n	8000998 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000956:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f93b 	bl	8000bde <HAL_CAN_TxMailbox2CompleteCallback>
 8000968:	e016      	b.n	8000998 <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000970:	2b00      	cmp	r3, #0
 8000972:	d004      	beq.n	800097e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
 800097c:	e00c      	b.n	8000998 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000984:	2b00      	cmp	r3, #0
 8000986:	d004      	beq.n	8000992 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
 8000990:	e002      	b.n	8000998 <HAL_CAN_IRQHandler+0x140>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f93e 	bl	8000c14 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000998:	6a3b      	ldr	r3, [r7, #32]
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d00c      	beq.n	80009bc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	f003 0310 	and.w	r3, r3, #16
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d007      	beq.n	80009bc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80009ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2210      	movs	r2, #16
 80009ba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80009bc:	6a3b      	ldr	r3, [r7, #32]
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d00b      	beq.n	80009de <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	f003 0308 	and.w	r3, r3, #8
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d006      	beq.n	80009de <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2208      	movs	r2, #8
 80009d6:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 f92d 	bl	8000c38 <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80009de:	6a3b      	ldr	r3, [r7, #32]
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d009      	beq.n	80009fc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	f003 0303 	and.w	r3, r3, #3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d002      	beq.n	80009fc <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f000 f915 	bl	8000c26 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80009fc:	6a3b      	ldr	r3, [r7, #32]
 80009fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d00c      	beq.n	8000a20 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	f003 0310 	and.w	r3, r3, #16
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d007      	beq.n	8000a20 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2210      	movs	r2, #16
 8000a1e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000a20:	6a3b      	ldr	r3, [r7, #32]
 8000a22:	f003 0320 	and.w	r3, r3, #32
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d00b      	beq.n	8000a42 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	f003 0308 	and.w	r3, r3, #8
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d006      	beq.n	8000a42 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2208      	movs	r2, #8
 8000a3a:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f000 f90d 	bl	8000c5c <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000a42:	6a3b      	ldr	r3, [r7, #32]
 8000a44:	f003 0310 	and.w	r3, r3, #16
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d009      	beq.n	8000a60 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	691b      	ldr	r3, [r3, #16]
 8000a52:	f003 0303 	and.w	r3, r3, #3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d002      	beq.n	8000a60 <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f000 f8f5 	bl	8000c4a <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000a60:	6a3b      	ldr	r3, [r7, #32]
 8000a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d00b      	beq.n	8000a82 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	f003 0310 	and.w	r3, r3, #16
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d006      	beq.n	8000a82 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2210      	movs	r2, #16
 8000a7a:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f000 f8f6 	bl	8000c6e <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000a82:	6a3b      	ldr	r3, [r7, #32]
 8000a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00b      	beq.n	8000aa4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	f003 0308 	and.w	r3, r3, #8
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d006      	beq.n	8000aa4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2208      	movs	r2, #8
 8000a9c:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 f8ee 	bl	8000c80 <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
 8000aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d075      	beq.n	8000b9a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	f003 0304 	and.w	r3, r3, #4
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d06c      	beq.n	8000b92 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000ab8:	6a3b      	ldr	r3, [r7, #32]
 8000aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d008      	beq.n	8000ad4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d003      	beq.n	8000ad4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000ad4:	6a3b      	ldr	r3, [r7, #32]
 8000ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d008      	beq.n	8000af0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d003      	beq.n	8000af0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	f043 0302 	orr.w	r3, r3, #2
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000af0:	6a3b      	ldr	r3, [r7, #32]
 8000af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d008      	beq.n	8000b0c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d03d      	beq.n	8000b92 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d038      	beq.n	8000b92 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000b26:	2b30      	cmp	r3, #48	; 0x30
 8000b28:	d017      	beq.n	8000b5a <HAL_CAN_IRQHandler+0x302>
 8000b2a:	2b30      	cmp	r3, #48	; 0x30
 8000b2c:	d804      	bhi.n	8000b38 <HAL_CAN_IRQHandler+0x2e0>
 8000b2e:	2b10      	cmp	r3, #16
 8000b30:	d009      	beq.n	8000b46 <HAL_CAN_IRQHandler+0x2ee>
 8000b32:	2b20      	cmp	r3, #32
 8000b34:	d00c      	beq.n	8000b50 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000b36:	e024      	b.n	8000b82 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000b38:	2b50      	cmp	r3, #80	; 0x50
 8000b3a:	d018      	beq.n	8000b6e <HAL_CAN_IRQHandler+0x316>
 8000b3c:	2b60      	cmp	r3, #96	; 0x60
 8000b3e:	d01b      	beq.n	8000b78 <HAL_CAN_IRQHandler+0x320>
 8000b40:	2b40      	cmp	r3, #64	; 0x40
 8000b42:	d00f      	beq.n	8000b64 <HAL_CAN_IRQHandler+0x30c>
            break;
 8000b44:	e01d      	b.n	8000b82 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b48:	f043 0308 	orr.w	r3, r3, #8
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b4e:	e018      	b.n	8000b82 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b52:	f043 0310 	orr.w	r3, r3, #16
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b58:	e013      	b.n	8000b82 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	f043 0320 	orr.w	r3, r3, #32
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b62:	e00e      	b.n	8000b82 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b6c:	e009      	b.n	8000b82 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b76:	e004      	b.n	8000b82 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b80:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	6812      	ldr	r2, [r2, #0]
 8000b8a:	6992      	ldr	r2, [r2, #24]
 8000b8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000b90:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2204      	movs	r2, #4
 8000b98:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d008      	beq.n	8000bb2 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f000 f870 	bl	8000c92 <HAL_CAN_ErrorCallback>
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr

08000bde <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr

08000c02 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr

08000c26 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr

08000c92 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <NVIC_SetPriorityGrouping+0x44>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60d3      	str	r3, [r2, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d12:	4908      	ldr	r1, [pc, #32]	; (8000d34 <NVIC_EnableIRQ+0x2c>)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	095b      	lsrs	r3, r3, #5
 8000d1a:	79fa      	ldrb	r2, [r7, #7]
 8000d1c:	f002 021f 	and.w	r2, r2, #31
 8000d20:	2001      	movs	r0, #1
 8000d22:	fa00 f202 	lsl.w	r2, r0, r2
 8000d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	da0b      	bge.n	8000d64 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	490d      	ldr	r1, [pc, #52]	; (8000d84 <NVIC_SetPriority+0x4c>)
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f003 030f 	and.w	r3, r3, #15
 8000d54:	3b04      	subs	r3, #4
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d62:	e009      	b.n	8000d78 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	4908      	ldr	r1, [pc, #32]	; (8000d88 <NVIC_SetPriority+0x50>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	683a      	ldr	r2, [r7, #0]
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	440b      	add	r3, r1
 8000d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00
 8000d88:	e000e100 	.word	0xe000e100

08000d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f1c3 0307 	rsb	r3, r3, #7
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf28      	it	cs
 8000daa:	2304      	movcs	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d902      	bls.n	8000dbc <NVIC_EncodePriority+0x30>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3b03      	subs	r3, #3
 8000dba:	e000      	b.n	8000dbe <NVIC_EncodePriority+0x32>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	1e5a      	subs	r2, r3, #1
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	401a      	ands	r2, r3
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	1e59      	subs	r1, r3, #1
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dfc:	d301      	bcc.n	8000e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00f      	b.n	8000e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <SysTick_Config+0x40>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e10:	f7ff ff92 	bl	8000d38 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <SysTick_Config+0x40>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1a:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <SysTick_Config+0x40>)
 8000e1c:	2207      	movs	r2, #7
 8000e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	e000e010 	.word	0xe000e010

08000e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ff33 	bl	8000ca4 <NVIC_SetPriorityGrouping>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e58:	f7ff ff48 	bl	8000cec <NVIC_GetPriorityGrouping>
 8000e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	6978      	ldr	r0, [r7, #20]
 8000e64:	f7ff ff92 	bl	8000d8c <NVIC_EncodePriority>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff61 	bl	8000d38 <NVIC_SetPriority>
}
 8000e76:	bf00      	nop
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff3b 	bl	8000d08 <NVIC_EnableIRQ>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ffa2 	bl	8000dec <SysTick_Config>
 8000ea8:	4603      	mov	r3, r0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b08b      	sub	sp, #44	; 0x2c
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed6:	e127      	b.n	8001128 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	f040 8116 	bne.w	8001122 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b12      	cmp	r3, #18
 8000efc:	d034      	beq.n	8000f68 <HAL_GPIO_Init+0xb4>
 8000efe:	2b12      	cmp	r3, #18
 8000f00:	d80d      	bhi.n	8000f1e <HAL_GPIO_Init+0x6a>
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d02b      	beq.n	8000f5e <HAL_GPIO_Init+0xaa>
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d804      	bhi.n	8000f14 <HAL_GPIO_Init+0x60>
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d031      	beq.n	8000f72 <HAL_GPIO_Init+0xbe>
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d01c      	beq.n	8000f4c <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f12:	e048      	b.n	8000fa6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d043      	beq.n	8000fa0 <HAL_GPIO_Init+0xec>
 8000f18:	2b11      	cmp	r3, #17
 8000f1a:	d01b      	beq.n	8000f54 <HAL_GPIO_Init+0xa0>
          break;
 8000f1c:	e043      	b.n	8000fa6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000f1e:	4a87      	ldr	r2, [pc, #540]	; (800113c <HAL_GPIO_Init+0x288>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d026      	beq.n	8000f72 <HAL_GPIO_Init+0xbe>
 8000f24:	4a85      	ldr	r2, [pc, #532]	; (800113c <HAL_GPIO_Init+0x288>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d806      	bhi.n	8000f38 <HAL_GPIO_Init+0x84>
 8000f2a:	4a85      	ldr	r2, [pc, #532]	; (8001140 <HAL_GPIO_Init+0x28c>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d020      	beq.n	8000f72 <HAL_GPIO_Init+0xbe>
 8000f30:	4a84      	ldr	r2, [pc, #528]	; (8001144 <HAL_GPIO_Init+0x290>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d01d      	beq.n	8000f72 <HAL_GPIO_Init+0xbe>
          break;
 8000f36:	e036      	b.n	8000fa6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000f38:	4a83      	ldr	r2, [pc, #524]	; (8001148 <HAL_GPIO_Init+0x294>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d019      	beq.n	8000f72 <HAL_GPIO_Init+0xbe>
 8000f3e:	4a83      	ldr	r2, [pc, #524]	; (800114c <HAL_GPIO_Init+0x298>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d016      	beq.n	8000f72 <HAL_GPIO_Init+0xbe>
 8000f44:	4a82      	ldr	r2, [pc, #520]	; (8001150 <HAL_GPIO_Init+0x29c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d013      	beq.n	8000f72 <HAL_GPIO_Init+0xbe>
          break;
 8000f4a:	e02c      	b.n	8000fa6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	623b      	str	r3, [r7, #32]
          break;
 8000f52:	e028      	b.n	8000fa6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	623b      	str	r3, [r7, #32]
          break;
 8000f5c:	e023      	b.n	8000fa6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	3308      	adds	r3, #8
 8000f64:	623b      	str	r3, [r7, #32]
          break;
 8000f66:	e01e      	b.n	8000fa6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	330c      	adds	r3, #12
 8000f6e:	623b      	str	r3, [r7, #32]
          break;
 8000f70:	e019      	b.n	8000fa6 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d102      	bne.n	8000f80 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	623b      	str	r3, [r7, #32]
          break;
 8000f7e:	e012      	b.n	8000fa6 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d105      	bne.n	8000f94 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f88:	2308      	movs	r3, #8
 8000f8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	611a      	str	r2, [r3, #16]
          break;
 8000f92:	e008      	b.n	8000fa6 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f94:	2308      	movs	r3, #8
 8000f96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69fa      	ldr	r2, [r7, #28]
 8000f9c:	615a      	str	r2, [r3, #20]
          break;
 8000f9e:	e002      	b.n	8000fa6 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
          break;
 8000fa4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	2bff      	cmp	r3, #255	; 0xff
 8000faa:	d801      	bhi.n	8000fb0 <HAL_GPIO_Init+0xfc>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	e001      	b.n	8000fb4 <HAL_GPIO_Init+0x100>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3304      	adds	r3, #4
 8000fb4:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	2bff      	cmp	r3, #255	; 0xff
 8000fba:	d802      	bhi.n	8000fc2 <HAL_GPIO_Init+0x10e>
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	e002      	b.n	8000fc8 <HAL_GPIO_Init+0x114>
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	3b08      	subs	r3, #8
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	210f      	movs	r1, #15
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	401a      	ands	r2, r3
 8000fda:	6a39      	ldr	r1, [r7, #32]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 8096 	beq.w	8001122 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff6:	4a57      	ldr	r2, [pc, #348]	; (8001154 <HAL_GPIO_Init+0x2a0>)
 8000ff8:	4b56      	ldr	r3, [pc, #344]	; (8001154 <HAL_GPIO_Init+0x2a0>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6193      	str	r3, [r2, #24]
 8001002:	4b54      	ldr	r3, [pc, #336]	; (8001154 <HAL_GPIO_Init+0x2a0>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800100e:	4a52      	ldr	r2, [pc, #328]	; (8001158 <HAL_GPIO_Init+0x2a4>)
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	3302      	adds	r3, #2
 8001016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101a:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	220f      	movs	r2, #15
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	4013      	ands	r3, r2
 8001030:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a49      	ldr	r2, [pc, #292]	; (800115c <HAL_GPIO_Init+0x2a8>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d013      	beq.n	8001062 <HAL_GPIO_Init+0x1ae>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a48      	ldr	r2, [pc, #288]	; (8001160 <HAL_GPIO_Init+0x2ac>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d00d      	beq.n	800105e <HAL_GPIO_Init+0x1aa>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a47      	ldr	r2, [pc, #284]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d007      	beq.n	800105a <HAL_GPIO_Init+0x1a6>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a46      	ldr	r2, [pc, #280]	; (8001168 <HAL_GPIO_Init+0x2b4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d101      	bne.n	8001056 <HAL_GPIO_Init+0x1a2>
 8001052:	2303      	movs	r3, #3
 8001054:	e006      	b.n	8001064 <HAL_GPIO_Init+0x1b0>
 8001056:	2304      	movs	r3, #4
 8001058:	e004      	b.n	8001064 <HAL_GPIO_Init+0x1b0>
 800105a:	2302      	movs	r3, #2
 800105c:	e002      	b.n	8001064 <HAL_GPIO_Init+0x1b0>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <HAL_GPIO_Init+0x1b0>
 8001062:	2300      	movs	r3, #0
 8001064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001066:	f002 0203 	and.w	r2, r2, #3
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	4093      	lsls	r3, r2
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4313      	orrs	r3, r2
 8001072:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001074:	4938      	ldr	r1, [pc, #224]	; (8001158 <HAL_GPIO_Init+0x2a4>)
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3302      	adds	r3, #2
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d006      	beq.n	800109c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800108e:	4937      	ldr	r1, [pc, #220]	; (800116c <HAL_GPIO_Init+0x2b8>)
 8001090:	4b36      	ldr	r3, [pc, #216]	; (800116c <HAL_GPIO_Init+0x2b8>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	600b      	str	r3, [r1, #0]
 800109a:	e006      	b.n	80010aa <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800109c:	4933      	ldr	r1, [pc, #204]	; (800116c <HAL_GPIO_Init+0x2b8>)
 800109e:	4b33      	ldr	r3, [pc, #204]	; (800116c <HAL_GPIO_Init+0x2b8>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	4013      	ands	r3, r2
 80010a8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d006      	beq.n	80010c4 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010b6:	492d      	ldr	r1, [pc, #180]	; (800116c <HAL_GPIO_Init+0x2b8>)
 80010b8:	4b2c      	ldr	r3, [pc, #176]	; (800116c <HAL_GPIO_Init+0x2b8>)
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	604b      	str	r3, [r1, #4]
 80010c2:	e006      	b.n	80010d2 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010c4:	4929      	ldr	r1, [pc, #164]	; (800116c <HAL_GPIO_Init+0x2b8>)
 80010c6:	4b29      	ldr	r3, [pc, #164]	; (800116c <HAL_GPIO_Init+0x2b8>)
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	4013      	ands	r3, r2
 80010d0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d006      	beq.n	80010ec <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010de:	4923      	ldr	r1, [pc, #140]	; (800116c <HAL_GPIO_Init+0x2b8>)
 80010e0:	4b22      	ldr	r3, [pc, #136]	; (800116c <HAL_GPIO_Init+0x2b8>)
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	608b      	str	r3, [r1, #8]
 80010ea:	e006      	b.n	80010fa <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010ec:	491f      	ldr	r1, [pc, #124]	; (800116c <HAL_GPIO_Init+0x2b8>)
 80010ee:	4b1f      	ldr	r3, [pc, #124]	; (800116c <HAL_GPIO_Init+0x2b8>)
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	4013      	ands	r3, r2
 80010f8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d006      	beq.n	8001114 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001106:	4919      	ldr	r1, [pc, #100]	; (800116c <HAL_GPIO_Init+0x2b8>)
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_GPIO_Init+0x2b8>)
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	60cb      	str	r3, [r1, #12]
 8001112:	e006      	b.n	8001122 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001114:	4915      	ldr	r1, [pc, #84]	; (800116c <HAL_GPIO_Init+0x2b8>)
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_GPIO_Init+0x2b8>)
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	43db      	mvns	r3, r3
 800111e:	4013      	ands	r3, r2
 8001120:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	3301      	adds	r3, #1
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	2b0f      	cmp	r3, #15
 800112c:	f67f aed4 	bls.w	8000ed8 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001130:	bf00      	nop
 8001132:	372c      	adds	r7, #44	; 0x2c
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	10210000 	.word	0x10210000
 8001140:	10110000 	.word	0x10110000
 8001144:	10120000 	.word	0x10120000
 8001148:	10310000 	.word	0x10310000
 800114c:	10320000 	.word	0x10320000
 8001150:	10220000 	.word	0x10220000
 8001154:	40021000 	.word	0x40021000
 8001158:	40010000 	.word	0x40010000
 800115c:	40010800 	.word	0x40010800
 8001160:	40010c00 	.word	0x40010c00
 8001164:	40011000 	.word	0x40011000
 8001168:	40011400 	.word	0x40011400
 800116c:	40010400 	.word	0x40010400

08001170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
 800117c:	4613      	mov	r3, r2
 800117e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800118c:	e003      	b.n	8001196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800118e:	887b      	ldrh	r3, [r7, #2]
 8001190:	041a      	lsls	r2, r3, #16
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	611a      	str	r2, [r3, #16]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	405a      	eors	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	60da      	str	r2, [r3, #12]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
	...

080011c4 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e0e7      	b.n	80013ae <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d106      	bne.n	80011f8 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f001 fe00 	bl	8002df8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2224      	movs	r2, #36	; 0x24
 80011fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6812      	ldr	r2, [r2, #0]
 8001208:	6812      	ldr	r2, [r2, #0]
 800120a:	f022 0201 	bic.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001210:	f000 fcb8 	bl	8001b84 <HAL_RCC_GetPCLK1Freq>
 8001214:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4a67      	ldr	r2, [pc, #412]	; (80013b8 <HAL_I2C_Init+0x1f4>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d807      	bhi.n	8001230 <HAL_I2C_Init+0x6c>
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4a66      	ldr	r2, [pc, #408]	; (80013bc <HAL_I2C_Init+0x1f8>)
 8001224:	4293      	cmp	r3, r2
 8001226:	bf94      	ite	ls
 8001228:	2301      	movls	r3, #1
 800122a:	2300      	movhi	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	e006      	b.n	800123e <HAL_I2C_Init+0x7a>
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4a63      	ldr	r2, [pc, #396]	; (80013c0 <HAL_I2C_Init+0x1fc>)
 8001234:	4293      	cmp	r3, r2
 8001236:	bf94      	ite	ls
 8001238:	2301      	movls	r3, #1
 800123a:	2300      	movhi	r3, #0
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e0b3      	b.n	80013ae <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	4a5e      	ldr	r2, [pc, #376]	; (80013c4 <HAL_I2C_Init+0x200>)
 800124a:	fba2 2303 	umull	r2, r3, r2, r3
 800124e:	0c9b      	lsrs	r3, r3, #18
 8001250:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	4955      	ldr	r1, [pc, #340]	; (80013b8 <HAL_I2C_Init+0x1f4>)
 8001264:	428b      	cmp	r3, r1
 8001266:	d802      	bhi.n	800126e <HAL_I2C_Init+0xaa>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	3301      	adds	r3, #1
 800126c:	e009      	b.n	8001282 <HAL_I2C_Init+0xbe>
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001274:	fb01 f303 	mul.w	r3, r1, r3
 8001278:	4953      	ldr	r1, [pc, #332]	; (80013c8 <HAL_I2C_Init+0x204>)
 800127a:	fba1 1303 	umull	r1, r3, r1, r3
 800127e:	099b      	lsrs	r3, r3, #6
 8001280:	3301      	adds	r3, #1
 8001282:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6819      	ldr	r1, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	4a4a      	ldr	r2, [pc, #296]	; (80013b8 <HAL_I2C_Init+0x1f4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d80d      	bhi.n	80012ae <HAL_I2C_Init+0xea>
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	1e5a      	subs	r2, r3, #1
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a0:	3301      	adds	r3, #1
 80012a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	bf38      	it	cc
 80012aa:	2304      	movcc	r3, #4
 80012ac:	e04f      	b.n	800134e <HAL_I2C_Init+0x18a>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d111      	bne.n	80012da <HAL_I2C_Init+0x116>
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1e58      	subs	r0, r3, #1
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4413      	add	r3, r2
 80012c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c8:	3301      	adds	r3, #1
 80012ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	bf0c      	ite	eq
 80012d2:	2301      	moveq	r3, #1
 80012d4:	2300      	movne	r3, #0
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	e012      	b.n	8001300 <HAL_I2C_Init+0x13c>
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1e58      	subs	r0, r3, #1
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	009a      	lsls	r2, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80012f0:	3301      	adds	r3, #1
 80012f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	bf0c      	ite	eq
 80012fa:	2301      	moveq	r3, #1
 80012fc:	2300      	movne	r3, #0
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <HAL_I2C_Init+0x144>
 8001304:	2301      	movs	r3, #1
 8001306:	e022      	b.n	800134e <HAL_I2C_Init+0x18a>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d10e      	bne.n	800132e <HAL_I2C_Init+0x16a>
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	1e58      	subs	r0, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001322:	3301      	adds	r3, #1
 8001324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800132c:	e00f      	b.n	800134e <HAL_I2C_Init+0x18a>
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1e58      	subs	r0, r3, #1
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	009a      	lsls	r2, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	fbb0 f3f3 	udiv	r3, r0, r3
 8001344:	3301      	adds	r3, #1
 8001346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800134a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800134e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	69d1      	ldr	r1, [r2, #28]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	6a12      	ldr	r2, [r2, #32]
 800135c:	430a      	orrs	r2, r1
 800135e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6911      	ldr	r1, [r2, #16]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	68d2      	ldr	r2, [r2, #12]
 800136c:	430a      	orrs	r2, r1
 800136e:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6951      	ldr	r1, [r2, #20]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6992      	ldr	r2, [r2, #24]
 800137c:	430a      	orrs	r2, r1
 800137e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	f042 0201 	orr.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2220      	movs	r2, #32
 800139a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	000186a0 	.word	0x000186a0
 80013bc:	001e847f 	.word	0x001e847f
 80013c0:	003d08ff 	.word	0x003d08ff
 80013c4:	431bde83 	.word	0x431bde83
 80013c8:	10624dd3 	.word	0x10624dd3

080013cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 8087 	beq.w	80014f4 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013e6:	4b92      	ldr	r3, [pc, #584]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d00c      	beq.n	800140c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013f2:	4b8f      	ldr	r3, [pc, #572]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d112      	bne.n	8001424 <HAL_RCC_OscConfig+0x58>
 80013fe:	4b8c      	ldr	r3, [pc, #560]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140a:	d10b      	bne.n	8001424 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140c:	4b88      	ldr	r3, [pc, #544]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d06c      	beq.n	80014f2 <HAL_RCC_OscConfig+0x126>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d168      	bne.n	80014f2 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e22d      	b.n	8001880 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142c:	d106      	bne.n	800143c <HAL_RCC_OscConfig+0x70>
 800142e:	4a80      	ldr	r2, [pc, #512]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 8001430:	4b7f      	ldr	r3, [pc, #508]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e02e      	b.n	800149a <HAL_RCC_OscConfig+0xce>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10c      	bne.n	800145e <HAL_RCC_OscConfig+0x92>
 8001444:	4a7a      	ldr	r2, [pc, #488]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 8001446:	4b7a      	ldr	r3, [pc, #488]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4a77      	ldr	r2, [pc, #476]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 8001452:	4b77      	ldr	r3, [pc, #476]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	e01d      	b.n	800149a <HAL_RCC_OscConfig+0xce>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001466:	d10c      	bne.n	8001482 <HAL_RCC_OscConfig+0xb6>
 8001468:	4a71      	ldr	r2, [pc, #452]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 800146a:	4b71      	ldr	r3, [pc, #452]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4a6e      	ldr	r2, [pc, #440]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 8001476:	4b6e      	ldr	r3, [pc, #440]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	e00b      	b.n	800149a <HAL_RCC_OscConfig+0xce>
 8001482:	4a6b      	ldr	r2, [pc, #428]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 8001484:	4b6a      	ldr	r3, [pc, #424]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4a68      	ldr	r2, [pc, #416]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 8001490:	4b67      	ldr	r3, [pc, #412]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001498:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d013      	beq.n	80014ca <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a2:	f7fe feab 	bl	80001fc <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014aa:	f7fe fea7 	bl	80001fc <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b64      	cmp	r3, #100	; 0x64
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e1e1      	b.n	8001880 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014bc:	4b5c      	ldr	r3, [pc, #368]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0xde>
 80014c8:	e014      	b.n	80014f4 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ca:	f7fe fe97 	bl	80001fc <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014d2:	f7fe fe93 	bl	80001fc <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b64      	cmp	r3, #100	; 0x64
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e1cd      	b.n	8001880 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e4:	4b52      	ldr	r3, [pc, #328]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f0      	bne.n	80014d2 <HAL_RCC_OscConfig+0x106>
 80014f0:	e000      	b.n	80014f4 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d063      	beq.n	80015c8 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001500:	4b4b      	ldr	r3, [pc, #300]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 030c 	and.w	r3, r3, #12
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00b      	beq.n	8001524 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800150c:	4b48      	ldr	r3, [pc, #288]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	2b08      	cmp	r3, #8
 8001516:	d11c      	bne.n	8001552 <HAL_RCC_OscConfig+0x186>
 8001518:	4b45      	ldr	r3, [pc, #276]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d116      	bne.n	8001552 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001524:	4b42      	ldr	r3, [pc, #264]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <HAL_RCC_OscConfig+0x170>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d001      	beq.n	800153c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e1a1      	b.n	8001880 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153c:	493c      	ldr	r1, [pc, #240]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 800153e:	4b3c      	ldr	r3, [pc, #240]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4313      	orrs	r3, r2
 800154e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001550:	e03a      	b.n	80015c8 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d020      	beq.n	800159c <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800155a:	4b36      	ldr	r3, [pc, #216]	; (8001634 <HAL_RCC_OscConfig+0x268>)
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7fe fe4c 	bl	80001fc <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001568:	f7fe fe48 	bl	80001fc <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e182      	b.n	8001880 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157a:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001586:	492a      	ldr	r1, [pc, #168]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 8001588:	4b29      	ldr	r3, [pc, #164]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
 800159a:	e015      	b.n	80015c8 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800159c:	4b25      	ldr	r3, [pc, #148]	; (8001634 <HAL_RCC_OscConfig+0x268>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a2:	f7fe fe2b 	bl	80001fc <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015aa:	f7fe fe27 	bl	80001fc <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e161      	b.n	8001880 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f0      	bne.n	80015aa <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d039      	beq.n	8001648 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d019      	beq.n	8001610 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 80015de:	2201      	movs	r2, #1
 80015e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e2:	f7fe fe0b 	bl	80001fc <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ea:	f7fe fe07 	bl	80001fc <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e141      	b.n	8001880 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_RCC_OscConfig+0x264>)
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001608:	2001      	movs	r0, #1
 800160a:	f000 fae3 	bl	8001bd4 <RCC_Delay>
 800160e:	e01b      	b.n	8001648 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7fe fdf1 	bl	80001fc <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800161c:	e00e      	b.n	800163c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800161e:	f7fe fded 	bl	80001fc <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d907      	bls.n	800163c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e127      	b.n	8001880 <HAL_RCC_OscConfig+0x4b4>
 8001630:	40021000 	.word	0x40021000
 8001634:	42420000 	.word	0x42420000
 8001638:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163c:	4b92      	ldr	r3, [pc, #584]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1ea      	bne.n	800161e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80a6 	beq.w	80017a2 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165a:	4b8b      	ldr	r3, [pc, #556]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10d      	bne.n	8001682 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	4a88      	ldr	r2, [pc, #544]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 8001668:	4b87      	ldr	r3, [pc, #540]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001670:	61d3      	str	r3, [r2, #28]
 8001672:	4b85      	ldr	r3, [pc, #532]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800167e:	2301      	movs	r3, #1
 8001680:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001682:	4b82      	ldr	r3, [pc, #520]	; (800188c <HAL_RCC_OscConfig+0x4c0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d118      	bne.n	80016c0 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168e:	4a7f      	ldr	r2, [pc, #508]	; (800188c <HAL_RCC_OscConfig+0x4c0>)
 8001690:	4b7e      	ldr	r3, [pc, #504]	; (800188c <HAL_RCC_OscConfig+0x4c0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169a:	f7fe fdaf 	bl	80001fc <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a2:	f7fe fdab 	bl	80001fc <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b64      	cmp	r3, #100	; 0x64
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e0e5      	b.n	8001880 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b4:	4b75      	ldr	r3, [pc, #468]	; (800188c <HAL_RCC_OscConfig+0x4c0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x30a>
 80016c8:	4a6f      	ldr	r2, [pc, #444]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 80016ca:	4b6f      	ldr	r3, [pc, #444]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6213      	str	r3, [r2, #32]
 80016d4:	e02d      	b.n	8001732 <HAL_RCC_OscConfig+0x366>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x32c>
 80016de:	4a6a      	ldr	r2, [pc, #424]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 80016e0:	4b69      	ldr	r3, [pc, #420]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6213      	str	r3, [r2, #32]
 80016ea:	4a67      	ldr	r2, [pc, #412]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 80016ec:	4b66      	ldr	r3, [pc, #408]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	f023 0304 	bic.w	r3, r3, #4
 80016f4:	6213      	str	r3, [r2, #32]
 80016f6:	e01c      	b.n	8001732 <HAL_RCC_OscConfig+0x366>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b05      	cmp	r3, #5
 80016fe:	d10c      	bne.n	800171a <HAL_RCC_OscConfig+0x34e>
 8001700:	4a61      	ldr	r2, [pc, #388]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 8001702:	4b61      	ldr	r3, [pc, #388]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	6213      	str	r3, [r2, #32]
 800170c:	4a5e      	ldr	r2, [pc, #376]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 800170e:	4b5e      	ldr	r3, [pc, #376]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6213      	str	r3, [r2, #32]
 8001718:	e00b      	b.n	8001732 <HAL_RCC_OscConfig+0x366>
 800171a:	4a5b      	ldr	r2, [pc, #364]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 800171c:	4b5a      	ldr	r3, [pc, #360]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	6213      	str	r3, [r2, #32]
 8001726:	4a58      	ldr	r2, [pc, #352]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 8001728:	4b57      	ldr	r3, [pc, #348]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	f023 0304 	bic.w	r3, r3, #4
 8001730:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d015      	beq.n	8001766 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173a:	f7fe fd5f 	bl	80001fc <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001740:	e00a      	b.n	8001758 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001742:	f7fe fd5b 	bl	80001fc <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001750:	4293      	cmp	r3, r2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e093      	b.n	8001880 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001758:	4b4b      	ldr	r3, [pc, #300]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0ee      	beq.n	8001742 <HAL_RCC_OscConfig+0x376>
 8001764:	e014      	b.n	8001790 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001766:	f7fe fd49 	bl	80001fc <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176c:	e00a      	b.n	8001784 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176e:	f7fe fd45 	bl	80001fc <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	f241 3288 	movw	r2, #5000	; 0x1388
 800177c:	4293      	cmp	r3, r2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e07d      	b.n	8001880 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001784:	4b40      	ldr	r3, [pc, #256]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1ee      	bne.n	800176e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d105      	bne.n	80017a2 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001796:	4a3c      	ldr	r2, [pc, #240]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 8001798:	4b3b      	ldr	r3, [pc, #236]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d069      	beq.n	800187e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017aa:	4b37      	ldr	r3, [pc, #220]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d061      	beq.n	800187a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d146      	bne.n	800184c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017be:	4b34      	ldr	r3, [pc, #208]	; (8001890 <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7fe fd1a 	bl	80001fc <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017cc:	f7fe fd16 	bl	80001fc <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e050      	b.n	8001880 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017de:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f2:	d108      	bne.n	8001806 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017f4:	4924      	ldr	r1, [pc, #144]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 80017f6:	4b24      	ldr	r3, [pc, #144]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	4313      	orrs	r3, r2
 8001804:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001806:	4820      	ldr	r0, [pc, #128]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 8001808:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a19      	ldr	r1, [r3, #32]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	430b      	orrs	r3, r1
 800181a:	4313      	orrs	r3, r2
 800181c:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	2201      	movs	r2, #1
 8001822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7fe fcea 	bl	80001fc <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182c:	f7fe fce6 	bl	80001fc <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e020      	b.n	8001880 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0x460>
 800184a:	e018      	b.n	800187e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184c:	4b10      	ldr	r3, [pc, #64]	; (8001890 <HAL_RCC_OscConfig+0x4c4>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7fe fcd3 	bl	80001fc <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800185a:	f7fe fccf 	bl	80001fc <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e009      	b.n	8001880 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_RCC_OscConfig+0x4bc>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f0      	bne.n	800185a <HAL_RCC_OscConfig+0x48e>
 8001878:	e001      	b.n	800187e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021000 	.word	0x40021000
 800188c:	40007000 	.word	0x40007000
 8001890:	42420060 	.word	0x42420060

08001894 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80018a2:	4b7e      	ldr	r3, [pc, #504]	; (8001a9c <HAL_RCC_ClockConfig+0x208>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0207 	and.w	r2, r3, #7
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d210      	bcs.n	80018d2 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b0:	497a      	ldr	r1, [pc, #488]	; (8001a9c <HAL_RCC_ClockConfig+0x208>)
 80018b2:	4b7a      	ldr	r3, [pc, #488]	; (8001a9c <HAL_RCC_ClockConfig+0x208>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 0207 	bic.w	r2, r3, #7
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018c0:	4b76      	ldr	r3, [pc, #472]	; (8001a9c <HAL_RCC_ClockConfig+0x208>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0207 	and.w	r2, r3, #7
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d001      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e0e0      	b.n	8001a94 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d020      	beq.n	8001920 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ea:	4a6d      	ldr	r2, [pc, #436]	; (8001aa0 <HAL_RCC_ClockConfig+0x20c>)
 80018ec:	4b6c      	ldr	r3, [pc, #432]	; (8001aa0 <HAL_RCC_ClockConfig+0x20c>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018f4:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d005      	beq.n	800190e <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001902:	4a67      	ldr	r2, [pc, #412]	; (8001aa0 <HAL_RCC_ClockConfig+0x20c>)
 8001904:	4b66      	ldr	r3, [pc, #408]	; (8001aa0 <HAL_RCC_ClockConfig+0x20c>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800190c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800190e:	4964      	ldr	r1, [pc, #400]	; (8001aa0 <HAL_RCC_ClockConfig+0x20c>)
 8001910:	4b63      	ldr	r3, [pc, #396]	; (8001aa0 <HAL_RCC_ClockConfig+0x20c>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b00      	cmp	r3, #0
 800192a:	d06a      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d107      	bne.n	8001944 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001934:	4b5a      	ldr	r3, [pc, #360]	; (8001aa0 <HAL_RCC_ClockConfig+0x20c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d115      	bne.n	800196c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0a7      	b.n	8001a94 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b02      	cmp	r3, #2
 800194a:	d107      	bne.n	800195c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194c:	4b54      	ldr	r3, [pc, #336]	; (8001aa0 <HAL_RCC_ClockConfig+0x20c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d109      	bne.n	800196c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e09b      	b.n	8001a94 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	4b50      	ldr	r3, [pc, #320]	; (8001aa0 <HAL_RCC_ClockConfig+0x20c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e093      	b.n	8001a94 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800196c:	494c      	ldr	r1, [pc, #304]	; (8001aa0 <HAL_RCC_ClockConfig+0x20c>)
 800196e:	4b4c      	ldr	r3, [pc, #304]	; (8001aa0 <HAL_RCC_ClockConfig+0x20c>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f023 0203 	bic.w	r2, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4313      	orrs	r3, r2
 800197c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800197e:	f7fe fc3d 	bl	80001fc <HAL_GetTick>
 8001982:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d112      	bne.n	80019b2 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198e:	f7fe fc35 	bl	80001fc <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f241 3288 	movw	r2, #5000	; 0x1388
 800199c:	4293      	cmp	r3, r2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e077      	b.n	8001a94 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a4:	4b3e      	ldr	r3, [pc, #248]	; (8001aa0 <HAL_RCC_ClockConfig+0x20c>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d1ee      	bne.n	800198e <HAL_RCC_ClockConfig+0xfa>
 80019b0:	e027      	b.n	8001a02 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d11d      	bne.n	80019f6 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ba:	e00a      	b.n	80019d2 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019bc:	f7fe fc1e 	bl	80001fc <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e060      	b.n	8001a94 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019d2:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <HAL_RCC_ClockConfig+0x20c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d1ee      	bne.n	80019bc <HAL_RCC_ClockConfig+0x128>
 80019de:	e010      	b.n	8001a02 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e0:	f7fe fc0c 	bl	80001fc <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e04e      	b.n	8001a94 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019f6:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <HAL_RCC_ClockConfig+0x20c>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ee      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a02:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <HAL_RCC_ClockConfig+0x208>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0207 	and.w	r2, r3, #7
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d910      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a10:	4922      	ldr	r1, [pc, #136]	; (8001a9c <HAL_RCC_ClockConfig+0x208>)
 8001a12:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <HAL_RCC_ClockConfig+0x208>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 0207 	bic.w	r2, r3, #7
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <HAL_RCC_ClockConfig+0x208>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0207 	and.w	r2, r3, #7
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e030      	b.n	8001a94 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d008      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3e:	4918      	ldr	r1, [pc, #96]	; (8001aa0 <HAL_RCC_ClockConfig+0x20c>)
 8001a40:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_RCC_ClockConfig+0x20c>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d009      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a5c:	4910      	ldr	r1, [pc, #64]	; (8001aa0 <HAL_RCC_ClockConfig+0x20c>)
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_RCC_ClockConfig+0x20c>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a70:	f000 f81c 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 8001a74:	4601      	mov	r1, r0
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_RCC_ClockConfig+0x20c>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	f003 030f 	and.w	r3, r3, #15
 8001a80:	4a08      	ldr	r2, [pc, #32]	; (8001aa4 <HAL_RCC_ClockConfig+0x210>)
 8001a82:	5cd3      	ldrb	r3, [r2, r3]
 8001a84:	fa21 f303 	lsr.w	r3, r1, r3
 8001a88:	4a07      	ldr	r2, [pc, #28]	; (8001aa8 <HAL_RCC_ClockConfig+0x214>)
 8001a8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f7fe fb73 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40022000 	.word	0x40022000
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	080031e4 	.word	0x080031e4
 8001aa8:	20000008 	.word	0x20000008

08001aac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aac:	b490      	push	{r4, r7}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ab4:	1d3c      	adds	r4, r7, #4
 8001ab6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ab8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001abc:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ad6:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d002      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0x40>
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d003      	beq.n	8001af2 <HAL_RCC_GetSysClockFreq+0x46>
 8001aea:	e02d      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001aec:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aee:	623b      	str	r3, [r7, #32]
      break;
 8001af0:	e02d      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	0c9b      	lsrs	r3, r3, #18
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001afe:	4413      	add	r3, r2
 8001b00:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b04:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d013      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	0c5b      	lsrs	r3, r3, #17
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b1e:	4413      	add	r3, r2
 8001b20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b24:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	4a0f      	ldr	r2, [pc, #60]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b2a:	fb02 f203 	mul.w	r2, r2, r3
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
 8001b36:	e004      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b3c:	fb02 f303 	mul.w	r3, r2, r3
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	623b      	str	r3, [r7, #32]
      break;
 8001b46:	e002      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b4a:	623b      	str	r3, [r7, #32]
      break;
 8001b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3728      	adds	r7, #40	; 0x28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc90      	pop	{r4, r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	080031c0 	.word	0x080031c0
 8001b60:	080031d0 	.word	0x080031d0
 8001b64:	40021000 	.word	0x40021000
 8001b68:	007a1200 	.word	0x007a1200
 8001b6c:	003d0900 	.word	0x003d0900

08001b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b74:	4b02      	ldr	r3, [pc, #8]	; (8001b80 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	20000008 	.word	0x20000008

08001b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b88:	f7ff fff2 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001b8c:	4601      	mov	r1, r0
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	0a1b      	lsrs	r3, r3, #8
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	4a03      	ldr	r2, [pc, #12]	; (8001ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b9a:	5cd3      	ldrb	r3, [r2, r3]
 8001b9c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	080031f4 	.word	0x080031f4

08001bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bb0:	f7ff ffde 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001bb4:	4601      	mov	r1, r0
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	0adb      	lsrs	r3, r3, #11
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	4a03      	ldr	r2, [pc, #12]	; (8001bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bc2:	5cd3      	ldrb	r3, [r2, r3]
 8001bc4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001bc8:	4618      	mov	r0, r3
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	080031f4 	.word	0x080031f4

08001bd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <RCC_Delay+0x34>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <RCC_Delay+0x38>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	0a5b      	lsrs	r3, r3, #9
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001bf0:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1e5a      	subs	r2, r3, #1
 8001bf6:	60fa      	str	r2, [r7, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1f9      	bne.n	8001bf0 <RCC_Delay+0x1c>
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	10624dd3 	.word	0x10624dd3

08001c10 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e01d      	b.n	8001c5e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f001 f94a 	bl	8002ed0 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	f000 fa1a 	bl	8002088 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d122      	bne.n	8001cc2 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d11b      	bne.n	8001cc2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f06f 0202 	mvn.w	r2, #2
 8001c92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f9d1 	bl	8002050 <HAL_TIM_IC_CaptureCallback>
 8001cae:	e005      	b.n	8001cbc <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f9c4 	bl	800203e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f9d3 	bl	8002062 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d122      	bne.n	8001d16 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d11b      	bne.n	8001d16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f06f 0204 	mvn.w	r2, #4
 8001ce6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f9a7 	bl	8002050 <HAL_TIM_IC_CaptureCallback>
 8001d02:	e005      	b.n	8001d10 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f99a 	bl	800203e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f9a9 	bl	8002062 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d122      	bne.n	8001d6a <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d11b      	bne.n	8001d6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f06f 0208 	mvn.w	r2, #8
 8001d3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2204      	movs	r2, #4
 8001d40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f97d 	bl	8002050 <HAL_TIM_IC_CaptureCallback>
 8001d56:	e005      	b.n	8001d64 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f970 	bl	800203e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f97f 	bl	8002062 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b10      	cmp	r3, #16
 8001d76:	d122      	bne.n	8001dbe <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d11b      	bne.n	8001dbe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f06f 0210 	mvn.w	r2, #16
 8001d8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2208      	movs	r2, #8
 8001d94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f953 	bl	8002050 <HAL_TIM_IC_CaptureCallback>
 8001daa:	e005      	b.n	8001db8 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f946 	bl	800203e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f955 	bl	8002062 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d10e      	bne.n	8001dea <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d107      	bne.n	8001dea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f06f 0201 	mvn.w	r2, #1
 8001de2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f921 	bl	800202c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df4:	2b80      	cmp	r3, #128	; 0x80
 8001df6:	d10e      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e02:	2b80      	cmp	r3, #128	; 0x80
 8001e04:	d107      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e0e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fa91 	bl	8002338 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e20:	2b40      	cmp	r3, #64	; 0x40
 8001e22:	d10e      	bne.n	8001e42 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2e:	2b40      	cmp	r3, #64	; 0x40
 8001e30:	d107      	bne.n	8001e42 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e3a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f919 	bl	8002074 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d10e      	bne.n	8001e6e <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	2b20      	cmp	r3, #32
 8001e5c:	d107      	bne.n	8001e6e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f06f 0220 	mvn.w	r2, #32
 8001e66:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 fa5c 	bl	8002326 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b084      	sub	sp, #16
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_TIM_ConfigClockSource+0x1c>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e0c8      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x1ae>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001eb0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001eb8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b40      	cmp	r3, #64	; 0x40
 8001ec8:	d077      	beq.n	8001fba <HAL_TIM_ConfigClockSource+0x144>
 8001eca:	2b40      	cmp	r3, #64	; 0x40
 8001ecc:	d80e      	bhi.n	8001eec <HAL_TIM_ConfigClockSource+0x76>
 8001ece:	2b10      	cmp	r3, #16
 8001ed0:	f000 808a 	beq.w	8001fe8 <HAL_TIM_ConfigClockSource+0x172>
 8001ed4:	2b10      	cmp	r3, #16
 8001ed6:	d802      	bhi.n	8001ede <HAL_TIM_ConfigClockSource+0x68>
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d07e      	beq.n	8001fda <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8001edc:	e099      	b.n	8002012 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001ede:	2b20      	cmp	r3, #32
 8001ee0:	f000 8089 	beq.w	8001ff6 <HAL_TIM_ConfigClockSource+0x180>
 8001ee4:	2b30      	cmp	r3, #48	; 0x30
 8001ee6:	f000 808d 	beq.w	8002004 <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8001eea:	e092      	b.n	8002012 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001eec:	2b70      	cmp	r3, #112	; 0x70
 8001eee:	d016      	beq.n	8001f1e <HAL_TIM_ConfigClockSource+0xa8>
 8001ef0:	2b70      	cmp	r3, #112	; 0x70
 8001ef2:	d804      	bhi.n	8001efe <HAL_TIM_ConfigClockSource+0x88>
 8001ef4:	2b50      	cmp	r3, #80	; 0x50
 8001ef6:	d040      	beq.n	8001f7a <HAL_TIM_ConfigClockSource+0x104>
 8001ef8:	2b60      	cmp	r3, #96	; 0x60
 8001efa:	d04e      	beq.n	8001f9a <HAL_TIM_ConfigClockSource+0x124>
    break;
 8001efc:	e089      	b.n	8002012 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f02:	d003      	beq.n	8001f0c <HAL_TIM_ConfigClockSource+0x96>
 8001f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f08:	d024      	beq.n	8001f54 <HAL_TIM_ConfigClockSource+0xde>
    break;
 8001f0a:	e082      	b.n	8002012 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	6892      	ldr	r2, [r2, #8]
 8001f16:	f022 0207 	bic.w	r2, r2, #7
 8001f1a:	609a      	str	r2, [r3, #8]
    break;
 8001f1c:	e079      	b.n	8002012 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	6899      	ldr	r1, [r3, #8]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f000 f995 	bl	800225c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f40:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f48:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	609a      	str	r2, [r3, #8]
    break;
 8001f52:	e05e      	b.n	8002012 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	6899      	ldr	r1, [r3, #8]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f000 f97a 	bl	800225c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	6892      	ldr	r2, [r2, #8]
 8001f72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f76:	609a      	str	r2, [r3, #8]
    break;
 8001f78:	e04b      	b.n	8002012 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	6859      	ldr	r1, [r3, #4]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	461a      	mov	r2, r3
 8001f88:	f000 f8e4 	bl	8002154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2150      	movs	r1, #80	; 0x50
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f943 	bl	800221e <TIM_ITRx_SetConfig>
    break;
 8001f98:	e03b      	b.n	8002012 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	6859      	ldr	r1, [r3, #4]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f000 f906 	bl	80021b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2160      	movs	r1, #96	; 0x60
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f933 	bl	800221e <TIM_ITRx_SetConfig>
    break;
 8001fb8:	e02b      	b.n	8002012 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	6859      	ldr	r1, [r3, #4]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	f000 f8c4 	bl	8002154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2140      	movs	r1, #64	; 0x40
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f923 	bl	800221e <TIM_ITRx_SetConfig>
    break;
 8001fd8:	e01b      	b.n	8002012 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 f91c 	bl	800221e <TIM_ITRx_SetConfig>
    break;
 8001fe6:	e014      	b.n	8002012 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2110      	movs	r1, #16
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 f915 	bl	800221e <TIM_ITRx_SetConfig>
    break;
 8001ff4:	e00d      	b.n	8002012 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2120      	movs	r1, #32
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 f90e 	bl	800221e <TIM_ITRx_SetConfig>
    break;
 8002002:	e006      	b.n	8002012 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2130      	movs	r1, #48	; 0x30
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f907 	bl	800221e <TIM_ITRx_SetConfig>
    break;
 8002010:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr

08002062 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr
	...

08002088 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a2a      	ldr	r2, [pc, #168]	; (8002148 <TIM_Base_SetConfig+0xc0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d00b      	beq.n	80020bc <TIM_Base_SetConfig+0x34>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020aa:	d007      	beq.n	80020bc <TIM_Base_SetConfig+0x34>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a27      	ldr	r2, [pc, #156]	; (800214c <TIM_Base_SetConfig+0xc4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d003      	beq.n	80020bc <TIM_Base_SetConfig+0x34>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a26      	ldr	r2, [pc, #152]	; (8002150 <TIM_Base_SetConfig+0xc8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d108      	bne.n	80020ce <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <TIM_Base_SetConfig+0xc0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00b      	beq.n	80020ee <TIM_Base_SetConfig+0x66>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020dc:	d007      	beq.n	80020ee <TIM_Base_SetConfig+0x66>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a1a      	ldr	r2, [pc, #104]	; (800214c <TIM_Base_SetConfig+0xc4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d003      	beq.n	80020ee <TIM_Base_SetConfig+0x66>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a19      	ldr	r2, [pc, #100]	; (8002150 <TIM_Base_SetConfig+0xc8>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d108      	bne.n	8002100 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002106:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a07      	ldr	r2, [pc, #28]	; (8002148 <TIM_Base_SetConfig+0xc0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d103      	bne.n	8002138 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	615a      	str	r2, [r3, #20]
}
 800213e:	bf00      	nop
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	40012c00 	.word	0x40012c00
 800214c:	40000400 	.word	0x40000400
 8002150:	40000800 	.word	0x40000800

08002154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	f023 0201 	bic.w	r2, r3, #1
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002186:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	4313      	orrs	r3, r2
 8002190:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f023 030a 	bic.w	r3, r3, #10
 8002198:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	621a      	str	r2, [r3, #32]
}
 80021ae:	bf00      	nop
 80021b0:	371c      	adds	r7, #28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	f023 0210 	bic.w	r2, r3, #16
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	031b      	lsls	r3, r3, #12
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	621a      	str	r2, [r3, #32]
}
 8002214:	bf00      	nop
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800221e:	b480      	push	{r7}
 8002220:	b085      	sub	sp, #20
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800223a:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800223c:	887b      	ldrh	r3, [r7, #2]
 800223e:	f043 0307 	orr.w	r3, r3, #7
 8002242:	b29b      	uxth	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	609a      	str	r2, [r3, #8]
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800227a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	021a      	lsls	r2, r3, #8
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	431a      	orrs	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4313      	orrs	r3, r2
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	4313      	orrs	r3, r2
 800228c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	609a      	str	r2, [r3, #8]
}
 8002294:	bf00      	nop
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr

0800229e <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e032      	b.n	800231c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2202      	movs	r2, #2
 80022c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	6852      	ldr	r2, [r2, #4]
 80022d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022d4:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	6851      	ldr	r1, [r2, #4]
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	6892      	ldr	r2, [r2, #8]
 80022f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022f6:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	6891      	ldr	r1, [r2, #8]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	6852      	ldr	r2, [r2, #4]
 8002306:	430a      	orrs	r2, r1
 8002308:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e03f      	b.n	80023dc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d106      	bne.n	8002376 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fdd1 	bl	8002f18 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2224      	movs	r2, #36	; 0x24
 800237a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	68d2      	ldr	r2, [r2, #12]
 8002388:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800238c:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f90a 	bl	80025a8 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	6912      	ldr	r2, [r2, #16]
 800239e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	6952      	ldr	r2, [r2, #20]
 80023ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023b2:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	68d2      	ldr	r2, [r2, #12]
 80023be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023c2:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2220      	movs	r2, #32
 80023ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2220      	movs	r2, #32
 80023d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b20      	cmp	r3, #32
 8002402:	f040 8082 	bne.w	800250a <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL) || (Size == 0U))
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_UART_Transmit+0x2e>
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e07a      	b.n	800250c <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_UART_Transmit+0x40>
 8002420:	2302      	movs	r3, #2
 8002422:	e073      	b.n	800250c <HAL_UART_Transmit+0x128>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2221      	movs	r2, #33	; 0x21
 8002436:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800243a:	f7fd fedf 	bl	80001fc <HAL_GetTick>
 800243e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	88fa      	ldrh	r2, [r7, #6]
 8002444:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	88fa      	ldrh	r2, [r7, #6]
 800244a:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800244c:	e041      	b.n	80024d2 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002464:	d121      	bne.n	80024aa <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2200      	movs	r2, #0
 800246e:	2180      	movs	r1, #128	; 0x80
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 f84f 	bl	8002514 <UART_WaitOnFlagUntilTimeout>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e045      	b.n	800250c <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	8812      	ldrh	r2, [r2, #0]
 800248c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002490:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d103      	bne.n	80024a2 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	3302      	adds	r3, #2
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	e017      	b.n	80024d2 <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData +=1U;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	3301      	adds	r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	e013      	b.n	80024d2 <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2200      	movs	r2, #0
 80024b2:	2180      	movs	r1, #128	; 0x80
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f82d 	bl	8002514 <UART_WaitOnFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e023      	b.n	800250c <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	1c59      	adds	r1, r3, #1
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1b8      	bne.n	800244e <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2200      	movs	r2, #0
 80024e4:	2140      	movs	r1, #64	; 0x40
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f814 	bl	8002514 <UART_WaitOnFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e00a      	b.n	800250c <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2220      	movs	r2, #32
 80024fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	e000      	b.n	800250c <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 800250a:	2302      	movs	r3, #2
  }
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	4613      	mov	r3, r2
 8002522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002524:	e02c      	b.n	8002580 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800252c:	d028      	beq.n	8002580 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <UART_WaitOnFlagUntilTimeout+0x30>
 8002534:	f7fd fe62 	bl	80001fc <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	1ad2      	subs	r2, r2, r3
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	429a      	cmp	r2, r3
 8002542:	d91d      	bls.n	8002580 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	68d2      	ldr	r2, [r2, #12]
 800254e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002552:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	6952      	ldr	r2, [r2, #20]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e00f      	b.n	80025a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	401a      	ands	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	429a      	cmp	r2, r3
 800258e:	bf0c      	ite	eq
 8002590:	2301      	moveq	r3, #1
 8002592:	2300      	movne	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	461a      	mov	r2, r3
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	429a      	cmp	r2, r3
 800259c:	d0c3      	beq.n	8002526 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	6912      	ldr	r2, [r2, #16]
 80025be:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68d2      	ldr	r2, [r2, #12]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	4313      	orrs	r3, r2
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025ee:	f023 030c 	bic.w	r3, r3, #12
 80025f2:	68f9      	ldr	r1, [r7, #12]
 80025f4:	430b      	orrs	r3, r1
 80025f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	6952      	ldr	r2, [r2, #20]
 8002602:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6992      	ldr	r2, [r2, #24]
 800260a:	430a      	orrs	r2, r1
 800260c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a6f      	ldr	r2, [pc, #444]	; (80027d0 <UART_SetConfig+0x228>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d16b      	bne.n	80026f0 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681c      	ldr	r4, [r3, #0]
 800261c:	f7ff fac6 	bl	8001bac <HAL_RCC_GetPCLK2Freq>
 8002620:	4602      	mov	r2, r0
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	009a      	lsls	r2, r3, #2
 800262a:	441a      	add	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	fbb2 f3f3 	udiv	r3, r2, r3
 8002636:	4a67      	ldr	r2, [pc, #412]	; (80027d4 <UART_SetConfig+0x22c>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	095b      	lsrs	r3, r3, #5
 800263e:	011d      	lsls	r5, r3, #4
 8002640:	f7ff fab4 	bl	8001bac <HAL_RCC_GetPCLK2Freq>
 8002644:	4602      	mov	r2, r0
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	009a      	lsls	r2, r3, #2
 800264e:	441a      	add	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	fbb2 f6f3 	udiv	r6, r2, r3
 800265a:	f7ff faa7 	bl	8001bac <HAL_RCC_GetPCLK2Freq>
 800265e:	4602      	mov	r2, r0
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	009a      	lsls	r2, r3, #2
 8002668:	441a      	add	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	4a57      	ldr	r2, [pc, #348]	; (80027d4 <UART_SetConfig+0x22c>)
 8002676:	fba2 2303 	umull	r2, r3, r2, r3
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	2264      	movs	r2, #100	; 0x64
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	1af3      	subs	r3, r6, r3
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	3332      	adds	r3, #50	; 0x32
 8002688:	4a52      	ldr	r2, [pc, #328]	; (80027d4 <UART_SetConfig+0x22c>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002694:	441d      	add	r5, r3
 8002696:	f7ff fa89 	bl	8001bac <HAL_RCC_GetPCLK2Freq>
 800269a:	4602      	mov	r2, r0
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	009a      	lsls	r2, r3, #2
 80026a4:	441a      	add	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80026b0:	f7ff fa7c 	bl	8001bac <HAL_RCC_GetPCLK2Freq>
 80026b4:	4602      	mov	r2, r0
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	009a      	lsls	r2, r3, #2
 80026be:	441a      	add	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ca:	4a42      	ldr	r2, [pc, #264]	; (80027d4 <UART_SetConfig+0x22c>)
 80026cc:	fba2 2303 	umull	r2, r3, r2, r3
 80026d0:	095b      	lsrs	r3, r3, #5
 80026d2:	2264      	movs	r2, #100	; 0x64
 80026d4:	fb02 f303 	mul.w	r3, r2, r3
 80026d8:	1af3      	subs	r3, r6, r3
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	3332      	adds	r3, #50	; 0x32
 80026de:	4a3d      	ldr	r2, [pc, #244]	; (80027d4 <UART_SetConfig+0x22c>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	095b      	lsrs	r3, r3, #5
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	442b      	add	r3, r5
 80026ec:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80026ee:	e06a      	b.n	80027c6 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681c      	ldr	r4, [r3, #0]
 80026f4:	f7ff fa46 	bl	8001b84 <HAL_RCC_GetPCLK1Freq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	009a      	lsls	r2, r3, #2
 8002702:	441a      	add	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	fbb2 f3f3 	udiv	r3, r2, r3
 800270e:	4a31      	ldr	r2, [pc, #196]	; (80027d4 <UART_SetConfig+0x22c>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	011d      	lsls	r5, r3, #4
 8002718:	f7ff fa34 	bl	8001b84 <HAL_RCC_GetPCLK1Freq>
 800271c:	4602      	mov	r2, r0
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	009a      	lsls	r2, r3, #2
 8002726:	441a      	add	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002732:	f7ff fa27 	bl	8001b84 <HAL_RCC_GetPCLK1Freq>
 8002736:	4602      	mov	r2, r0
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	009a      	lsls	r2, r3, #2
 8002740:	441a      	add	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	fbb2 f3f3 	udiv	r3, r2, r3
 800274c:	4a21      	ldr	r2, [pc, #132]	; (80027d4 <UART_SetConfig+0x22c>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	2264      	movs	r2, #100	; 0x64
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	1af3      	subs	r3, r6, r3
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	3332      	adds	r3, #50	; 0x32
 8002760:	4a1c      	ldr	r2, [pc, #112]	; (80027d4 <UART_SetConfig+0x22c>)
 8002762:	fba2 2303 	umull	r2, r3, r2, r3
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800276c:	441d      	add	r5, r3
 800276e:	f7ff fa09 	bl	8001b84 <HAL_RCC_GetPCLK1Freq>
 8002772:	4602      	mov	r2, r0
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	009a      	lsls	r2, r3, #2
 800277c:	441a      	add	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	fbb2 f6f3 	udiv	r6, r2, r3
 8002788:	f7ff f9fc 	bl	8001b84 <HAL_RCC_GetPCLK1Freq>
 800278c:	4602      	mov	r2, r0
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	009a      	lsls	r2, r3, #2
 8002796:	441a      	add	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a2:	4a0c      	ldr	r2, [pc, #48]	; (80027d4 <UART_SetConfig+0x22c>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	2264      	movs	r2, #100	; 0x64
 80027ac:	fb02 f303 	mul.w	r3, r2, r3
 80027b0:	1af3      	subs	r3, r6, r3
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	3332      	adds	r3, #50	; 0x32
 80027b6:	4a07      	ldr	r2, [pc, #28]	; (80027d4 <UART_SetConfig+0x22c>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	442b      	add	r3, r5
 80027c4:	60a3      	str	r3, [r4, #8]
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40013800 	.word	0x40013800
 80027d4:	51eb851f 	.word	0x51eb851f

080027d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027dc:	f7fd fcb6 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027e0:	f000 f850 	bl	8002884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027e4:	f000 fa10 	bl	8002c08 <MX_GPIO_Init>
  MX_TIM2_Init();
 80027e8:	f000 f96c 	bl	8002ac4 <MX_TIM2_Init>
  MX_CAN_Init();
 80027ec:	f000 f890 	bl	8002910 <MX_CAN_Init>
  MX_I2C1_Init();
 80027f0:	f000 f90c 	bl	8002a0c <MX_I2C1_Init>
  MX_I2C2_Init();
 80027f4:	f000 f938 	bl	8002a68 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80027f8:	f000 f9b2 	bl	8002b60 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80027fc:	f000 f9da 	bl	8002bb4 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart1, (uint8_t*)"\n\r Hello World!", strlen("\n\r Hello World!"), HAL_MAX_DELAY);
 8002800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002804:	220f      	movs	r2, #15
 8002806:	4917      	ldr	r1, [pc, #92]	; (8002864 <main+0x8c>)
 8002808:	4817      	ldr	r0, [pc, #92]	; (8002868 <main+0x90>)
 800280a:	f7ff fdeb 	bl	80023e4 <HAL_UART_Transmit>



	  u.var32 = 1000;
 800280e:	4b17      	ldr	r3, [pc, #92]	; (800286c <main+0x94>)
 8002810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002814:	601a      	str	r2, [r3, #0]

	  TxHeader.StdId = 0x00C; // responde com id 0x00B
 8002816:	4b16      	ldr	r3, [pc, #88]	; (8002870 <main+0x98>)
 8002818:	220c      	movs	r2, #12
 800281a:	601a      	str	r2, [r3, #0]
	  TxData[0] = u.var8[0];
 800281c:	4b13      	ldr	r3, [pc, #76]	; (800286c <main+0x94>)
 800281e:	781a      	ldrb	r2, [r3, #0]
 8002820:	4b14      	ldr	r3, [pc, #80]	; (8002874 <main+0x9c>)
 8002822:	701a      	strb	r2, [r3, #0]
	  TxData[1] = u.var8[1];
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <main+0x94>)
 8002826:	785a      	ldrb	r2, [r3, #1]
 8002828:	4b12      	ldr	r3, [pc, #72]	; (8002874 <main+0x9c>)
 800282a:	705a      	strb	r2, [r3, #1]
	  TxData[2] = u.var8[2];
 800282c:	4b0f      	ldr	r3, [pc, #60]	; (800286c <main+0x94>)
 800282e:	789a      	ldrb	r2, [r3, #2]
 8002830:	4b10      	ldr	r3, [pc, #64]	; (8002874 <main+0x9c>)
 8002832:	709a      	strb	r2, [r3, #2]
	  TxData[3] = u.var8[3];
 8002834:	4b0d      	ldr	r3, [pc, #52]	; (800286c <main+0x94>)
 8002836:	78da      	ldrb	r2, [r3, #3]
 8002838:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <main+0x9c>)
 800283a:	70da      	strb	r2, [r3, #3]

      if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <main+0xa0>)
 800283e:	4a0d      	ldr	r2, [pc, #52]	; (8002874 <main+0x9c>)
 8002840:	490b      	ldr	r1, [pc, #44]	; (8002870 <main+0x98>)
 8002842:	480e      	ldr	r0, [pc, #56]	; (800287c <main+0xa4>)
 8002844:	f7fd ff0d 	bl	8000662 <HAL_CAN_AddTxMessage>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d005      	beq.n	800285a <main+0x82>
      {
    	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800284e:	2120      	movs	r1, #32
 8002850:	480b      	ldr	r0, [pc, #44]	; (8002880 <main+0xa8>)
 8002852:	f7fe fca5 	bl	80011a0 <HAL_GPIO_TogglePin>
        Error_Handler();
 8002856:	f000 fa3f 	bl	8002cd8 <Error_Handler>
      }

      HAL_Delay(500);
 800285a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800285e:	f7fd fcd7 	bl	8000210 <HAL_Delay>
  {
 8002862:	e7cd      	b.n	8002800 <main+0x28>
 8002864:	080031d4 	.word	0x080031d4
 8002868:	20000114 	.word	0x20000114
 800286c:	200001e8 	.word	0x200001e8
 8002870:	20000028 	.word	0x20000028
 8002874:	20000154 	.word	0x20000154
 8002878:	2000015c 	.word	0x2000015c
 800287c:	200000ec 	.word	0x200000ec
 8002880:	40010800 	.word	0x40010800

08002884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b090      	sub	sp, #64	; 0x40
 8002888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800288a:	f107 0318 	add.w	r3, r7, #24
 800288e:	2228      	movs	r2, #40	; 0x28
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f000 fc80 	bl	8003198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002898:	1d3b      	adds	r3, r7, #4
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	60da      	str	r2, [r3, #12]
 80028a4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028a6:	2301      	movs	r3, #1
 80028a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80028b0:	2300      	movs	r3, #0
 80028b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028b4:	2301      	movs	r3, #1
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028b8:	2302      	movs	r3, #2
 80028ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80028c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80028c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028c8:	f107 0318 	add.w	r3, r7, #24
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fe fd7d 	bl	80013cc <HAL_RCC_OscConfig>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80028d8:	f000 f9fe 	bl	8002cd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028dc:	230f      	movs	r3, #15
 80028de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028e0:	2302      	movs	r3, #2
 80028e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	2102      	movs	r1, #2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe ffcc 	bl	8001894 <HAL_RCC_ClockConfig>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002902:	f000 f9e9 	bl	8002cd8 <Error_Handler>
  }
}
 8002906:	bf00      	nop
 8002908:	3740      	adds	r7, #64	; 0x40
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08a      	sub	sp, #40	; 0x28
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002916:	4b3a      	ldr	r3, [pc, #232]	; (8002a00 <MX_CAN_Init+0xf0>)
 8002918:	4a3a      	ldr	r2, [pc, #232]	; (8002a04 <MX_CAN_Init+0xf4>)
 800291a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800291c:	4b38      	ldr	r3, [pc, #224]	; (8002a00 <MX_CAN_Init+0xf0>)
 800291e:	2209      	movs	r2, #9
 8002920:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002922:	4b37      	ldr	r3, [pc, #220]	; (8002a00 <MX_CAN_Init+0xf0>)
 8002924:	2200      	movs	r2, #0
 8002926:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002928:	4b35      	ldr	r3, [pc, #212]	; (8002a00 <MX_CAN_Init+0xf0>)
 800292a:	2200      	movs	r2, #0
 800292c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800292e:	4b34      	ldr	r3, [pc, #208]	; (8002a00 <MX_CAN_Init+0xf0>)
 8002930:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002934:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002936:	4b32      	ldr	r3, [pc, #200]	; (8002a00 <MX_CAN_Init+0xf0>)
 8002938:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800293c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800293e:	4b30      	ldr	r3, [pc, #192]	; (8002a00 <MX_CAN_Init+0xf0>)
 8002940:	2200      	movs	r2, #0
 8002942:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002944:	4b2e      	ldr	r3, [pc, #184]	; (8002a00 <MX_CAN_Init+0xf0>)
 8002946:	2200      	movs	r2, #0
 8002948:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800294a:	4b2d      	ldr	r3, [pc, #180]	; (8002a00 <MX_CAN_Init+0xf0>)
 800294c:	2200      	movs	r2, #0
 800294e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002950:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <MX_CAN_Init+0xf0>)
 8002952:	2200      	movs	r2, #0
 8002954:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002956:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <MX_CAN_Init+0xf0>)
 8002958:	2200      	movs	r2, #0
 800295a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800295c:	4b28      	ldr	r3, [pc, #160]	; (8002a00 <MX_CAN_Init+0xf0>)
 800295e:	2200      	movs	r2, #0
 8002960:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002962:	4827      	ldr	r0, [pc, #156]	; (8002a00 <MX_CAN_Init+0xf0>)
 8002964:	f7fd fc76 	bl	8000254 <HAL_CAN_Init>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800296e:	f000 f9b3 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8002972:	2102      	movs	r1, #2
 8002974:	4822      	ldr	r0, [pc, #136]	; (8002a00 <MX_CAN_Init+0xf0>)
 8002976:	f7fd ff4a 	bl	800080e <HAL_CAN_ActivateNotification>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_CAN_Init+0x74>
  {
	Error_Handler();
 8002980:	f000 f9aa 	bl	8002cd8 <Error_Handler>
  }

  /* Configure the CAN Filter */
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002988:	2300      	movs	r3, #0
 800298a:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800298c:	2301      	movs	r3, #1
 800298e:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh     = 0x000<<5; //0x000
 8002990:	2300      	movs	r3, #0
 8002992:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow      = 0x0000;
 8002994:	2300      	movs	r3, #0
 8002996:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x700<<5; // mascara que filtra
 8002998:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800299c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow  = 0x0000;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80029a6:	2301      	movs	r3, #1
 80029a8:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80029aa:	230e      	movs	r3, #14
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80029ae:	463b      	mov	r3, r7
 80029b0:	4619      	mov	r1, r3
 80029b2:	4813      	ldr	r0, [pc, #76]	; (8002a00 <MX_CAN_Init+0xf0>)
 80029b4:	f7fd fd48 	bl	8000448 <HAL_CAN_ConfigFilter>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_CAN_Init+0xb2>
  {
    /* Filter configuration Error */
    Error_Handler();
 80029be:	f000 f98b 	bl	8002cd8 <Error_Handler>
  }

  /* Configure Transmission process */
  TxHeader.StdId = 0x001;
 80029c2:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <MX_CAN_Init+0xf8>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x001;
 80029c8:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <MX_CAN_Init+0xf8>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 80029ce:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <MX_CAN_Init+0xf8>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <MX_CAN_Init+0xf8>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <MX_CAN_Init+0xf8>)
 80029dc:	2208      	movs	r2, #8
 80029de:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <MX_CAN_Init+0xf8>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	751a      	strb	r2, [r3, #20]


  /* Start the CAN peripheral */
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80029e6:	4806      	ldr	r0, [pc, #24]	; (8002a00 <MX_CAN_Init+0xf0>)
 80029e8:	f7fd fdf7 	bl	80005da <HAL_CAN_Start>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_CAN_Init+0xe6>
  {
    /* Start Error */
    Error_Handler();
 80029f2:	f000 f971 	bl	8002cd8 <Error_Handler>
  }


  /* USER CODE END CAN_Init 2 */

}
 80029f6:	bf00      	nop
 80029f8:	3728      	adds	r7, #40	; 0x28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200000ec 	.word	0x200000ec
 8002a04:	40006400 	.word	0x40006400
 8002a08:	20000028 	.word	0x20000028

08002a0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <MX_I2C1_Init+0x50>)
 8002a12:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <MX_I2C1_Init+0x54>)
 8002a14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002a16:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <MX_I2C1_Init+0x50>)
 8002a18:	4a12      	ldr	r2, [pc, #72]	; (8002a64 <MX_I2C1_Init+0x58>)
 8002a1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <MX_I2C1_Init+0x50>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <MX_I2C1_Init+0x50>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <MX_I2C1_Init+0x50>)
 8002a2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a30:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <MX_I2C1_Init+0x50>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <MX_I2C1_Init+0x50>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a3c:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <MX_I2C1_Init+0x50>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <MX_I2C1_Init+0x50>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a48:	4804      	ldr	r0, [pc, #16]	; (8002a5c <MX_I2C1_Init+0x50>)
 8002a4a:	f7fe fbbb 	bl	80011c4 <HAL_I2C_Init>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a54:	f000 f940 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a58:	bf00      	nop
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000044 	.word	0x20000044
 8002a60:	40005400 	.word	0x40005400
 8002a64:	000186a0 	.word	0x000186a0

08002a68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a6c:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <MX_I2C2_Init+0x50>)
 8002a6e:	4a13      	ldr	r2, [pc, #76]	; (8002abc <MX_I2C2_Init+0x54>)
 8002a70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002a72:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <MX_I2C2_Init+0x50>)
 8002a74:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <MX_I2C2_Init+0x58>)
 8002a76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a78:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <MX_I2C2_Init+0x50>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002a7e:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <MX_I2C2_Init+0x50>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <MX_I2C2_Init+0x50>)
 8002a86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a8a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <MX_I2C2_Init+0x50>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002a92:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <MX_I2C2_Init+0x50>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a98:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <MX_I2C2_Init+0x50>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <MX_I2C2_Init+0x50>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002aa4:	4804      	ldr	r0, [pc, #16]	; (8002ab8 <MX_I2C2_Init+0x50>)
 8002aa6:	f7fe fb8d 	bl	80011c4 <HAL_I2C_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002ab0:	f000 f912 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002ab4:	bf00      	nop
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000098 	.word	0x20000098
 8002abc:	40005800 	.word	0x40005800
 8002ac0:	000186a0 	.word	0x000186a0

08002ac4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aca:	f107 0308 	add.w	r3, r7, #8
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	605a      	str	r2, [r3, #4]
 8002ad4:	609a      	str	r2, [r3, #8]
 8002ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad8:	463b      	mov	r3, r7
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ae0:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <MX_TIM2_Init+0x98>)
 8002ae2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ae6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <MX_TIM2_Init+0x98>)
 8002aea:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002aee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <MX_TIM2_Init+0x98>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002af6:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <MX_TIM2_Init+0x98>)
 8002af8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002afc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002afe:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <MX_TIM2_Init+0x98>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b04:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <MX_TIM2_Init+0x98>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b0a:	4814      	ldr	r0, [pc, #80]	; (8002b5c <MX_TIM2_Init+0x98>)
 8002b0c:	f7ff f880 	bl	8001c10 <HAL_TIM_Base_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002b16:	f000 f8df 	bl	8002cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b20:	f107 0308 	add.w	r3, r7, #8
 8002b24:	4619      	mov	r1, r3
 8002b26:	480d      	ldr	r0, [pc, #52]	; (8002b5c <MX_TIM2_Init+0x98>)
 8002b28:	f7ff f9a5 	bl	8001e76 <HAL_TIM_ConfigClockSource>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002b32:	f000 f8d1 	bl	8002cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b36:	2300      	movs	r3, #0
 8002b38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b3e:	463b      	mov	r3, r7
 8002b40:	4619      	mov	r1, r3
 8002b42:	4806      	ldr	r0, [pc, #24]	; (8002b5c <MX_TIM2_Init+0x98>)
 8002b44:	f7ff fbab 	bl	800229e <HAL_TIMEx_MasterConfigSynchronization>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002b4e:	f000 f8c3 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b52:	bf00      	nop
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000168 	.word	0x20000168

08002b60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <MX_USART1_UART_Init+0x4c>)
 8002b66:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <MX_USART1_UART_Init+0x50>)
 8002b68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b6a:	4b10      	ldr	r3, [pc, #64]	; (8002bac <MX_USART1_UART_Init+0x4c>)
 8002b6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <MX_USART1_UART_Init+0x4c>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <MX_USART1_UART_Init+0x4c>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <MX_USART1_UART_Init+0x4c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b84:	4b09      	ldr	r3, [pc, #36]	; (8002bac <MX_USART1_UART_Init+0x4c>)
 8002b86:	220c      	movs	r2, #12
 8002b88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <MX_USART1_UART_Init+0x4c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <MX_USART1_UART_Init+0x4c>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b96:	4805      	ldr	r0, [pc, #20]	; (8002bac <MX_USART1_UART_Init+0x4c>)
 8002b98:	f7ff fbd7 	bl	800234a <HAL_UART_Init>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ba2:	f000 f899 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000114 	.word	0x20000114
 8002bb0:	40013800 	.word	0x40013800

08002bb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bb8:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <MX_USART2_UART_Init+0x4c>)
 8002bba:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <MX_USART2_UART_Init+0x50>)
 8002bbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bbe:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <MX_USART2_UART_Init+0x4c>)
 8002bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <MX_USART2_UART_Init+0x4c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <MX_USART2_UART_Init+0x4c>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <MX_USART2_UART_Init+0x4c>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <MX_USART2_UART_Init+0x4c>)
 8002bda:	220c      	movs	r2, #12
 8002bdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <MX_USART2_UART_Init+0x4c>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <MX_USART2_UART_Init+0x4c>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bea:	4805      	ldr	r0, [pc, #20]	; (8002c00 <MX_USART2_UART_Init+0x4c>)
 8002bec:	f7ff fbad 	bl	800234a <HAL_UART_Init>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002bf6:	f000 f86f 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200001a8 	.word	0x200001a8
 8002c04:	40004400 	.word	0x40004400

08002c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0e:	f107 0310 	add.w	r3, r7, #16
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	605a      	str	r2, [r3, #4]
 8002c18:	609a      	str	r2, [r3, #8]
 8002c1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c1c:	4a2b      	ldr	r2, [pc, #172]	; (8002ccc <MX_GPIO_Init+0xc4>)
 8002c1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ccc <MX_GPIO_Init+0xc4>)
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f043 0310 	orr.w	r3, r3, #16
 8002c26:	6193      	str	r3, [r2, #24]
 8002c28:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <MX_GPIO_Init+0xc4>)
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c34:	4a25      	ldr	r2, [pc, #148]	; (8002ccc <MX_GPIO_Init+0xc4>)
 8002c36:	4b25      	ldr	r3, [pc, #148]	; (8002ccc <MX_GPIO_Init+0xc4>)
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	f043 0320 	orr.w	r3, r3, #32
 8002c3e:	6193      	str	r3, [r2, #24]
 8002c40:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <MX_GPIO_Init+0xc4>)
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4c:	4a1f      	ldr	r2, [pc, #124]	; (8002ccc <MX_GPIO_Init+0xc4>)
 8002c4e:	4b1f      	ldr	r3, [pc, #124]	; (8002ccc <MX_GPIO_Init+0xc4>)
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f043 0304 	orr.w	r3, r3, #4
 8002c56:	6193      	str	r3, [r2, #24]
 8002c58:	4b1c      	ldr	r3, [pc, #112]	; (8002ccc <MX_GPIO_Init+0xc4>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	607b      	str	r3, [r7, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c64:	4a19      	ldr	r2, [pc, #100]	; (8002ccc <MX_GPIO_Init+0xc4>)
 8002c66:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <MX_GPIO_Init+0xc4>)
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f043 0308 	orr.w	r3, r3, #8
 8002c6e:	6193      	str	r3, [r2, #24]
 8002c70:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <MX_GPIO_Init+0xc4>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c82:	4813      	ldr	r0, [pc, #76]	; (8002cd0 <MX_GPIO_Init+0xc8>)
 8002c84:	f7fe fa74 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c96:	2302      	movs	r3, #2
 8002c98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c9a:	f107 0310 	add.w	r3, r7, #16
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	480b      	ldr	r0, [pc, #44]	; (8002cd0 <MX_GPIO_Init+0xc8>)
 8002ca2:	f7fe f907 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002ca6:	2320      	movs	r3, #32
 8002ca8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002caa:	2301      	movs	r3, #1
 8002cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb6:	f107 0310 	add.w	r3, r7, #16
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4805      	ldr	r0, [pc, #20]	; (8002cd4 <MX_GPIO_Init+0xcc>)
 8002cbe:	f7fe f8f9 	bl	8000eb4 <HAL_GPIO_Init>

}
 8002cc2:	bf00      	nop
 8002cc4:	3720      	adds	r7, #32
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40011000 	.word	0x40011000
 8002cd4:	40010800 	.word	0x40010800

08002cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cea:	4a0e      	ldr	r2, [pc, #56]	; (8002d24 <HAL_MspInit+0x40>)
 8002cec:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <HAL_MspInit+0x40>)
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	6193      	str	r3, [r2, #24]
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_MspInit+0x40>)
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	4a08      	ldr	r2, [pc, #32]	; (8002d24 <HAL_MspInit+0x40>)
 8002d04:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <HAL_MspInit+0x40>)
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	61d3      	str	r3, [r2, #28]
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_MspInit+0x40>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	683b      	ldr	r3, [r7, #0]
  //__HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr
 8002d24:	40021000 	.word	0x40021000

08002d28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	; 0x28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a29      	ldr	r2, [pc, #164]	; (8002de8 <HAL_CAN_MspInit+0xc0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d14b      	bne.n	8002de0 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002d48:	4a28      	ldr	r2, [pc, #160]	; (8002dec <HAL_CAN_MspInit+0xc4>)
 8002d4a:	4b28      	ldr	r3, [pc, #160]	; (8002dec <HAL_CAN_MspInit+0xc4>)
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d52:	61d3      	str	r3, [r2, #28]
 8002d54:	4b25      	ldr	r3, [pc, #148]	; (8002dec <HAL_CAN_MspInit+0xc4>)
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d60:	4a22      	ldr	r2, [pc, #136]	; (8002dec <HAL_CAN_MspInit+0xc4>)
 8002d62:	4b22      	ldr	r3, [pc, #136]	; (8002dec <HAL_CAN_MspInit+0xc4>)
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	f043 0308 	orr.w	r3, r3, #8
 8002d6a:	6193      	str	r3, [r2, #24]
 8002d6c:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <HAL_CAN_MspInit+0xc4>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d86:	f107 0314 	add.w	r3, r7, #20
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4818      	ldr	r0, [pc, #96]	; (8002df0 <HAL_CAN_MspInit+0xc8>)
 8002d8e:	f7fe f891 	bl	8000eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	4619      	mov	r1, r3
 8002da6:	4812      	ldr	r0, [pc, #72]	; (8002df0 <HAL_CAN_MspInit+0xc8>)
 8002da8:	f7fe f884 	bl	8000eb4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_CAN_MspInit+0xcc>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <HAL_CAN_MspInit+0xcc>)
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	2014      	movs	r0, #20
 8002dd6:	f7fe f836 	bl	8000e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002dda:	2014      	movs	r0, #20
 8002ddc:	f7fe f84f 	bl	8000e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002de0:	bf00      	nop
 8002de2:	3728      	adds	r7, #40	; 0x28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40006400 	.word	0x40006400
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40010c00 	.word	0x40010c00
 8002df4:	40010000 	.word	0x40010000

08002df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	; 0x28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	f107 0318 	add.w	r3, r7, #24
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a2b      	ldr	r2, [pc, #172]	; (8002ec0 <HAL_I2C_MspInit+0xc8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d124      	bne.n	8002e62 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e18:	4a2a      	ldr	r2, [pc, #168]	; (8002ec4 <HAL_I2C_MspInit+0xcc>)
 8002e1a:	4b2a      	ldr	r3, [pc, #168]	; (8002ec4 <HAL_I2C_MspInit+0xcc>)
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	f043 0308 	orr.w	r3, r3, #8
 8002e22:	6193      	str	r3, [r2, #24]
 8002e24:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <HAL_I2C_MspInit+0xcc>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e30:	23c0      	movs	r3, #192	; 0xc0
 8002e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e34:	2312      	movs	r3, #18
 8002e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3c:	f107 0318 	add.w	r3, r7, #24
 8002e40:	4619      	mov	r1, r3
 8002e42:	4821      	ldr	r0, [pc, #132]	; (8002ec8 <HAL_I2C_MspInit+0xd0>)
 8002e44:	f7fe f836 	bl	8000eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e48:	4a1e      	ldr	r2, [pc, #120]	; (8002ec4 <HAL_I2C_MspInit+0xcc>)
 8002e4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <HAL_I2C_MspInit+0xcc>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e52:	61d3      	str	r3, [r2, #28]
 8002e54:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <HAL_I2C_MspInit+0xcc>)
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002e60:	e029      	b.n	8002eb6 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a19      	ldr	r2, [pc, #100]	; (8002ecc <HAL_I2C_MspInit+0xd4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d124      	bne.n	8002eb6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e6c:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <HAL_I2C_MspInit+0xcc>)
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <HAL_I2C_MspInit+0xcc>)
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f043 0308 	orr.w	r3, r3, #8
 8002e76:	6193      	str	r3, [r2, #24]
 8002e78:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <HAL_I2C_MspInit+0xcc>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e84:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e8a:	2312      	movs	r3, #18
 8002e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e92:	f107 0318 	add.w	r3, r7, #24
 8002e96:	4619      	mov	r1, r3
 8002e98:	480b      	ldr	r0, [pc, #44]	; (8002ec8 <HAL_I2C_MspInit+0xd0>)
 8002e9a:	f7fe f80b 	bl	8000eb4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e9e:	4a09      	ldr	r2, [pc, #36]	; (8002ec4 <HAL_I2C_MspInit+0xcc>)
 8002ea0:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <HAL_I2C_MspInit+0xcc>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ea8:	61d3      	str	r3, [r2, #28]
 8002eaa:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_I2C_MspInit+0xcc>)
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
}
 8002eb6:	bf00      	nop
 8002eb8:	3728      	adds	r7, #40	; 0x28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40005400 	.word	0x40005400
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40010c00 	.word	0x40010c00
 8002ecc:	40005800 	.word	0x40005800

08002ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee0:	d113      	bne.n	8002f0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ee2:	4a0c      	ldr	r2, [pc, #48]	; (8002f14 <HAL_TIM_Base_MspInit+0x44>)
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_TIM_Base_MspInit+0x44>)
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	61d3      	str	r3, [r2, #28]
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <HAL_TIM_Base_MspInit+0x44>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002efa:	2200      	movs	r2, #0
 8002efc:	2100      	movs	r1, #0
 8002efe:	201c      	movs	r0, #28
 8002f00:	f7fd ffa1 	bl	8000e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f04:	201c      	movs	r0, #28
 8002f06:	f7fd ffba 	bl	8000e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000

08002f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	; 0x28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f20:	f107 0318 	add.w	r3, r7, #24
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a37      	ldr	r2, [pc, #220]	; (8003010 <HAL_UART_MspInit+0xf8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d132      	bne.n	8002f9e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f38:	4a36      	ldr	r2, [pc, #216]	; (8003014 <HAL_UART_MspInit+0xfc>)
 8002f3a:	4b36      	ldr	r3, [pc, #216]	; (8003014 <HAL_UART_MspInit+0xfc>)
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f42:	6193      	str	r3, [r2, #24]
 8002f44:	4b33      	ldr	r3, [pc, #204]	; (8003014 <HAL_UART_MspInit+0xfc>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f50:	4a30      	ldr	r2, [pc, #192]	; (8003014 <HAL_UART_MspInit+0xfc>)
 8002f52:	4b30      	ldr	r3, [pc, #192]	; (8003014 <HAL_UART_MspInit+0xfc>)
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	f043 0304 	orr.w	r3, r3, #4
 8002f5a:	6193      	str	r3, [r2, #24]
 8002f5c:	4b2d      	ldr	r3, [pc, #180]	; (8003014 <HAL_UART_MspInit+0xfc>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f72:	2303      	movs	r3, #3
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f76:	f107 0318 	add.w	r3, r7, #24
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4826      	ldr	r0, [pc, #152]	; (8003018 <HAL_UART_MspInit+0x100>)
 8002f7e:	f7fd ff99 	bl	8000eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f90:	f107 0318 	add.w	r3, r7, #24
 8002f94:	4619      	mov	r1, r3
 8002f96:	4820      	ldr	r0, [pc, #128]	; (8003018 <HAL_UART_MspInit+0x100>)
 8002f98:	f7fd ff8c 	bl	8000eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f9c:	e034      	b.n	8003008 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a1e      	ldr	r2, [pc, #120]	; (800301c <HAL_UART_MspInit+0x104>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d12f      	bne.n	8003008 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fa8:	4a1a      	ldr	r2, [pc, #104]	; (8003014 <HAL_UART_MspInit+0xfc>)
 8002faa:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <HAL_UART_MspInit+0xfc>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb2:	61d3      	str	r3, [r2, #28]
 8002fb4:	4b17      	ldr	r3, [pc, #92]	; (8003014 <HAL_UART_MspInit+0xfc>)
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc0:	4a14      	ldr	r2, [pc, #80]	; (8003014 <HAL_UART_MspInit+0xfc>)
 8002fc2:	4b14      	ldr	r3, [pc, #80]	; (8003014 <HAL_UART_MspInit+0xfc>)
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f043 0304 	orr.w	r3, r3, #4
 8002fca:	6193      	str	r3, [r2, #24]
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <HAL_UART_MspInit+0xfc>)
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fd8:	2304      	movs	r3, #4
 8002fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe4:	f107 0318 	add.w	r3, r7, #24
 8002fe8:	4619      	mov	r1, r3
 8002fea:	480b      	ldr	r0, [pc, #44]	; (8003018 <HAL_UART_MspInit+0x100>)
 8002fec:	f7fd ff62 	bl	8000eb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ff0:	2308      	movs	r3, #8
 8002ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffc:	f107 0318 	add.w	r3, r7, #24
 8003000:	4619      	mov	r1, r3
 8003002:	4805      	ldr	r0, [pc, #20]	; (8003018 <HAL_UART_MspInit+0x100>)
 8003004:	f7fd ff56 	bl	8000eb4 <HAL_GPIO_Init>
}
 8003008:	bf00      	nop
 800300a:	3728      	adds	r7, #40	; 0x28
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40013800 	.word	0x40013800
 8003014:	40021000 	.word	0x40021000
 8003018:	40010800 	.word	0x40010800
 800301c:	40004400 	.word	0x40004400

08003020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003030:	e7fe      	b.n	8003030 <HardFault_Handler+0x4>

08003032 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003032:	b480      	push	{r7}
 8003034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003036:	e7fe      	b.n	8003036 <MemManage_Handler+0x4>

08003038 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800303c:	e7fe      	b.n	800303c <BusFault_Handler+0x4>

0800303e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800303e:	b480      	push	{r7}
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003042:	e7fe      	b.n	8003042 <UsageFault_Handler+0x4>

08003044 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800306c:	f7fd f8b4 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003070:	bf00      	nop
 8003072:	bd80      	pop	{r7, pc}

08003074 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003078:	4802      	ldr	r0, [pc, #8]	; (8003084 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800307a:	f7fd fbed 	bl	8000858 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	200000ec 	.word	0x200000ec

08003088 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800308c:	4802      	ldr	r0, [pc, #8]	; (8003098 <TIM2_IRQHandler+0x10>)
 800308e:	f7fe fdea 	bl	8001c66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000168 	.word	0x20000168

0800309c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80030a0:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <SystemInit+0x5c>)
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <SystemInit+0x5c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80030ac:	4912      	ldr	r1, [pc, #72]	; (80030f8 <SystemInit+0x5c>)
 80030ae:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <SystemInit+0x5c>)
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <SystemInit+0x60>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80030b8:	4a0f      	ldr	r2, [pc, #60]	; (80030f8 <SystemInit+0x5c>)
 80030ba:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <SystemInit+0x5c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80030c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80030c8:	4a0b      	ldr	r2, [pc, #44]	; (80030f8 <SystemInit+0x5c>)
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <SystemInit+0x5c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80030d4:	4a08      	ldr	r2, [pc, #32]	; (80030f8 <SystemInit+0x5c>)
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <SystemInit+0x5c>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80030de:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <SystemInit+0x5c>)
 80030e2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80030e6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <SystemInit+0x64>)
 80030ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030ee:	609a      	str	r2, [r3, #8]
#endif 
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	40021000 	.word	0x40021000
 80030fc:	f8ff0000 	.word	0xf8ff0000
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003104:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003106:	e003      	b.n	8003110 <LoopCopyDataInit>

08003108 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800310a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800310c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800310e:	3104      	adds	r1, #4

08003110 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003110:	480a      	ldr	r0, [pc, #40]	; (800313c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003112:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003114:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003116:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003118:	d3f6      	bcc.n	8003108 <CopyDataInit>
  ldr r2, =_sbss
 800311a:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800311c:	e002      	b.n	8003124 <LoopFillZerobss>

0800311e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800311e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003120:	f842 3b04 	str.w	r3, [r2], #4

08003124 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003124:	4b08      	ldr	r3, [pc, #32]	; (8003148 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003126:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003128:	d3f9      	bcc.n	800311e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800312a:	f7ff ffb7 	bl	800309c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800312e:	f000 f80f 	bl	8003150 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003132:	f7ff fb51 	bl	80027d8 <main>
  bx lr
 8003136:	4770      	bx	lr
  ldr r3, =_sidata
 8003138:	08003204 	.word	0x08003204
  ldr r0, =_sdata
 800313c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003140:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8003144:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8003148:	200001ec 	.word	0x200001ec

0800314c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800314c:	e7fe      	b.n	800314c <ADC1_2_IRQHandler>
	...

08003150 <__libc_init_array>:
 8003150:	b570      	push	{r4, r5, r6, lr}
 8003152:	2500      	movs	r5, #0
 8003154:	4e0c      	ldr	r6, [pc, #48]	; (8003188 <__libc_init_array+0x38>)
 8003156:	4c0d      	ldr	r4, [pc, #52]	; (800318c <__libc_init_array+0x3c>)
 8003158:	1ba4      	subs	r4, r4, r6
 800315a:	10a4      	asrs	r4, r4, #2
 800315c:	42a5      	cmp	r5, r4
 800315e:	d109      	bne.n	8003174 <__libc_init_array+0x24>
 8003160:	f000 f822 	bl	80031a8 <_init>
 8003164:	2500      	movs	r5, #0
 8003166:	4e0a      	ldr	r6, [pc, #40]	; (8003190 <__libc_init_array+0x40>)
 8003168:	4c0a      	ldr	r4, [pc, #40]	; (8003194 <__libc_init_array+0x44>)
 800316a:	1ba4      	subs	r4, r4, r6
 800316c:	10a4      	asrs	r4, r4, #2
 800316e:	42a5      	cmp	r5, r4
 8003170:	d105      	bne.n	800317e <__libc_init_array+0x2e>
 8003172:	bd70      	pop	{r4, r5, r6, pc}
 8003174:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003178:	4798      	blx	r3
 800317a:	3501      	adds	r5, #1
 800317c:	e7ee      	b.n	800315c <__libc_init_array+0xc>
 800317e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003182:	4798      	blx	r3
 8003184:	3501      	adds	r5, #1
 8003186:	e7f2      	b.n	800316e <__libc_init_array+0x1e>
 8003188:	080031fc 	.word	0x080031fc
 800318c:	080031fc 	.word	0x080031fc
 8003190:	080031fc 	.word	0x080031fc
 8003194:	08003200 	.word	0x08003200

08003198 <memset>:
 8003198:	4603      	mov	r3, r0
 800319a:	4402      	add	r2, r0
 800319c:	4293      	cmp	r3, r2
 800319e:	d100      	bne.n	80031a2 <memset+0xa>
 80031a0:	4770      	bx	lr
 80031a2:	f803 1b01 	strb.w	r1, [r3], #1
 80031a6:	e7f9      	b.n	800319c <memset+0x4>

080031a8 <_init>:
 80031a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031aa:	bf00      	nop
 80031ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ae:	bc08      	pop	{r3}
 80031b0:	469e      	mov	lr, r3
 80031b2:	4770      	bx	lr

080031b4 <_fini>:
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	bf00      	nop
 80031b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ba:	bc08      	pop	{r3}
 80031bc:	469e      	mov	lr, r3
 80031be:	4770      	bx	lr
